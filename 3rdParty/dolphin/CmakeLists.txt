cmake_minimum_required( VERSION 2.8 )

project( dolphin )

set (CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING "Semicolon separated list" FORCE)

set (HYDRAX_HOME "${DEPENDENCIES}/hydrax)
set (HYDRAX_READY FALSE)
#error function
function (reportError what and when)
	if (${${when}})
		message (${${what}})
	endif ()
endfunction ()
#find hydrax
if(EXISTS ${HYDRAX_HOME}/lib/Debug/HydraX_d.lib AND EXISTS ${HYDRAX_HOME}/lib/Release/HydraX.lib)
	set(HYDRAX_READY TRUE)
	message (STATUS "hydrax is installed" )
else ()
	set(HYDRAX_READY FALSE)
	message (STATUS "hydrax is not installed" )
endif ()
if (NOT HYDRAX_READY)
#build hydrax
	foreach (CONF ${CMAKE_CONFIGURATION_TYPES})
		message (STATUS "Configuring hydrax for ${CONF}, please wait.....")
		execute_process ( 
				COMMAND ${CMAKE_COMMAND} 
				-G ${CMAKE_GENERATOR} 
				.
				WORKING_DIRECTORY ${HYDRAX_HOME}
				RESULT_VARIABLE error OUTPUT_VARIABLE output ERROR_VARIABLE output
				)		
		reportError (output if error)
		message (STATUS "Building hydrax for ${CONF}, please wait.....")
		execute_process ( 
			COMMAND ${CMAKE_COMMAND} --build . --config ${CONF} --target ALL_BUILD
			WORKING_DIRECTORY ${HYDRAX_HOME}
			RESULT_VARIABLE error OUTPUT_VARIABLE output ERROR_VARIABLE output)
		reportError (output if error)
	endforeach ()
endif ()
#use hydrax
add_library(MY_HYDRAX STATIC IMPORTED)
if (WIN32)
	set_property(TARGET MY_HYDRAX PROPERTY IMPORTED_LOCATION_DEBUG ${HYDRAX_HOME}/lib/Debug/HydraX_d.lib)
	set_property(TARGET MY_HYDRAX PROPERTY IMPORTED_LOCATION_RELEASE ${HYDRAX_HOME}/lib/Release/HydraX.lib)
endif ()

#set( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG" )

#set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")

#set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")

set ( OGRE_SOURCE_HOME "../ogre" CACHE PATH "Folder for the required dependencies" )

set ( OGRE_DEBUG_LIB_HOME "../ogre/lib/Debug" CACHE PATH "Folder for the required dependencies" )

set ( OGRE_RELEASE_LIB_HOME "../ogre/lib/Debug" CACHE PATH "Folder for the required dependencies" )

set ( OGRE_DEPEND_HOME "../ogre/Dependencies" CACHE PATH "Folder for the required dependencies" )

set ( BOOST_HOME "../ogre/dependencies/boost" CACHE PATH "Folder for the required dependencies" )

set ( DEPENDENCIES "${CMAKE_SOURCE_DIR}/dependencies" CACHE PATH "Folder for the required dependencies" )

set( OGRE_SOURCE ${OGRE_SOURCE_HOME} )


include_directories( "${CMAKE_CURRENT_SOURCE_DIR}/include" )
include_directories( "${CMAKE_CURRENT_SOURCE_DIR}/src/bulletloader" )
include_directories( "${CMAKE_CURRENT_SOURCE_DIR}/include/OgreBase" )
include_directories( "${OGRE_SOURCE_HOME}/ogremain/include" )
include_directories( "${BOOST_HOME}" )
include_directories( "${OGRE_SOURCE_HOME}/sdk/include/ogre" )
include_directories( "${OGRE_SOURCE_HOME}/sdk/include/OIS" )
include_directories( "${OGRE_SOURCE_HOME}/sdk/include/OGRE/Overlay" )
include_directories( "${OGRE_SOURCE_HOME}/sdk/include/OGRE/RTShaderSystem" )
include_directories( "${OGRE_SOURCE_HOME}/sdk/include/OGRE/HLMS" )
include_directories( "${OGRE_SOURCE_HOME}/sdk/include/OGRE/Terrain" )
include_directories( "${OGRE_SOURCE_HOME}/sdk/include/OGRE/Paging" )
include_directories( "${DEPENDENCIES}/tinyxml" )
include_directories( "${DEPENDENCIES}/bullet/src" )
include_directories( "${DEPENDENCIES}/bullet/src/BulletCollision/CollisionShapes" )
include_directories( "${DEPENDENCIES}/hydrax/src" )
include_directories( "${DEPENDENCIES}/skyx/src" )

link_directories ("${DEPENDENCIES}/tinyxml/x64/Release")

link_directories ("${DEPENDENCIES}/tinyxml/x64/Debug")

link_directories ( "${DEPENDENCIES}/bullet/bin" )

link_directories ( "${DEPENDENCIES}/hydrax/lib/${CMAKE_BUILD_TYPE}" )

link_directories ( "${DEPENDENCIES}/skyx/lib/${CMAKE_BUILD_TYPE}" )

link_directories( "${BOOST_HOME}/stage/lib" )

file( GLOB HEADERS "${CMAKE_CURRENT_SOURCE_DIR}/include/*.h" "${CMAKE_CURRENT_SOURCE_DIR}/include/ocean/*.h" "${CMAKE_CURRENT_SOURCE_DIR}/include/sky/*.h")

file( GLOB SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp"  "${CMAKE_CURRENT_SOURCE_DIR}/src/ocean/*.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/src/sky/*.cpp")

file( GLOB BULLETLOADERSOURCES "${CMAKE_CURRENT_SOURCE_DIR}/src/bulletloader/*.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/src/bulletloader/*.h")

file( GLOB RES "${CMAKE_CURRENT_SOURCE_DIR}/res/*.rc")

set( EXECUTABLE_OUTPUT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/bin/${CMAKE_BUILD_TYPE}" )

add_library(MY_OGRE STATIC IMPORTED)
if (WIN32)
	set_property(TARGET MY_OGRE PROPERTY IMPORTED_LOCATION_DEBUG ${OGRE_DEBUG_LIB_HOME}/OgreMain_d.lib)
	set_property(TARGET MY_OGRE PROPERTY IMPORTED_LOCATION_DEBUG ${OGRE_DEBUG_LIB_HOME}/OgreHLMS_d.lib)
	set_property(TARGET MY_OGRE PROPERTY IMPORTED_LOCATION_DEBUG ${OGRE_DEBUG_LIB_HOME}/OgreRTShaderSystem_d.lib)
	set_property(TARGET MY_OGRE PROPERTY IMPORTED_LOCATION_DEBUG ${OGRE_DEBUG_LIB_HOME}/OgreOverlay_d.lib)
	set_property(TARGET MY_OGRE PROPERTY IMPORTED_LOCATION_DEBUG ${OGRE_DEBUG_LIB_HOME}/OgreTerrain_d.lib)
	set_property(TARGET MY_OGRE PROPERTY IMPORTED_LOCATION_DEBUG ${OGRE_DEBUG_LIB_HOME}/OgrePaging_d.lib)
	set_property(TARGET MY_OGRE PROPERTY IMPORTED_LOCATION_RELEASE ${OGRE_RELEASE_LIB_HOME}/OgreMain.lib)
	set_property(TARGET MY_OGRE PROPERTY IMPORTED_LOCATION_RELEASE ${OGRE_RELEASE_LIB_HOME}/OgreHLMS.lib)
	set_property(TARGET MY_OGRE PROPERTY IMPORTED_LOCATION_RELEASE ${OGRE_RELEASE_LIB_HOME}/OgreRTShaderSystem.lib)
	set_property(TARGET MY_OGRE PROPERTY IMPORTED_LOCATION_RELEASE ${OGRE_RELEASE_LIB_HOME}/OgreOverlay.lib)
	set_property(TARGET MY_OGRE PROPERTY IMPORTED_LOCATION_RELEASE ${OGRE_RELEASE_LIB_HOME}/OgreTerrain.lib)
	set_property(TARGET MY_OGRE PROPERTY IMPORTED_LOCATION_RELEASE ${OGRE_RELEASE_LIB_HOME}/OgrePaging.lib)
endif ()

set( BULLET_LIBRARIES
	debug BulletDynamics_vs2010_x64_debug.lib
	debug BulletCollision_vs2010_x64_debug.lib
	debug LinearMath_vs2010_x64_debug.lib
	optimized BulletDynamics_vs2010_x64_release.lib
	optimized BulletCollision_vs2010_x64_release.lib
	optimized LinearMath_vs2010_x64_release.lib
	)


set( TINYXML_LIBRARIES
	debug tinyxml.lib 
	optimized tinyxml.lib
	)

set( HYDRAX_LIBARIES 
	debug HydraX_d.lib
	optimized HydraX.lib)

set( SKYX_LIBARIES 
	debug SkyX_d.lib
	optimized SkyX.lib)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})


add_executable( dolphin WIN32  ${HEADERS}  ${SOURCES} ${BULLETLOADERSOURCES} ${RES})

#source_group("bulletloader" FILES ${BULLETLOADERSOURCES})
target_link_libraries( dolphin MY_OGRE )
#target_link_libraries( dolphin MY_OGRE ${BULLET_LIBRARIES} ${TINYXML_LIBRARIES} ${HYDRAX_LIBARIES} ${SKYX_LIBARIES} )