/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
 /* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
	struct SwigMovePointer {
		T *ptr;
		SwigMovePointer(T *p) : ptr(p) { }
		~SwigMovePointer() { delete ptr; }
		SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
	} pointer;
	SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
	SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
	SwigValueWrapper() : pointer(0) { }
	SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
	operator T&() const { return *pointer.ptr; }
	T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
	return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

 /* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifndef SWIG_V8_VERSION
#define SWIG_V8_VERSION 0x031110
#endif


#include <node.h>
#include <v8.h>
#include <errno.h>
#include <limits.h>
#include <stdlib.h>

 /* -----------------------------------------------------------------------------
  * swigrun.swg
  *
  * This file contains generic C API SWIG runtime support for pointer
  * type checking.
  * ----------------------------------------------------------------------------- */

  /* This should only be incremented when either the layout of swig_type_info changes,
	 or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

	 /* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

	 if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
	   // success code
	 } else {
	   //fail code
	 }

   Now you can be more explicit:

	int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
	if (SWIG_IsOK(res)) {
	  // success code
	} else {
	  // fail code
	}

   which is the same really, but now you can also do

	Type *ptr;
	int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
	if (SWIG_IsOK(res)) {
	  // success code
	  if (SWIG_IsNewObj(res) {
		...
	delete *ptr;
	  } else {
		...
	  }
	} else {
	  // fail code
	}

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

	  int SWIG_ConvertPtr(obj, ptr,...) {
		if (<obj is ok>) {
		  if (<need new object>) {
			*ptr = <ptr to new allocated object>;
			return SWIG_NEWOBJ;
		  } else {
			*ptr = <ptr to old object>;
			return SWIG_OLDOBJ;
		  }
		} else {
		  return SWIG_BADOBJ;
		}
	  }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

	   int food(double)
	   int fooi(int);

   and you call

	  food(1)   // cast rank '1'  (1 -> 1.0)
	  fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
	return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
	return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

	typedef void *(*swig_converter_func)(void *, int *);
	typedef struct swig_type_info *(*swig_dycast_func)(void **);

	/* Structure to store information on one type */
	typedef struct swig_type_info {
		const char             *name;			/* mangled name of this type */
		const char             *str;			/* human readable name of this type */
		swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
		struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
		void                   *clientdata;		/* language specific type data */
		int                    owndata;		/* flag if the structure owns the clientdata */
	} swig_type_info;

	/* Structure to store a type and conversion function used for casting */
	typedef struct swig_cast_info {
		swig_type_info         *type;			/* pointer to type that is equivalent to this type */
		swig_converter_func     converter;		/* function to cast the void pointers */
		struct swig_cast_info  *next;			/* pointer to next cast in linked list */
		struct swig_cast_info  *prev;			/* pointer to the previous cast */
	} swig_cast_info;

	/* Structure used to store module information
	 * Each module generates one structure like this, and the runtime collects
	 * all of these structures and stores them in a circularly linked list.*/
	typedef struct swig_module_info {
		swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
		size_t                 size;		        /* Number of types in this module */
		struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
		swig_type_info         **type_initial;	/* Array of initially generated type structures */
		swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
		void                    *clientdata;		/* Language specific module data */
	} swig_module_info;

	/*
	  Compare two type names skipping the space characters, therefore
	  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

	  Return 0 when the two name types are equivalent, as in
	  strncmp, but skipping ' '.
	*/
	SWIGRUNTIME int
		SWIG_TypeNameComp(const char *f1, const char *l1,
			const char *f2, const char *l2) {
		for (; (f1 != l1) && (f2 != l2); ++f1, ++f2) {
			while ((*f1 == ' ') && (f1 != l1)) ++f1;
			while ((*f2 == ' ') && (f2 != l2)) ++f2;
			if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
		}
		return (int)((l1 - f1) - (l2 - f2));
	}

	/*
	  Check type equivalence in a name list like <name1>|<name2>|...
	  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
	*/
	SWIGRUNTIME int
		SWIG_TypeCmp(const char *nb, const char *tb) {
		int equiv = 1;
		const char* te = tb + strlen(tb);
		const char* ne = nb;
		while (equiv != 0 && *ne) {
			for (nb = ne; *ne; ++ne) {
				if (*ne == '|') break;
			}
			equiv = SWIG_TypeNameComp(nb, ne, tb, te);
			if (*ne) ++ne;
		}
		return equiv;
	}

	/*
	  Check type equivalence in a name list like <name1>|<name2>|...
	  Return 0 if not equal, 1 if equal
	*/
	SWIGRUNTIME int
		SWIG_TypeEquiv(const char *nb, const char *tb) {
		return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
	}

	/*
	  Check the typename
	*/
	SWIGRUNTIME swig_cast_info *
		SWIG_TypeCheck(const char *c, swig_type_info *ty) {
		if (ty) {
			swig_cast_info *iter = ty->cast;
			while (iter) {
				if (strcmp(iter->type->name, c) == 0) {
					if (iter == ty->cast)
						return iter;
					/* Move iter to the top of the linked list */
					iter->prev->next = iter->next;
					if (iter->next)
						iter->next->prev = iter->prev;
					iter->next = ty->cast;
					iter->prev = 0;
					if (ty->cast) ty->cast->prev = iter;
					ty->cast = iter;
					return iter;
				}
				iter = iter->next;
			}
		}
		return 0;
	}

	/*
	  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
	*/
	SWIGRUNTIME swig_cast_info *
		SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
		if (ty) {
			swig_cast_info *iter = ty->cast;
			while (iter) {
				if (iter->type == from) {
					if (iter == ty->cast)
						return iter;
					/* Move iter to the top of the linked list */
					iter->prev->next = iter->next;
					if (iter->next)
						iter->next->prev = iter->prev;
					iter->next = ty->cast;
					iter->prev = 0;
					if (ty->cast) ty->cast->prev = iter;
					ty->cast = iter;
					return iter;
				}
				iter = iter->next;
			}
		}
		return 0;
	}

	/*
	  Cast a pointer up an inheritance hierarchy
	*/
	SWIGRUNTIMEINLINE void *
		SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
		return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
	}

	/*
	   Dynamic pointer casting. Down an inheritance hierarchy
	*/
	SWIGRUNTIME swig_type_info *
		SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
		swig_type_info *lastty = ty;
		if (!ty || !ty->dcast) return ty;
		while (ty && (ty->dcast)) {
			ty = (*ty->dcast)(ptr);
			if (ty) lastty = ty;
		}
		return lastty;
	}

	/*
	  Return the name associated with this type
	*/
	SWIGRUNTIMEINLINE const char *
		SWIG_TypeName(const swig_type_info *ty) {
		return ty->name;
	}

	/*
	  Return the pretty name associated with this type,
	  that is an unmangled type name in a form presentable to the user.
	*/
	SWIGRUNTIME const char *
		SWIG_TypePrettyName(const swig_type_info *type) {
		/* The "str" field contains the equivalent pretty names of the
		   type, separated by vertical-bar characters.  We choose
		   to print the last name, as it is often (?) the most
		   specific. */
		if (!type) return NULL;
		if (type->str != NULL) {
			const char *last_name = type->str;
			const char *s;
			for (s = type->str; *s; s++)
				if (*s == '|') last_name = s + 1;
			return last_name;
		}
		else
			return type->name;
	}

	/*
	   Set the clientdata field for a type
	*/
	SWIGRUNTIME void
		SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
		swig_cast_info *cast = ti->cast;
		/* if (ti->clientdata == clientdata) return; */
		ti->clientdata = clientdata;

		while (cast) {
			if (!cast->converter) {
				swig_type_info *tc = cast->type;
				if (!tc->clientdata) {
					SWIG_TypeClientData(tc, clientdata);
				}
			}
			cast = cast->next;
		}
	}
	SWIGRUNTIME void
		SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
		SWIG_TypeClientData(ti, clientdata);
		ti->owndata = 1;
	}

	/*
	  Search for a swig_type_info structure only by mangled name
	  Search is a O(log #types)

	  We start searching at module start, and finish searching when start == end.
	  Note: if start == end at the beginning of the function, we go all the way around
	  the circular list.
	*/
	SWIGRUNTIME swig_type_info *
		SWIG_MangledTypeQueryModule(swig_module_info *start,
			swig_module_info *end,
			const char *name) {
		swig_module_info *iter = start;
		do {
			if (iter->size) {
				size_t l = 0;
				size_t r = iter->size - 1;
				do {
					/* since l+r >= 0, we can (>> 1) instead (/ 2) */
					size_t i = (l + r) >> 1;
					const char *iname = iter->types[i]->name;
					if (iname) {
						int compare = strcmp(name, iname);
						if (compare == 0) {
							return iter->types[i];
						}
						else if (compare < 0) {
							if (i) {
								r = i - 1;
							}
							else {
								break;
							}
						}
						else if (compare > 0) {
							l = i + 1;
						}
					}
					else {
						break; /* should never happen */
					}
				} while (l <= r);
			}
			iter = iter->next;
		} while (iter != end);
		return 0;
	}

	/*
	  Search for a swig_type_info structure for either a mangled name or a human readable name.
	  It first searches the mangled names of the types, which is a O(log #types)
	  If a type is not found it then searches the human readable names, which is O(#types).

	  We start searching at module start, and finish searching when start == end.
	  Note: if start == end at the beginning of the function, we go all the way around
	  the circular list.
	*/
	SWIGRUNTIME swig_type_info *
		SWIG_TypeQueryModule(swig_module_info *start,
			swig_module_info *end,
			const char *name) {
		/* STEP 1: Search the name field using binary search */
		swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
		if (ret) {
			return ret;
		}
		else {
			/* STEP 2: If the type hasn't been found, do a complete search
			   of the str field (the human readable name) */
			swig_module_info *iter = start;
			do {
				size_t i = 0;
				for (; i < iter->size; ++i) {
					if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
						return iter->types[i];
				}
				iter = iter->next;
			} while (iter != end);
		}

		/* neither found a match */
		return 0;
	}

	/*
	   Pack binary data into a string
	*/
	SWIGRUNTIME char *
		SWIG_PackData(char *c, void *ptr, size_t sz) {
		static const char hex[17] = "0123456789abcdef";
		const unsigned char *u = (unsigned char *)ptr;
		const unsigned char *eu = u + sz;
		for (; u != eu; ++u) {
			unsigned char uu = *u;
			*(c++) = hex[(uu & 0xf0) >> 4];
			*(c++) = hex[uu & 0xf];
		}
		return c;
	}

	/*
	   Unpack binary data from a string
	*/
	SWIGRUNTIME const char *
		SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
		unsigned char *u = (unsigned char *)ptr;
		const unsigned char *eu = u + sz;
		for (; u != eu; ++u) {
			char d = *(c++);
			unsigned char uu;
			if ((d >= '0') && (d <= '9'))
				uu = (unsigned char)((d - '0') << 4);
			else if ((d >= 'a') && (d <= 'f'))
				uu = (unsigned char)((d - ('a' - 10)) << 4);
			else
				return (char *)0;
			d = *(c++);
			if ((d >= '0') && (d <= '9'))
				uu |= (unsigned char)(d - '0');
			else if ((d >= 'a') && (d <= 'f'))
				uu |= (unsigned char)(d - ('a' - 10));
			else
				return (char *)0;
			*u = uu;
		}
		return c;
	}

	/*
	   Pack 'void *' into a string buffer.
	*/
	SWIGRUNTIME char *
		SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
		char *r = buff;
		if ((2 * sizeof(void *) + 2) > bsz) return 0;
		*(r++) = '_';
		r = SWIG_PackData(r, &ptr, sizeof(void *));
		if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
		strcpy(r, name);
		return buff;
	}

	SWIGRUNTIME const char *
		SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
		if (*c != '_') {
			if (strcmp(c, "NULL") == 0) {
				*ptr = (void *)0;
				return name;
			}
			else {
				return 0;
			}
		}
		return SWIG_UnpackData(++c, ptr, sizeof(void *));
	}

	SWIGRUNTIME char *
		SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
		char *r = buff;
		size_t lname = (name ? strlen(name) : 0);
		if ((2 * sz + 2 + lname) > bsz) return 0;
		*(r++) = '_';
		r = SWIG_PackData(r, ptr, sz);
		if (lname) {
			strncpy(r, name, lname + 1);
		}
		else {
			*r = 0;
		}
		return buff;
	}

	SWIGRUNTIME const char *
		SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
		if (*c != '_') {
			if (strcmp(c, "NULL") == 0) {
				memset(ptr, 0, sz);
				return name;
			}
			else {
				return 0;
			}
		}
		return SWIG_UnpackData(++c, ptr, sz);
	}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* ---------------------------------------------------------------------------
 * These typedefs and defines are used to deal with v8 API changes
 *
 * ---------------------------------------------------------------------------*/

 // First v8 version that uses "SetWeak" and not "MakeWeak"

#define SWIGV8_SETWEAK_VERSION 0x032224

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031803)
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::New(cstr, len)
#else
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), cstr, v8::String::kNormalString, len)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
typedef v8::Handle<v8::Value> SwigV8ReturnValue;
typedef v8::Arguments SwigV8Arguments;
typedef v8::AccessorInfo SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) return scope.Close(val)
#define SWIGV8_RETURN_INFO(val, info) return scope.Close(val)
#else
typedef void SwigV8ReturnValue;
typedef v8::FunctionCallbackInfo<v8::Value> SwigV8Arguments;
typedef v8::PropertyCallbackInfo<v8::Value> SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) args.GetReturnValue().Set(val); return
#define SWIGV8_RETURN_INFO(val, info) info.GetReturnValue().Set(val); return
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032117)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#else
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::EscapableHandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Escape(val)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_ADJUST_MEMORY(size) v8::V8::AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Context::GetCurrent()
#define SWIGV8_THROW_EXCEPTION(err) v8::ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::New(str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewSymbol(sym)
#else
#define SWIGV8_ADJUST_MEMORY(size) v8::Isolate::GetCurrent()->AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Isolate::GetCurrent()->GetCurrentContext()
#define SWIGV8_THROW_EXCEPTION(err) v8::Isolate::GetCurrent()->ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), sym)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032318)
#define SWIGV8_ARRAY_NEW() v8::Array::New()
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New()
#define SWIGV8_INT32_NEW(num) v8::Int32::New(num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(num)
#define SWIGV8_OBJECT_NEW() v8::Object::New()
#define SWIGV8_UNDEFINED() v8::Undefined()
#define SWIGV8_NULL() v8::Null()
#else
#define SWIGV8_ARRAY_NEW() v8::Array::New(v8::Isolate::GetCurrent())
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(v8::Isolate::GetCurrent(), bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(v8::Isolate::GetCurrent(), val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(v8::Isolate::GetCurrent(), func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New(v8::Isolate::GetCurrent())
#define SWIGV8_INT32_NEW(num) v8::Int32::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(v8::Isolate::GetCurrent(), num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_OBJECT_NEW() v8::Object::New(v8::Isolate::GetCurrent())
#define SWIGV8_UNDEFINED() v8::Undefined(v8::Isolate::GetCurrent())
#define SWIGV8_NULL() v8::Null(v8::Isolate::GetCurrent())
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(class);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(v8::Isolate::GetCurrent(), class);
#else
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ.Reset(v8::Isolate::GetCurrent(), class);
#endif

/* ---------------------------------------------------------------------------
 * Error handling
 *
 * ---------------------------------------------------------------------------*/

#define SWIG_Error(code, msg)     SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_exception(code, msg) SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_fail                 goto fail
#define SWIGV8_OVERLOAD false

SWIGINTERN void SWIG_V8_Raise(const char *msg) {
	SWIGV8_THROW_EXCEPTION(v8::Exception::Error(SWIGV8_STRING_NEW(msg)));
}

/*
  Note: There are two contexts for handling errors.
  A static V8ErrorHandler is used in not overloaded methods.
  For overloaded methods the throwing type checking mechanism is used
  during dispatching. As V8 exceptions can not be resetted properly
  the trick is to use a dynamic ErrorHandler with same local name as the global
  one.

  - See defintion of SWIG_Error above.
  - See code templates 'JS_function_dispatcher', 'JS_functionwrapper_overload',
	and 'JS_function_dispatch_case' in javascriptcode.swg

*/
class V8ErrorHandler {
public:
	virtual ~V8ErrorHandler() {}
	virtual void error(int code, const char *msg) {
		SWIG_V8_Raise(msg);
	}
};
// this is used in usually
SWIGRUNTIME V8ErrorHandler SWIGV8_ErrorHandler;

// instances of this are used in overloaded functions
class OverloadErrorHandler : public V8ErrorHandler {
public:
	virtual void error(int code, const char *msg) {
		err = v8::Exception::Error(SWIGV8_STRING_NEW(msg));
		if (code != SWIG_TypeError) {
			SWIGV8_THROW_EXCEPTION(err);
		}
	}
	v8::Handle<v8::Value> err;
};

/* ---------------------------------------------------------------------------
 * Basic Proxy object
 *
 * ---------------------------------------------------------------------------*/

 // Note: to trigger the v8 gc more often one can tell v8 about the memory consumption
 // TODO: we could add a v8 specific parameter to control this value
#define SWIGV8_AVG_OBJ_SIZE 1000

class SWIGV8_Proxy {
public:
	SWIGV8_Proxy() : swigCMemOwn(false), swigCObject(0), info(0) {
		SWIGV8_ADJUST_MEMORY(SWIGV8_AVG_OBJ_SIZE);
	};

	~SWIGV8_Proxy() {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
		handle.ClearWeak();
		handle.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
		handle.ClearWeak(v8::Isolate::GetCurrent());
		handle.Dispose(v8::Isolate::GetCurrent());
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
		handle.ClearWeak();
		handle.Dispose();
#else    
		handle.ClearWeak();
		handle.Reset();
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
		handle.Clear();
#endif

		SWIGV8_ADJUST_MEMORY(-SWIGV8_AVG_OBJ_SIZE);
	}

	bool swigCMemOwn;
	void *swigCObject;
	swig_type_info *info;
	v8::Persistent<v8::Object> handle;
};

class SWIGV8_ClientData {
public:
	v8::Persistent<v8::FunctionTemplate> class_templ;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
	void(*dtor) (v8::Persistent< v8::Value> object, void *parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
	void(*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Value> object, void *parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
	void(*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy);
#else
	void(*dtor) (const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data);
#endif
};

SWIGRUNTIME v8::Persistent<v8::FunctionTemplate> SWIGV8_SWIGTYPE_Proxy_class_templ;

SWIGRUNTIME int SWIG_V8_ConvertInstancePtr(v8::Handle<v8::Object> objRef, void **ptr, swig_type_info *info, int flags) {
	SWIGV8_HANDLESCOPE();

	if (objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
	v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
	SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
	SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

	if (cdata == NULL) {
		return SWIG_ERROR;
	}
	if (cdata->info != info) {
		swig_cast_info *tc = SWIG_TypeCheckStruct(cdata->info, info);
		if (!tc && cdata->info->name) {
			tc = SWIG_TypeCheck(cdata->info->name, info);
		}
		bool type_valid = tc != 0;
		if (!type_valid) {
			return SWIG_TypeError;
		}
	}
	*ptr = cdata->swigCObject;
	if (flags & SWIG_POINTER_DISOWN) {
		cdata->swigCMemOwn = false;
	}
	return SWIG_OK;
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Persistent< v8::Value > object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Value > object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy) {
#else
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
	SWIGV8_Proxy *proxy = data.GetParameter();
#endif

	delete proxy;
}

SWIGRUNTIME int SWIG_V8_GetInstancePtr(v8::Handle<v8::Value> valRef, void **ptr) {
	if (!valRef->IsObject()) {
		return SWIG_TypeError;
	}
	v8::Handle<v8::Object> objRef = valRef->ToObject();

	if (objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
	v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
	SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
	SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

	if (cdata == NULL) {
		return SWIG_ERROR;
	}

	*ptr = cdata->swigCObject;

	return SWIG_OK;
}

SWIGRUNTIME void SWIGV8_SetPrivateData(v8::Handle<v8::Object> obj, void *ptr, swig_type_info *info, int flags) {
	SWIGV8_Proxy *cdata = new SWIGV8_Proxy();
	cdata->swigCObject = ptr;
	cdata->swigCMemOwn = (flags & SWIG_POINTER_OWN) ? 1 : 0;
	cdata->info = info;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
	obj->SetPointerInInternalField(0, cdata);
#else
	obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
	cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
	cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
	cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
	// clientdata must be set for owned data as we need to register the dtor
	if (cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
		cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
	}
	else {
		cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
	}
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031918)
	if (cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
		cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
	}
	else {
		cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, SWIGV8_Proxy_DefaultDtor);
	}
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
	if (cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
		cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
	}
	else {
		cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
	}
#else
	if (cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
		cdata->handle.SetWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
	}
	else {
		cdata->handle.SetWeak(cdata, SWIGV8_Proxy_DefaultDtor);
	}
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
	cdata->handle.MarkIndependent();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
	cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
	cdata->handle.MarkIndependent();
#endif

}

SWIGRUNTIME int SWIG_V8_ConvertPtr(v8::Handle<v8::Value> valRef, void **ptr, swig_type_info *info, int flags) {
	SWIGV8_HANDLESCOPE();

	/* special case: JavaScript null => C NULL pointer */
	if (valRef->IsNull()) {
		*ptr = 0;
		return SWIG_OK;
	}
	if (!valRef->IsObject()) {
		return SWIG_TypeError;
	}
	v8::Handle<v8::Object> objRef = valRef->ToObject();
	return SWIG_V8_ConvertInstancePtr(objRef, ptr, info, flags);
}

SWIGRUNTIME v8::Handle<v8::Value> SWIG_V8_NewPointerObj(void *ptr, swig_type_info *info, int flags) {
	SWIGV8_HANDLESCOPE_ESC();

	v8::Handle<v8::FunctionTemplate> class_templ;

	if (ptr == NULL) {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		SWIGV8_ESCAPE(SWIGV8_NULL());
#else    
		v8::Local<v8::Primitive> result = SWIGV8_NULL();
		SWIGV8_ESCAPE(result);
#endif
	}

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
	if (info->clientdata != 0) {
		class_templ = ((SWIGV8_ClientData*)info->clientdata)->class_templ;
	}
	else {
		class_templ = SWIGV8_SWIGTYPE_Proxy_class_templ;
	}
#else
	v8::Isolate *isolate = v8::Isolate::GetCurrent();

	if (info->clientdata != 0) {
		class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, ((SWIGV8_ClientData*)info->clientdata)->class_templ);
	}
	else {
		class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, SWIGV8_SWIGTYPE_Proxy_class_templ);
	}
#endif

	//  v8::Handle<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
	v8::Local<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
	SWIGV8_SetPrivateData(result, ptr, info, flags);

	SWIGV8_ESCAPE(result);
}

#define SWIG_ConvertPtr(obj, ptr, info, flags)    SWIG_V8_ConvertPtr(obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags)      SWIG_V8_NewPointerObj(ptr, info, flags)

#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_V8_ConvertInstancePtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_V8_NewPointerObj(thisvalue, type, flags)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_V8_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_V8_NewPointerObj(ptr, type, 0)

#define SWIG_GetInstancePtr(obj, ptr)    SWIG_V8_GetInstancePtr(obj, ptr)

SWIGRUNTIME SwigV8ReturnValue _SWIGV8_wrap_equals(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	void *arg1 = (void *)0;
	void *arg2 = (void *)0;
	bool result;
	int res1;
	int res2;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for equals.");

	res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ERROR, "Could not get pointer from 'this' object for equals.");
	}
	res2 = SWIG_GetInstancePtr(args[0], &arg2);
	if (!SWIG_IsOK(res2)) {
		SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "equals" "', argument " "1"" of type '" "void *""'");
	}

	result = (bool)(arg1 == arg2);
	jsresult = SWIGV8_BOOLEAN_NEW(result);

	SWIGV8_RETURN(jsresult);
	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

SWIGRUNTIME SwigV8ReturnValue _wrap_getCPtr(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	void *arg1 = (void *)0;
	long result;
	int res1;

	res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCPtr" "', argument " "1"" of type '" "void *""'");
	}

	result = (long)arg1;
	jsresult = SWIGV8_NUMBER_NEW(result);

	SWIGV8_RETURN(jsresult);
	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

/* ---------------------------------------------------------------------------
 * PackedData object
 *
 * ---------------------------------------------------------------------------*/

class SwigV8PackedData {
public:
	SwigV8PackedData(void *data, size_t size, swig_type_info *type) : data(data), size(size), type(type) {};

	~SwigV8PackedData() {
	};

	void *data;
	size_t size;
	swig_type_info *type;

	v8::Persistent<v8::Object> handle;
};

SWIGRUNTIMEINLINE
int SwigV8Packed_Check(v8::Handle<v8::Value> valRef) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> objRef = valRef->ToObject();
	if (objRef->InternalFieldCount() < 1) return false;
	v8::Handle<v8::Value> flag = objRef->GetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"));
	return (flag->IsBoolean() && flag->BooleanValue());
}

SWIGRUNTIME
swig_type_info *SwigV8Packed_UnpackData(v8::Handle<v8::Value> valRef, void *ptr, size_t size) {
	if (SwigV8Packed_Check(valRef)) {
		SWIGV8_HANDLESCOPE();

		SwigV8PackedData *sobj;

		v8::Handle<v8::Object> objRef = valRef->ToObject();

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
		v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
		sobj = static_cast<SwigV8PackedData*>(v8::External::Unwrap(cdataRef));
#else
		sobj = static_cast<SwigV8PackedData*>(objRef->GetAlignedPointerFromInternalField(0));
#endif
		if (sobj == NULL || sobj->size != size) return 0;
		memcpy(ptr, sobj->data, size);
		return sobj->type;
	}
	else {
		return 0;
	}
}

SWIGRUNTIME
int SWIGV8_ConvertPacked(v8::Handle<v8::Value> valRef, void *ptr, size_t sz, swig_type_info *ty) {
	swig_type_info *to = SwigV8Packed_UnpackData(valRef, ptr, sz);
	if (!to) return SWIG_ERROR;
	if (ty) {
		if (to != ty) {
			/* check type cast? */
			swig_cast_info *tc = SWIG_TypeCheck(to->name, ty);
			if (!tc) return SWIG_ERROR;
		}
	}
	return SWIG_OK;
}

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Persistent< v8::Value > object, void *parameter) {
	SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
	SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Object> *object, SwigV8PackedData *cdata) {
#else
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(const v8::WeakCallbackData<v8::Object, SwigV8PackedData> &data) {
	v8::Local<v8::Object> object = data.GetValue();
	SwigV8PackedData *cdata = data.GetParameter();
#endif

	delete cdata;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
	object.Clear();
	object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
	object.Clear();
	object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
	object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
	object->Dispose();
#else
	object.Clear();
#endif
}

SWIGRUNTIME
v8::Handle<v8::Value> SWIGV8_NewPackedObj(void *data, size_t size, swig_type_info *type) {
	SWIGV8_HANDLESCOPE_ESC();

	SwigV8PackedData *cdata = new SwigV8PackedData(data, size, type);
	//  v8::Handle<v8::Object> obj = SWIGV8_OBJECT_NEW();
	v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();

	obj->SetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"), SWIGV8_BOOLEAN_NEW(true));

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
	obj->SetPointerInInternalField(0, cdata);
#else
	obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
	cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
	cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
	cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
	cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031918)
	cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
	cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#else
	cdata->handle.SetWeak(cdata, _wrap_SwigV8PackedData_delete);
	//  v8::V8::SetWeak(&cdata->handle, cdata, _wrap_SwigV8PackedData_delete);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
	cdata->handle.MarkIndependent();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
	cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
	cdata->handle.MarkIndependent();
#endif

	SWIGV8_ESCAPE(obj);
}

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIGV8_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIGV8_NewPackedObj(ptr, sz, type)


/* ---------------------------------------------------------------------------
 * Support for IN/OUTPUT typemaps (see Lib/typemaps/inoutlist.swg)
 *
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
	v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Handle<v8::Value> result, v8::Handle<v8::Value> obj) {
#else
	v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Local<v8::Value> result, v8::Handle<v8::Value> obj) {
#endif
	SWIGV8_HANDLESCOPE_ESC();

	if (result->IsUndefined()) {
		result = SWIGV8_ARRAY_NEW();
	}
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
	v8::Handle<v8::Array> arr = v8::Handle<v8::Array>::Cast(result);
#else  
	v8::Local<v8::Array> arr = v8::Local<v8::Array>::Cast(result);
#endif
	arr->Set(arr->Length(), obj);

	SWIGV8_ESCAPE(arr);
}



// Note: since 3.19 there are new CallBack types, since 03.21.9 the old ones have been removed
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
typedef v8::InvocationCallback  SwigV8FunctionCallback;
typedef v8::AccessorGetter      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetter      SwigV8AccessorSetterCallback;
typedef v8::AccessorInfo        SwigV8PropertyCallbackInfoVoid;
#else
typedef v8::FunctionCallback            SwigV8FunctionCallback;
typedef v8::AccessorGetterCallback      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetterCallback      SwigV8AccessorSetterCallback;
typedef v8::PropertyCallbackInfo<void>  SwigV8PropertyCallbackInfoVoid;
#endif

/**
 * Creates a class template for a class with specified initialization function.
 */
SWIGRUNTIME v8::Handle<v8::FunctionTemplate> SWIGV8_CreateClassTemplate(const char* symbol) {
	SWIGV8_HANDLESCOPE_ESC();

	v8::Local<v8::FunctionTemplate> class_templ = SWIGV8_FUNCTEMPLATE_NEW_VOID();
	class_templ->SetClassName(SWIGV8_SYMBOL_NEW(symbol));

	v8::Handle<v8::ObjectTemplate> inst_templ = class_templ->InstanceTemplate();
	inst_templ->SetInternalFieldCount(1);

	v8::Handle<v8::ObjectTemplate> equals_templ = class_templ->PrototypeTemplate();
	equals_templ->Set(SWIGV8_SYMBOL_NEW("equals"), SWIGV8_FUNCTEMPLATE_NEW(_SWIGV8_wrap_equals));

	v8::Handle<v8::ObjectTemplate> cptr_templ = class_templ->PrototypeTemplate();
	cptr_templ->Set(SWIGV8_SYMBOL_NEW("getCPtr"), SWIGV8_FUNCTEMPLATE_NEW(_wrap_getCPtr));

	SWIGV8_ESCAPE(class_templ);
}

/**
 * Registers a class method with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberFunction(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
	SwigV8FunctionCallback _func) {
	v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->PrototypeTemplate();
	proto_templ->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func));
}

/**
 * Registers a class property with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberVariable(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
	SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
	v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->InstanceTemplate();
	proto_templ->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticFunction(v8::Handle<v8::Object> obj, const char* symbol,
	const SwigV8FunctionCallback& _func) {
	obj->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func)->GetFunction());
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticVariable(v8::Handle<v8::Object> obj, const char* symbol,
	SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
	obj->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
}

SWIGRUNTIME void JS_veto_set_variable(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid& info)
{
	char buffer[256];
	char msg[512];
	int res;

	property->WriteUtf8(buffer, 256);
	res = sprintf(msg, "Tried to write read-only variable: %s.", buffer);

	if (res < 0) {
		SWIG_exception(SWIG_ERROR, "Tried to write read-only variable.");
	}
	else {
		SWIG_exception(SWIG_ERROR, msg);
	}
}



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Ape__Color swig_types[0]
#define SWIGTYPE_p_Ape__Degree swig_types[1]
#define SWIGTYPE_p_Ape__Entity swig_types[2]
#define SWIGTYPE_p_Ape__Euler swig_types[3]
#define SWIGTYPE_p_Ape__Event swig_types[4]
#define SWIGTYPE_p_Ape__Geometry swig_types[5]
#define SWIGTYPE_p_Ape__IFileGeometry swig_types[6]
#define SWIGTYPE_p_Ape__ILight swig_types[7]
#define SWIGTYPE_p_Ape__IManualGeometry swig_types[8]
#define SWIGTYPE_p_Ape__INode swig_types[9]
#define SWIGTYPE_p_Ape__ITextGeometry swig_types[10]
#define SWIGTYPE_p_Ape__ITexture swig_types[11]
#define SWIGTYPE_p_Ape__LightAttenuation swig_types[12]
#define SWIGTYPE_p_Ape__LightSpotRange swig_types[13]
#define SWIGTYPE_p_Ape__Material swig_types[14]
#define SWIGTYPE_p_Ape__Quaternion swig_types[15]
#define SWIGTYPE_p_Ape__Radian swig_types[16]
#define SWIGTYPE_p_Ape__SingletonT_IEventManager_t swig_types[17]
#define SWIGTYPE_p_Ape__SingletonT_IPluginManager_t swig_types[18]
#define SWIGTYPE_p_Ape__SingletonT_IScene_t swig_types[19]
#define SWIGTYPE_p_Ape__Vector2 swig_types[20]
#define SWIGTYPE_p_Ape__Vector3 swig_types[21]
#define SWIGTYPE_p_Ape__Vector4 swig_types[22]
#define SWIGTYPE_p_IEventManager swig_types[23]
#define SWIGTYPE_p_IPluginManager swig_types[24]
#define SWIGTYPE_p_IScene swig_types[25]
#define SWIGTYPE_p_Quaternion swig_types[26]
#define SWIGTYPE_p_Radian swig_types[27]
#define SWIGTYPE_p_Vector3 swig_types[28]
#define SWIGTYPE_p_Vector3Vector swig_types[29]
#define SWIGTYPE_p_char swig_types[30]
#define SWIGTYPE_p_std__mapT_Texture__Type_std__weak_ptrT_Ape__Entity_t_t swig_types[31]
#define SWIGTYPE_p_std__mapT_int_std__vectorT_std__weak_ptrT_Ape__Entity_t_t_t swig_types[32]
#define SWIGTYPE_p_std__mapT_std__string_std__shared_ptrT_Ape__Entity_t_t swig_types[33]
#define SWIGTYPE_p_std__mapT_std__string_std__shared_ptrT_Ape__INode_t_t swig_types[34]
#define SWIGTYPE_p_std__mapT_std__string_std__weak_ptrT_Ape__Entity_t_t swig_types[35]
#define SWIGTYPE_p_std__mapT_std__string_std__weak_ptrT_Ape__INode_t_t swig_types[36]
#define SWIGTYPE_p_std__shared_ptrT_Ape__Entity_t swig_types[37]
#define SWIGTYPE_p_std__shared_ptrT_Ape__INode_t swig_types[38]
#define SWIGTYPE_p_std__vectorT_Ape__Color_t swig_types[39]
#define SWIGTYPE_p_std__vectorT_Ape__Quaternion_t swig_types[40]
#define SWIGTYPE_p_std__vectorT_Ape__Vector2_t swig_types[41]
#define SWIGTYPE_p_std__vectorT_Ape__Vector3_t swig_types[42]
#define SWIGTYPE_p_std__vectorT_Ape__Vector4_t swig_types[43]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[44]
#define SWIGTYPE_p_std__vectorT_std__shared_ptrT_Ape__Entity_t_t swig_types[45]
#define SWIGTYPE_p_std__vectorT_std__shared_ptrT_Ape__INode_t_t swig_types[46]
#define SWIGTYPE_p_std__vectorT_std__weak_ptrT_Ape__Entity_t_t swig_types[47]
#define SWIGTYPE_p_std__vectorT_std__weak_ptrT_Ape__INode_t_t swig_types[48]
#define SWIGTYPE_p_std__weak_ptrT_Ape__Entity_t swig_types[49]
#define SWIGTYPE_p_std__weak_ptrT_Ape__Geometry_t swig_types[50]
#define SWIGTYPE_p_std__weak_ptrT_Ape__INode_t swig_types[51]
#define SWIGTYPE_p_std__weak_ptrT_Ape__Material_t swig_types[52]
static swig_type_info *swig_types[54];
static swig_module_info swig_module = { swig_types, 53, 0, 0, 0, 0 };
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#define SWIGVERSION 0x030010 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) (void *)((const void *)(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),(void**)(a)) 


#include <stdexcept>
#include <string>
#include <float.h>
#include <math.h>


// Apertus Common Includes
#include "ApeColor.h"
#include "ApeDegree.h"
#include "ApeEntity.h"
#include "ApeEuler.h"
#include "ApeEvent.h"
#include "ApeIEventManager.h"
#include "ApeGeometry.h"
#include "ApeITextGeometry.h"
#include "ApeILight.h"
#include "ApeIManualGeometry.h"
#include "ApeINode.h"
#include "ApeIPluginManager.h"
#include "ApeIScene.h"
#include "ApeIFileGeometry.h"
#include "ApeMaterial.h"
#include "ApeQuaternion.h"
#include "ApeRadian.h"
#include "ApeSystem.h"
#include "ApeITexture.h"
#include "ApeVector2.h"
#include "ApeVector3.h"
#include "ApeVector4.h"

#include "ApeIJsEventManager.h"

using namespace Ape;

typedef std::shared_ptr<Ape::INode> NodeSharedPtr;
typedef std::weak_ptr<Ape::INode> NodeWeakPtr;

typedef std::vector<Ape::NodeSharedPtr> NodeSharedPtrVector;
typedef std::map<std::string, Ape::NodeSharedPtr> NodeSharedPtrNameMap;

typedef std::map<std::string, Ape::NodeWeakPtr> NodeWeakPtrNameMap;
typedef std::map<std::string, Ape::EntityWeakPtr> EntityWeakPtrNameMap;


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99, but a function in namespace std for C++11. */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined __cplusplus && __cplusplus >= 201103L
#  define SWIG_isfinite(X) (std::isfinite(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN
int SWIG_AsVal_double(v8::Handle<v8::Value> obj, double *val)
{
	if (!obj->IsNumber()) {
		return SWIG_TypeError;
	}
	if (val) *val = obj->NumberValue();

	return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_float(v8::Handle<v8::Value> obj, float *val)
{
	double v;
	int res = SWIG_AsVal_double(obj, &v);
	if (SWIG_IsOK(res)) {
		if (SWIG_Float_Overflow_Check(v)) {
			return SWIG_OverflowError;
		}
		else {
			if (val) *val = (float)(v);
		}
	}
	return res;
}


SWIGINTERN
v8::Handle<v8::Value> SWIG_From_double(double val)
{
	return SWIGV8_NUMBER_NEW(val);
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_float(float value)
{
	return SWIG_From_double(value);
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_int(int value)
{
	return SWIGV8_INT32_NEW(value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
	static int init = 0;
	static swig_type_info* info = 0;
	if (!init) {
		info = SWIG_TypeQuery("_p_char");
		init = 1;
	}
	return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(v8::Handle<v8::Value> valRef, char** cptr, size_t* psize, int *alloc)
{
	if (valRef->IsString()) {
		v8::Handle<v8::String> js_str = valRef->ToString();

		size_t len = js_str->Utf8Length() + 1;
		char* cstr = new char[len];
		js_str->WriteUtf8(cstr, len);

		if (alloc) *alloc = SWIG_NEWOBJ;
		if (psize) *psize = len;
		if (cptr) *cptr = cstr;

		return SWIG_OK;
	}
	else {
		if (valRef->IsObject()) {
			v8::Handle<v8::Object> obj = valRef->ToObject();
			// try if the object is a wrapped char[]
			swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
			if (pchar_descriptor) {
				void* vptr = 0;
				if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
					if (cptr) *cptr = (char *)vptr;
					if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
					if (alloc) *alloc = SWIG_OLDOBJ;
					return SWIG_OK;
				}
			}
			return SWIG_TypeError;
		}
		else {
			return SWIG_TypeError;
		}
	}
}


SWIGINTERN int
SWIG_AsPtr_std_string(v8::Handle<v8::Value> obj, std::string **val)
{
	char* buf = 0; size_t size = 0; int alloc = SWIG_OLDOBJ;
	if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
		if (buf) {
			if (val) *val = new std::string(buf, size - 1);
			if (alloc == SWIG_NEWOBJ) delete[] buf;
			return SWIG_NEWOBJ;
		}
		else {
			if (val) *val = 0;
			return SWIG_OLDOBJ;
		}
	}
	else {
		static int init = 0;
		static swig_type_info* descriptor = 0;
		if (!init) {
			descriptor = SWIG_TypeQuery("std::string" " *");
			init = 1;
		}
		if (descriptor) {
			std::string *vptr;
			int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
			if (SWIG_IsOK(res) && val) *val = vptr;
			return res;
		}
	}
	return SWIG_ERROR;
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
	if (carray) {
		if (size > INT_MAX) {
			// TODO: handle extra long strings
			return SWIGV8_UNDEFINED();
		}
		else {
			v8::Handle<v8::String> js_str = SWIGV8_STRING_NEW2(carray, size);
			return js_str;
		}
	}
	else {
		return SWIGV8_UNDEFINED();
	}
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_std_string(const std::string& s)
{
	return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERN
int SWIG_AsVal_int(v8::Handle<v8::Value> valRef, int* val)
{
	if (!valRef->IsNumber()) {
		return SWIG_TypeError;
	}
	if (val) *val = valRef->IntegerValue();

	return SWIG_OK;
}


SWIGINTERNINLINE
v8::Handle<v8::Value>
SWIG_From_bool(bool value)
{
	return SWIGV8_BOOLEAN_NEW(value);
}


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
	double x = *d;
	if ((min <= x && x <= max)) {
		double fx = floor(x);
		double cx = ceil(x);
		double rd = ((x - fx) < 0.5) ? fx : cx; /* simple rint */
		if ((errno == EDOM) || (errno == ERANGE)) {
			errno = 0;
		}
		else {
			double summ, reps, diff;
			if (rd < x) {
				diff = x - rd;
			}
			else if (rd > x) {
				diff = rd - x;
			}
			else {
				return 1;
			}
			summ = rd + x;
			reps = diff / summ;
			if (reps < 8 * DBL_EPSILON) {
				*d = rd;
				return 1;
			}
		}
	}
	return 0;
}


SWIGINTERN
int SWIG_AsVal_long(v8::Handle<v8::Value> obj, long* val)
{
	if (!obj->IsNumber()) {
		return SWIG_TypeError;
	}
	if (val) *val = (long)obj->IntegerValue();

	return SWIG_OK;
}


SWIGINTERN
int SWIG_AsVal_bool(v8::Handle<v8::Value> obj, bool *val)
{
	if (!obj->IsBoolean()) {
		return SWIG_ERROR;
	}

	if (val) *val = obj->BooleanValue();
	return SWIG_OK;
}


#define SWIGV8_INIT apertusvr_initialize


SWIGV8_ClientData _exports_IEventManager_clientData;
SWIGV8_ClientData _exports_IPluginManager_clientData;
SWIGV8_ClientData _exports_IScene_clientData;
SWIGV8_ClientData _exports_Color_clientData;
SWIGV8_ClientData _exports_Degree_clientData;
SWIGV8_ClientData _exports_Entity_clientData;
SWIGV8_ClientData _exports_Euler_clientData;
SWIGV8_ClientData _exports_Event_clientData;
SWIGV8_ClientData _exports_ITextGeometry_clientData;
SWIGV8_ClientData _exports_LightSpotRange_clientData;
SWIGV8_ClientData _exports_LightAttenuation_clientData;
SWIGV8_ClientData _exports_ILight_clientData;
SWIGV8_ClientData _exports_IManualGeometry_clientData;
SWIGV8_ClientData _exports_INode_clientData;
SWIGV8_ClientData _exports_NodeWeakPtr_clientData;
SWIGV8_ClientData _exports_IFileGeometry_clientData;
SWIGV8_ClientData _exports_Material_clientData;
SWIGV8_ClientData _exports_Quaternion_clientData;
SWIGV8_ClientData _exports_Radian_clientData;
SWIGV8_ClientData _exports_ITexture_clientData;
SWIGV8_ClientData _exports_Vector2_clientData;
SWIGV8_ClientData _exports_Vector3_clientData;
SWIGV8_ClientData _exports_Vector4_clientData;


static SwigV8ReturnValue _wrap_new_IEventManager(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	Ape::Singleton< IEventManager > *result;
	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_IEventManager.");
	result = (Ape::Singleton< IEventManager > *)new Ape::Singleton< IEventManager >();



	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__SingletonT_IEventManager_t, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_IEventManager(v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
static void _wrap_delete_IEventManager(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
static void _wrap_delete_IEventManager(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
static void _wrap_delete_IEventManager(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
	v8::Local<v8::Object> object = data.GetValue();
	SWIGV8_Proxy *proxy = data.GetParameter();
#endif

	if (proxy->swigCMemOwn && proxy->swigCObject) {
		Ape::Singleton< IEventManager > * arg1 = (Ape::Singleton< IEventManager > *)proxy->swigCObject;
		delete arg1;
	}
	delete proxy;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
	object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
	object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
	object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
	object->Dispose();
#else
	object.Clear();
#endif
}


static SwigV8ReturnValue _wrap_IEventManager_getSingleton(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::IEventManager *result = 0;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IEventManager_getSingleton.");

	result = (Ape::IEventManager *)&Ape::Singleton< Ape::IEventManager >::SWIGTEMPLATEDISAMBIGUATOR getSingleton();
	jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Ape__SingletonT_IEventManager_t, 0 | 0);

	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IEventManager_getSingletonPtr(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::IEventManager *result = 0;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IEventManager_getSingletonPtr.");

	result = (Ape::IEventManager *)Ape::Singleton< Ape::IEventManager >::SWIGTEMPLATEDISAMBIGUATOR getSingletonPtr();
	jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Ape__SingletonT_IEventManager_t, 0 | 0);

	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IEventManager_connectEvent(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	v8::Handle<v8::Object> obj;
	Ape::IEventManager *arg1 = (Ape::IEventManager *) 0;
	Ape::Event::Group arg_group;
	void *argp1 = 0;
	int res1 = 0;
	int val2;
	int ecode2 = 0;
	void *argp3;
	int res3 = 0;

	if (args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IEventManager_connectEvent.");

	// extract object
	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__SingletonT_IEventManager_t, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IEventManager_connectEvent" "', argument " "1"" of type '" "Ape::EventManagerImpl *""'");
	}
	arg1 = (Ape::IEventManager *)(argp1);

	// extract arg1
	ecode2 = SWIG_AsVal_int(args[0], &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IEventManager_connectEvent" "', argument " "2"" of type '" "Ape::Event::Group""'");
	}
	arg_group = (Ape::Event::Group)(val2);

	// create and put js callback into JsEventManager's map
	v8::Persistent<v8::Function> jsCb = v8::Persistent<v8::Function>::New(args[1].As<v8::Function>());
	Ape::IJsEventManager::getSingleton().connectEvent(arg_group, jsCb);
	std::cout << "_wrap_EventManagerImpl_connectEvent: JS mEventMap.size: " << Ape::IJsEventManager::getSingleton().size() << std::endl;

	jsresult = SWIGV8_UNDEFINED();
	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_IPluginManager(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	Ape::Singleton< IPluginManager > *result;
	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_IPluginManager.");
	result = (Ape::Singleton< IPluginManager > *)new Ape::Singleton< IPluginManager >();



	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__SingletonT_IPluginManager_t, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_IPluginManager(v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
static void _wrap_delete_IPluginManager(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
static void _wrap_delete_IPluginManager(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
static void _wrap_delete_IPluginManager(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
	v8::Local<v8::Object> object = data.GetValue();
	SWIGV8_Proxy *proxy = data.GetParameter();
#endif

	if (proxy->swigCMemOwn && proxy->swigCObject) {
		Ape::Singleton< IPluginManager > * arg1 = (Ape::Singleton< IPluginManager > *)proxy->swigCObject;
		delete arg1;
	}
	delete proxy;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
	object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
	object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
	object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
	object->Dispose();
#else
	object.Clear();
#endif
}


static SwigV8ReturnValue _wrap_IPluginManager_getSingleton(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	IPluginManager *result = 0;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IPluginManager_getSingleton.");

	result = (IPluginManager *)&Ape::Singleton< IPluginManager >::SWIGTEMPLATEDISAMBIGUATOR getSingleton();
	jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IPluginManager, 0 | 0);

	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IPluginManager_getSingletonPtr(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	IPluginManager *result = 0;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IPluginManager_getSingletonPtr.");

	result = (IPluginManager *)Ape::Singleton< IPluginManager >::SWIGTEMPLATEDISAMBIGUATOR getSingletonPtr();
	jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IPluginManager, 0 | 0);

	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_IScene(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	Ape::Singleton< IScene > *result;
	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_IScene.");
	result = (Ape::Singleton< IScene > *)new Ape::Singleton< IScene >();



	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__SingletonT_IScene_t, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_IScene(v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
static void _wrap_delete_IScene(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
static void _wrap_delete_IScene(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
static void _wrap_delete_IScene(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
	v8::Local<v8::Object> object = data.GetValue();
	SWIGV8_Proxy *proxy = data.GetParameter();
#endif

	if (proxy->swigCMemOwn && proxy->swigCObject) {
		Ape::Singleton< IScene > * arg1 = (Ape::Singleton< IScene > *)proxy->swigCObject;
		delete arg1;
	}
	delete proxy;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
	object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
	object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
	object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
	object->Dispose();
#else
	object.Clear();
#endif
}


static SwigV8ReturnValue _wrap_IScene_getSingleton(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	IScene *result = 0;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IScene_getSingleton.");

	result = (IScene *)&Ape::Singleton< IScene >::SWIGTEMPLATEDISAMBIGUATOR getSingleton();
	jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Ape__SingletonT_IScene_t, 0 | 0);

	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IScene_getSingletonPtr(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	IScene *result = 0;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IScene_getSingletonPtr.");

	result = (IScene *)Ape::Singleton< IScene >::SWIGTEMPLATEDISAMBIGUATOR getSingletonPtr();
	jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Ape__SingletonT_IScene_t, 0 | 0);

	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_Color_r_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::Color *arg1 = (Ape::Color *) 0;
	float arg2;
	void *argp1 = 0;
	int res1 = 0;
	float val2;
	int ecode2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Color, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_r_set" "', argument " "1"" of type '" "Ape::Color *""'");
	}
	arg1 = (Ape::Color *)(argp1);
	ecode2 = SWIG_AsVal_float(value, &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Color_r_set" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	if (arg1) (arg1)->r = arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_Color_r_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Color *arg1 = (Ape::Color *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Color, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_r_get" "', argument " "1"" of type '" "Ape::Color *""'");
	}
	arg1 = (Ape::Color *)(argp1);
	result = (float)((arg1)->r);
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_Color_g_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::Color *arg1 = (Ape::Color *) 0;
	float arg2;
	void *argp1 = 0;
	int res1 = 0;
	float val2;
	int ecode2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Color, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_g_set" "', argument " "1"" of type '" "Ape::Color *""'");
	}
	arg1 = (Ape::Color *)(argp1);
	ecode2 = SWIG_AsVal_float(value, &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Color_g_set" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	if (arg1) (arg1)->g = arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_Color_g_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Color *arg1 = (Ape::Color *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Color, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_g_get" "', argument " "1"" of type '" "Ape::Color *""'");
	}
	arg1 = (Ape::Color *)(argp1);
	result = (float)((arg1)->g);
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_Color_b_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::Color *arg1 = (Ape::Color *) 0;
	float arg2;
	void *argp1 = 0;
	int res1 = 0;
	float val2;
	int ecode2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Color, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_b_set" "', argument " "1"" of type '" "Ape::Color *""'");
	}
	arg1 = (Ape::Color *)(argp1);
	ecode2 = SWIG_AsVal_float(value, &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Color_b_set" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	if (arg1) (arg1)->b = arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_Color_b_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Color *arg1 = (Ape::Color *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Color, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_b_get" "', argument " "1"" of type '" "Ape::Color *""'");
	}
	arg1 = (Ape::Color *)(argp1);
	result = (float)((arg1)->b);
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_Color_a_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::Color *arg1 = (Ape::Color *) 0;
	float arg2;
	void *argp1 = 0;
	int res1 = 0;
	float val2;
	int ecode2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Color, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_a_set" "', argument " "1"" of type '" "Ape::Color *""'");
	}
	arg1 = (Ape::Color *)(argp1);
	ecode2 = SWIG_AsVal_float(value, &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Color_a_set" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	if (arg1) (arg1)->a = arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_Color_a_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Color *arg1 = (Ape::Color *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Color, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_a_get" "', argument " "1"" of type '" "Ape::Color *""'");
	}
	arg1 = (Ape::Color *)(argp1);
	result = (float)((arg1)->a);
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_Color__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	Ape::Color *result;
	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Color__SWIG_0.");
	result = (Ape::Color *)new Ape::Color();



	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__Color, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Color__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	float arg1;
	float arg2;
	float arg3;
	float arg4;
	float val1;
	int ecode1 = 0;
	float val2;
	int ecode2 = 0;
	float val3;
	int ecode3 = 0;
	float val4;
	int ecode4 = 0;
	Ape::Color *result;
	if (args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Color__SWIG_1.");
	ecode1 = SWIG_AsVal_float(args[0], &val1);
	if (!SWIG_IsOK(ecode1)) {
		SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Color" "', argument " "1"" of type '" "float""'");
	}
	arg1 = (float)(val1);
	ecode2 = SWIG_AsVal_float(args[1], &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Color" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	ecode3 = SWIG_AsVal_float(args[2], &val3);
	if (!SWIG_IsOK(ecode3)) {
		SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Color" "', argument " "3"" of type '" "float""'");
	}
	arg3 = (float)(val3);
	ecode4 = SWIG_AsVal_float(args[3], &val4);
	if (!SWIG_IsOK(ecode4)) {
		SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Color" "', argument " "4"" of type '" "float""'");
	}
	arg4 = (float)(val4);
	result = (Ape::Color *)new Ape::Color(arg1, arg2, arg3, arg4);







	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__Color, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Color__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	float arg1;
	float arg2;
	float arg3;
	float val1;
	int ecode1 = 0;
	float val2;
	int ecode2 = 0;
	float val3;
	int ecode3 = 0;
	Ape::Color *result;
	if (args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Color__SWIG_2.");
	ecode1 = SWIG_AsVal_float(args[0], &val1);
	if (!SWIG_IsOK(ecode1)) {
		SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Color" "', argument " "1"" of type '" "float""'");
	}
	arg1 = (float)(val1);
	ecode2 = SWIG_AsVal_float(args[1], &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Color" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	ecode3 = SWIG_AsVal_float(args[2], &val3);
	if (!SWIG_IsOK(ecode3)) {
		SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Color" "', argument " "3"" of type '" "float""'");
	}
	arg3 = (float)(val3);
	result = (Ape::Color *)new Ape::Color(arg1, arg2, arg3);






	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__Color, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Color(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	OverloadErrorHandler errorHandler;
	v8::Handle<v8::Value> self;

	// switch all cases by means of series of if-returns.

	if (args.Length() == 0) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_Color__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_Color__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}

	if (args.Length() == 4) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_Color__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_Color__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}

	if (args.Length() == 3) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_Color__SWIG_2(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_Color__SWIG_2(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}


	// default:
	SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Color");

fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Color(v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
static void _wrap_delete_Color(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
static void _wrap_delete_Color(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
static void _wrap_delete_Color(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
	v8::Local<v8::Object> object = data.GetValue();
	SWIGV8_Proxy *proxy = data.GetParameter();
#endif

	if (proxy->swigCMemOwn && proxy->swigCObject) {
		Ape::Color * arg1 = (Ape::Color *)proxy->swigCObject;
		delete arg1;
	}
	delete proxy;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
	object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
	object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
	object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
	object->Dispose();
#else
	object.Clear();
#endif
}


static SwigV8ReturnValue _wrap_ape_PI(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_double((double)(3.14159265358979323846));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_Degree_m_deg_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::Degree *arg1 = (Ape::Degree *) 0;
	float arg2;
	void *argp1 = 0;
	int res1 = 0;
	float val2;
	int ecode2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Degree, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Degree_m_deg_set" "', argument " "1"" of type '" "Ape::Degree *""'");
	}
	arg1 = (Ape::Degree *)(argp1);
	ecode2 = SWIG_AsVal_float(value, &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Degree_m_deg_set" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	if (arg1) (arg1)->degree = arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_Degree_m_deg_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Degree *arg1 = (Ape::Degree *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Degree, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Degree_m_deg_get" "', argument " "1"" of type '" "Ape::Degree *""'");
	}
	arg1 = (Ape::Degree *)(argp1);
	result = (float)((arg1)->degree);
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_Degree__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	Ape::Degree *result;
	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Degree__SWIG_0.");
	result = (Ape::Degree *)new Ape::Degree();



	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__Degree, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Degree__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	float arg1;
	float val1;
	int ecode1 = 0;
	Ape::Degree *result;
	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Degree__SWIG_1.");
	ecode1 = SWIG_AsVal_float(args[0], &val1);
	if (!SWIG_IsOK(ecode1)) {
		SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Degree" "', argument " "1"" of type '" "float""'");
	}
	arg1 = (float)(val1);
	result = (Ape::Degree *)new Ape::Degree(arg1);




	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__Degree, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Degree(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	OverloadErrorHandler errorHandler;
	v8::Handle<v8::Value> self;

	// switch all cases by means of series of if-returns.

	if (args.Length() == 0) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_Degree__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_Degree__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}

	if (args.Length() == 1) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_Degree__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_Degree__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}


	// default:
	SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Degree");

fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Degree_toRadian(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Degree *arg1 = (Ape::Degree *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Degree_toRadian.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Degree, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Degree_toRadian" "', argument " "1"" of type '" "Ape::Degree *""'");
	}
	arg1 = (Ape::Degree *)(argp1);
	result = (float)(arg1)->toRadian();
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


// <Entity>

static SwigV8ReturnValue _wrap_Entity_getName(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Entity *arg1 = (Ape::Entity *) 0;
	void *argp1 = 0;
	int res1 = 0;
	std::string result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Entity_getName.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Entity, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Entity_getName" "', argument " "1"" of type '" "Ape::Entity *""'");
	}
	arg1 = (Ape::Entity *)(argp1);
	result = (arg1)->getName();
	jsresult = SWIG_From_std_string((std::string)(result));


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Entity_getType(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Entity *arg1 = (Ape::Entity *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::Entity::Type result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Entity_getType.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Entity, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Entity_getType" "', argument " "1"" of type '" "Ape::Entity *""'");
	}
	arg1 = (Ape::Entity *)(argp1);
	result = (Ape::Entity::Type)(arg1)->getType();
	jsresult = SWIG_From_int((int)(result));


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Entity_getParentNodeName(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Entity *arg1 = (Ape::Entity *) 0;
	void *argp1 = 0;
	int res1 = 0;
	std::string result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Entity_getParentNodeName.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Entity, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Entity_getParentNodeName" "', argument " "1"" of type '" "Ape::Entity *""'");
	}
	arg1 = (Ape::Entity *)(argp1);
	result = (arg1)->getParentNodeName();
	jsresult = SWIG_From_std_string((std::string)(result));


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_Entity(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	SWIG_exception(SWIG_ERROR, "Class Entity can not be instantiated");
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


// </Entity>


// <NodeWeakPtr>

static SwigV8ReturnValue _wrap_NodeWeakPtr_getName(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::NodeWeakPtr *arg1 = (Ape::NodeWeakPtr *) 0;
	void *argp1 = 0;
	int res1 = 0;
	std::string result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeWeakPtr_getName.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_std__weak_ptrT_Ape__INode_t, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeWeakPtr_getName" "', argument " "1"" of type '" "Ape::NodeWeakPtr const *""'");
	}
	arg1 = (Ape::NodeWeakPtr *)(argp1);
	result = ((Ape::NodeWeakPtr const *)arg1)->lock()->getName();
	jsresult = SWIG_From_std_string((std::string)(result));


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeWeakPtr_getParentName(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::NodeWeakPtr *arg1 = (Ape::NodeWeakPtr *) 0;
	void *argp1 = 0;
	int res1 = 0;
	std::string result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeWeakPtr_getParentName.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_std__weak_ptrT_Ape__INode_t, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeWeakPtr_getParentName" "', argument " "1"" of type '" "Ape::NodeWeakPtr const *""'");
	}
	arg1 = (Ape::NodeWeakPtr *)(argp1);
	result = ((Ape::NodeWeakPtr const *)arg1)->lock()->getParentName();
	jsresult = SWIG_From_std_string((std::string)(result));


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeWeakPtr_getPosition(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::NodeWeakPtr *arg1 = (Ape::NodeWeakPtr *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::Vector3 result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeWeakPtr_getPosition.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_std__weak_ptrT_Ape__INode_t, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeWeakPtr_getPosition" "', argument " "1"" of type '" "Ape::NodeWeakPtr const *""'");
	}
	arg1 = (Ape::NodeWeakPtr *)(argp1);
	result = ((Ape::NodeWeakPtr const *)arg1)->lock()->getPosition();
	jsresult = SWIG_NewPointerObj((new Ape::Vector3((const Ape::Vector3&)(result))), SWIGTYPE_p_Ape__Vector3, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeWeakPtr_getDerivedPosition(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::NodeWeakPtr *arg1 = (Ape::NodeWeakPtr *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::Vector3 result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeWeakPtr_getDerivedPosition.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_std__weak_ptrT_Ape__INode_t, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeWeakPtr_getDerivedPosition" "', argument " "1"" of type '" "Ape::NodeWeakPtr const *""'");
	}
	arg1 = (Ape::NodeWeakPtr *)(argp1);
	result = ((Ape::NodeWeakPtr const *)arg1)->lock()->getDerivedPosition();
	jsresult = SWIG_NewPointerObj((new Ape::Vector3((const Ape::Vector3&)(result))), SWIGTYPE_p_Ape__Vector3, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeWeakPtr_getOrientation(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::NodeWeakPtr *arg1 = (Ape::NodeWeakPtr *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::Quaternion result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeWeakPtr_getOrientation.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_std__weak_ptrT_Ape__INode_t, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeWeakPtr_getOrientation" "', argument " "1"" of type '" "Ape::NodeWeakPtr const *""'");
	}
	arg1 = (Ape::NodeWeakPtr *)(argp1);
	result = ((Ape::NodeWeakPtr const *)arg1)->lock()->getOrientation();
	jsresult = SWIG_NewPointerObj((new Ape::Quaternion((const Ape::Quaternion&)(result))), SWIGTYPE_p_Ape__Quaternion, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeWeakPtr_getDerivedOrientation(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::NodeWeakPtr *arg1 = (Ape::NodeWeakPtr *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::Quaternion result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeWeakPtr_getDerivedOrientation.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_std__weak_ptrT_Ape__INode_t, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeWeakPtr_getDerivedOrientation" "', argument " "1"" of type '" "Ape::NodeWeakPtr const *""'");
	}
	arg1 = (Ape::NodeWeakPtr *)(argp1);
	result = ((Ape::NodeWeakPtr const *)arg1)->lock()->getDerivedOrientation();
	jsresult = SWIG_NewPointerObj((new Ape::Quaternion((const Ape::Quaternion&)(result))), SWIGTYPE_p_Ape__Quaternion, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeWeakPtr_getScale(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::NodeWeakPtr *arg1 = (Ape::NodeWeakPtr *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::Vector3 result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeWeakPtr_getScale.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_std__weak_ptrT_Ape__INode_t, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeWeakPtr_getScale" "', argument " "1"" of type '" "Ape::NodeWeakPtr const *""'");
	}
	arg1 = (Ape::NodeWeakPtr *)(argp1);
	result = ((Ape::NodeWeakPtr const *)arg1)->lock()->getScale();
	jsresult = SWIG_NewPointerObj((new Ape::Vector3((const Ape::Vector3&)(result))), SWIGTYPE_p_Ape__Vector3, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeWeakPtr_getDerivedScale(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::NodeWeakPtr *arg1 = (Ape::NodeWeakPtr *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::Vector3 result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeWeakPtr_getDerivedScale.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_std__weak_ptrT_Ape__INode_t, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeWeakPtr_getDerivedScale" "', argument " "1"" of type '" "Ape::NodeWeakPtr const *""'");
	}
	arg1 = (Ape::NodeWeakPtr *)(argp1);
	result = ((Ape::NodeWeakPtr const *)arg1)->lock()->getDerivedScale();
	jsresult = SWIG_NewPointerObj((new Ape::Vector3((const Ape::Vector3&)(result))), SWIGTYPE_p_Ape__Vector3, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeWeakPtr_setParent(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::NodeWeakPtr *arg1 = (Ape::NodeWeakPtr *) 0;
	std::string arg2;
	void *argp1 = 0;
	int res1 = 0;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeWeakPtr_setParent.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_std__weak_ptrT_Ape__INode_t, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeWeakPtr_setParent" "', argument " "1"" of type '" "Ape::NodeWeakPtr *""'");
	}
	arg1 = (Ape::NodeWeakPtr *)(argp1);
	{
		std::string *ptr = (std::string *)0;
		int res = SWIG_AsPtr_std_string(args[0], &ptr);
		if (!SWIG_IsOK(res) || !ptr) {
			SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NodeWeakPtr_setParent" "', argument " "2"" of type '" "std::string""'");
		}
		arg2 = *ptr;
		if (SWIG_IsNewObj(res)) delete ptr;
	}
	(arg1)->lock()->setParent(arg2);
	jsresult = SWIGV8_UNDEFINED();



	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeWeakPtr_setPosition(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::NodeWeakPtr *arg1 = (Ape::NodeWeakPtr *) 0;
	Vector3 arg2;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeWeakPtr_setPosition.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_std__weak_ptrT_Ape__INode_t, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeWeakPtr_setPosition" "', argument " "1"" of type '" "Ape::NodeWeakPtr *""'");
	}
	arg1 = (Ape::NodeWeakPtr *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Ape__Vector3, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeWeakPtr_setPosition" "', argument " "2"" of type '" "Vector3""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeWeakPtr_setPosition" "', argument " "2"" of type '" "Vector3""'");
		}
		else {
			arg2 = *((Vector3 *)(argp2));
		}
	}
	(arg1)->lock()->setPosition(arg2);
	jsresult = SWIGV8_UNDEFINED();


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeWeakPtr_setOrientation(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::NodeWeakPtr *arg1 = (Ape::NodeWeakPtr *) 0;
	Quaternion arg2;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeWeakPtr_setOrientation.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_std__weak_ptrT_Ape__INode_t, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeWeakPtr_setOrientation" "', argument " "1"" of type '" "Ape::NodeWeakPtr *""'");
	}
	arg1 = (Ape::NodeWeakPtr *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Quaternion, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeWeakPtr_setOrientation" "', argument " "2"" of type '" "Quaternion""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeWeakPtr_setOrientation" "', argument " "2"" of type '" "Quaternion""'");
		}
		else {
			arg2 = *((Quaternion *)(argp2));
		}
	}
	(arg1)->lock()->setOrientation(arg2);
	jsresult = SWIGV8_UNDEFINED();


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeWeakPtr_setScale(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::NodeWeakPtr *arg1 = (Ape::NodeWeakPtr *) 0;
	Vector3 arg2;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeWeakPtr_setScale.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_std__weak_ptrT_Ape__INode_t, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeWeakPtr_setScale" "', argument " "1"" of type '" "Ape::NodeWeakPtr *""'");
	}
	arg1 = (Ape::NodeWeakPtr *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Vector3, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeWeakPtr_setScale" "', argument " "2"" of type '" "Vector3""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeWeakPtr_setScale" "', argument " "2"" of type '" "Vector3""'");
		}
		else {
			arg2 = *((Vector3 *)(argp2));
		}
	}
	(arg1)->lock()->setScale(arg2);
	jsresult = SWIGV8_UNDEFINED();


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeWeakPtr_translate(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::NodeWeakPtr *arg1 = (Ape::NodeWeakPtr *) 0;
	Vector3 arg2;
	Ape::Node::TransformationSpace arg3;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;
	int val3;
	int ecode3 = 0;

	if (args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeWeakPtr_translate.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_std__weak_ptrT_Ape__INode_t, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeWeakPtr_translate" "', argument " "1"" of type '" "Ape::NodeWeakPtr *""'");
	}
	arg1 = (Ape::NodeWeakPtr *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Vector3, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeWeakPtr_translate" "', argument " "2"" of type '" "Vector3""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeWeakPtr_translate" "', argument " "2"" of type '" "Vector3""'");
		}
		else {
			arg2 = *((Vector3 *)(argp2));
		}
	}
	ecode3 = SWIG_AsVal_int(args[1], &val3);
	if (!SWIG_IsOK(ecode3)) {
		SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodeWeakPtr_translate" "', argument " "3"" of type '" "Ape::Node::TransformationSpace""'");
	}
	arg3 = (Ape::Node::TransformationSpace)(val3);
	(arg1)->lock()->translate(arg2, arg3);
	jsresult = SWIGV8_UNDEFINED();



	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeWeakPtr_rotate(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::NodeWeakPtr *arg1 = (Ape::NodeWeakPtr *) 0;
	Radian arg2;
	Vector3 arg3;
	Ape::Node::TransformationSpace arg4;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;
	void *argp3;
	int res3 = 0;
	int val4;
	int ecode4 = 0;

	if (args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeWeakPtr_rotate.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__INode, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeWeakPtr_rotate" "', argument " "1"" of type '" "Ape::NodeWeakPtr *""'");
	}
	arg1 = (Ape::NodeWeakPtr *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Radian, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeWeakPtr_rotate" "', argument " "2"" of type '" "Radian""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeWeakPtr_rotate" "', argument " "2"" of type '" "Radian""'");
		}
		else {
			arg2 = *((Radian *)(argp2));
		}
	}
	{
		res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_Vector3, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeWeakPtr_rotate" "', argument " "3"" of type '" "Vector3""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeWeakPtr_rotate" "', argument " "3"" of type '" "Vector3""'");
		}
		else {
			arg3 = *((Vector3 *)(argp3));
		}
	}
	ecode4 = SWIG_AsVal_int(args[2], &val4);
	if (!SWIG_IsOK(ecode4)) {
		SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NodeWeakPtr_rotate" "', argument " "4"" of type '" "Ape::Node::TransformationSpace""'");
	}
	arg4 = (Ape::Node::TransformationSpace)(val4);
	(arg1)->lock()->rotate(arg2, arg3, arg4);
	jsresult = SWIGV8_UNDEFINED();



	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_NodeWeakPtr(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	SWIG_exception(SWIG_ERROR, "Class NodeWeakPtr can not be instantiated");
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

// </NodeWeakPtr>


// <IScene>

static SwigV8ReturnValue _wrap_IScene_getNodes(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::IScene *arg1 = (Ape::IScene *) 0;
	void *argp1 = 0;
	int res1 = 0;
	SwigValueWrapper< Ape::NodeWeakPtrNameMap > result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IScene_getNodeSharedPtrVector.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__SingletonT_IScene_t, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IScene_getNodeSharedPtrVector" "', argument " "1"" of type '" "Ape::IScene *""'");
	}
	arg1 = (Ape::IScene *)(argp1);
	result = (arg1)->getNodes();
	jsresult = SWIG_NewPointerObj((new Ape::NodeWeakPtrNameMap((const Ape::NodeWeakPtrNameMap&)(result))), SWIGTYPE_p_std__mapT_std__string_std__weak_ptrT_Ape__INode_t_t, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IScene_getNode(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::IScene *arg1 = (Ape::IScene *) 0;
	std::string arg2;
	void *argp1 = 0;
	int res1 = 0;
	SwigValueWrapper< std::weak_ptr< Ape::INode > > result;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IScene_getNode.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__SingletonT_IScene_t, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IScene_getNode" "', argument " "1"" of type '" "Ape::IScene *""'");
	}
	arg1 = (Ape::IScene *)(argp1);
	{
		std::string *ptr = (std::string *)0;
		int res = SWIG_AsPtr_std_string(args[0], &ptr);
		if (!SWIG_IsOK(res) || !ptr) {
			SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "IScene_getNode" "', argument " "2"" of type '" "std::string""'");
		}
		arg2 = *ptr;
		if (SWIG_IsNewObj(res)) delete ptr;
	}
	result = (arg1)->getNode(arg2);
	jsresult = SWIG_NewPointerObj((new Ape::NodeWeakPtr((const Ape::NodeWeakPtr&)(result))), SWIGTYPE_p_std__weak_ptrT_Ape__INode_t, SWIG_POINTER_OWN | 0);



	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IScene_createNode(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::IScene *arg1 = (Ape::IScene *) 0;
	std::string arg2;
	void *argp1 = 0;
	int res1 = 0;
	SwigValueWrapper< std::weak_ptr< Ape::INode > > result;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IScene_createNode.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__SingletonT_IScene_t, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IScene_createNode" "', argument " "1"" of type '" "Ape::IScene *""'");
	}
	arg1 = (Ape::IScene *)(argp1);
	{
		std::string *ptr = (std::string *)0;
		int res = SWIG_AsPtr_std_string(args[0], &ptr);
		if (!SWIG_IsOK(res) || !ptr) {
			SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "IScene_createNode" "', argument " "2"" of type '" "std::string""'");
		}
		arg2 = *ptr;
		if (SWIG_IsNewObj(res)) delete ptr;
	}

	(arg1)->createNode(arg2);
	result = arg1->getNode(arg2);
	jsresult = SWIG_NewPointerObj((new Ape::NodeWeakPtr((const Ape::NodeWeakPtr&)(result))), SWIGTYPE_p_std__weak_ptrT_Ape__INode_t, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IScene_getEntities(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::IScene *arg1 = (Ape::IScene *) 0;
	void *argp1 = 0;
	int res1 = 0;
	SwigValueWrapper< Ape::EntityWeakPtrNameMap > result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IScene_getEntitySharedPtrVector.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__SingletonT_IScene_t, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IScene_getEntitySharedPtrVector" "', argument " "1"" of type '" "Ape::IScene *""'");
	}
	arg1 = (Ape::IScene *)(argp1);
	result = (arg1)->getEntities();
	jsresult = SWIG_NewPointerObj((new Ape::EntityWeakPtrNameMap((const Ape::EntityWeakPtrNameMap&)(result))), SWIGTYPE_p_std__mapT_std__string_std__weak_ptrT_Ape__Entity_t_t, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IScene_getEntity(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::IScene *arg1 = (Ape::IScene *) 0;
	std::string arg2;
	void *argp1 = 0;
	int res1 = 0;
	SwigValueWrapper< std::weak_ptr< Ape::Entity > > result;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IScene_getEntity.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__SingletonT_IScene_t, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IScene_getEntity" "', argument " "1"" of type '" "Ape::IScene *""'");
	}
	arg1 = (Ape::IScene *)(argp1);
	{
		std::string *ptr = (std::string *)0;
		int res = SWIG_AsPtr_std_string(args[0], &ptr);
		if (!SWIG_IsOK(res) || !ptr) {
			SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "IScene_getEntity" "', argument " "2"" of type '" "std::string""'");
		}
		arg2 = *ptr;
		if (SWIG_IsNewObj(res)) delete ptr;
	}
	result = (arg1)->getEntity(arg2);
	jsresult = SWIG_NewPointerObj((new Ape::EntityWeakPtr((const Ape::EntityWeakPtr&)(result))), SWIGTYPE_p_std__weak_ptrT_Ape__Entity_t, SWIG_POINTER_OWN | 0);



	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IScene_createEntity(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::IScene *arg1 = (Ape::IScene *) 0;
	std::string arg2;
	std::string arg3;
	Ape::Entity::Type arg4;
	void *argp1 = 0;
	int res1 = 0;
	int val4;
	int ecode4 = 0;
	SwigValueWrapper< std::weak_ptr< Ape::Entity > > result;

	if (args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IScene_createEntity.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__SingletonT_IScene_t, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IScene_createEntity" "', argument " "1"" of type '" "Ape::IScene *""'");
	}
	arg1 = (Ape::IScene *)(argp1);
	{
		std::string *ptr = (std::string *)0;
		int res = SWIG_AsPtr_std_string(args[0], &ptr);
		if (!SWIG_IsOK(res) || !ptr) {
			SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "IScene_createEntity" "', argument " "2"" of type '" "std::string""'");
		}
		arg2 = *ptr;
		if (SWIG_IsNewObj(res)) delete ptr;
	}
	{
		std::string *ptr = (std::string *)0;
		int res = SWIG_AsPtr_std_string(args[1], &ptr);
		if (!SWIG_IsOK(res) || !ptr) {
			SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "IScene_createEntity" "', argument " "3"" of type '" "std::string""'");
		}
		arg3 = *ptr;
		if (SWIG_IsNewObj(res)) delete ptr;
	}
	ecode4 = SWIG_AsVal_int(args[2], &val4);
	if (!SWIG_IsOK(ecode4)) {
		SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IScene_createEntity" "', argument " "4"" of type '" "Ape::Entity::Type""'");
	}
	arg4 = (Ape::Entity::Type)(val4);
	result = (arg1)->createEntity(arg2, arg3, arg4);
	jsresult = SWIG_NewPointerObj((new Ape::EntityWeakPtr((const Ape::EntityWeakPtr&)(result))), SWIGTYPE_p_std__weak_ptrT_Ape__Entity_t, SWIG_POINTER_OWN | 0);



	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IScene_deleteNode(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::IScene *arg1 = (Ape::IScene *) 0;
	std::string arg2;
	void *argp1 = 0;
	int res1 = 0;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IScene_deleteNode.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__SingletonT_IScene_t, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IScene_deleteNode" "', argument " "1"" of type '" "Ape::IScene *""'");
	}
	arg1 = (Ape::IScene *)(argp1);
	{
		std::string *ptr = (std::string *)0;
		int res = SWIG_AsPtr_std_string(args[0], &ptr);
		if (!SWIG_IsOK(res) || !ptr) {
			SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "IScene_deleteNode" "', argument " "2"" of type '" "std::string""'");
		}
		arg2 = *ptr;
		if (SWIG_IsNewObj(res)) delete ptr;
	}
	(arg1)->deleteNode(arg2);
	jsresult = SWIGV8_UNDEFINED();



	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IScene_deleteEntity(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::IScene *arg1 = (Ape::IScene *) 0;
	std::string arg2;
	void *argp1 = 0;
	int res1 = 0;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IScene_deleteEntity.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__SingletonT_IScene_t, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IScene_deleteEntity" "', argument " "1"" of type '" "Ape::IScene *""'");
	}
	arg1 = (Ape::IScene *)(argp1);
	{
		std::string *ptr = (std::string *)0;
		int res = SWIG_AsPtr_std_string(args[0], &ptr);
		if (!SWIG_IsOK(res) || !ptr) {
			SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "IScene_deleteEntity" "', argument " "2"" of type '" "std::string""'");
		}
		arg2 = *ptr;
		if (SWIG_IsNewObj(res)) delete ptr;
	}
	(arg1)->deleteEntity(arg2);
	jsresult = SWIGV8_UNDEFINED();



	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

// </Iscene>


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Degree(v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
static void _wrap_delete_Degree(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
static void _wrap_delete_Degree(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
static void _wrap_delete_Degree(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
	v8::Local<v8::Object> object = data.GetValue();
	SWIGV8_Proxy *proxy = data.GetParameter();
#endif

	if (proxy->swigCMemOwn && proxy->swigCObject) {
		Ape::Degree * arg1 = (Ape::Degree *)proxy->swigCObject;
		delete arg1;
	}
	delete proxy;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
	object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
	object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
	object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
	object->Dispose();
#else
	object.Clear();
#endif
}


static SwigV8ReturnValue _wrap_Ape_ENTITY_LIGHT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::Group::LIGHT));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_Euler__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	Ape::Radian arg1;
	Ape::Radian arg2;
	Ape::Radian arg3;
	void *argp1;
	int res1 = 0;
	void *argp2;
	int res2 = 0;
	void *argp3;
	int res3 = 0;
	Ape::Euler *result;
	if (args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Euler__SWIG_0.");
	{
		res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Ape__Radian, 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Euler" "', argument " "1"" of type '" "Ape::Radian""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Euler" "', argument " "1"" of type '" "Ape::Radian""'");
		}
		else {
			arg1 = *((Ape::Radian *)(argp1));
		}
	}
	{
		res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_Ape__Radian, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Euler" "', argument " "2"" of type '" "Ape::Radian""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Euler" "', argument " "2"" of type '" "Ape::Radian""'");
		}
		else {
			arg2 = *((Ape::Radian *)(argp2));
		}
	}
	{
		res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_Ape__Radian, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Euler" "', argument " "3"" of type '" "Ape::Radian""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Euler" "', argument " "3"" of type '" "Ape::Radian""'");
		}
		else {
			arg3 = *((Ape::Radian *)(argp3));
		}
	}
	result = (Ape::Euler *)new Ape::Euler(arg1, arg2, arg3);



	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__Euler, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Euler__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	Ape::Radian arg1;
	Ape::Radian arg2;
	void *argp1;
	int res1 = 0;
	void *argp2;
	int res2 = 0;
	Ape::Euler *result;
	if (args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Euler__SWIG_1.");
	{
		res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Ape__Radian, 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Euler" "', argument " "1"" of type '" "Ape::Radian""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Euler" "', argument " "1"" of type '" "Ape::Radian""'");
		}
		else {
			arg1 = *((Ape::Radian *)(argp1));
		}
	}
	{
		res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_Ape__Radian, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Euler" "', argument " "2"" of type '" "Ape::Radian""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Euler" "', argument " "2"" of type '" "Ape::Radian""'");
		}
		else {
			arg2 = *((Ape::Radian *)(argp2));
		}
	}
	result = (Ape::Euler *)new Ape::Euler(arg1, arg2);



	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__Euler, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Euler__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	Ape::Radian arg1;
	void *argp1;
	int res1 = 0;
	Ape::Euler *result;
	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Euler__SWIG_2.");
	{
		res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Ape__Radian, 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Euler" "', argument " "1"" of type '" "Ape::Radian""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Euler" "', argument " "1"" of type '" "Ape::Radian""'");
		}
		else {
			arg1 = *((Ape::Radian *)(argp1));
		}
	}
	result = (Ape::Euler *)new Ape::Euler(arg1);



	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__Euler, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Euler__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	Ape::Euler *result;
	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Euler__SWIG_3.");
	result = (Ape::Euler *)new Ape::Euler();



	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__Euler, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Euler(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	OverloadErrorHandler errorHandler;
	v8::Handle<v8::Value> self;

	// switch all cases by means of series of if-returns.

	if (args.Length() == 3) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_Euler__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_Euler__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}

	if (args.Length() == 2) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_Euler__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_Euler__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}

	if (args.Length() == 1) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_Euler__SWIG_2(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_Euler__SWIG_2(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}

	if (args.Length() == 0) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_Euler__SWIG_3(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_Euler__SWIG_3(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}


	// default:
	SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Euler");

fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Euler_getYaw(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Euler *arg1 = (Ape::Euler *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::Radian result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Euler_getYaw.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Euler, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Euler_getYaw" "', argument " "1"" of type '" "Ape::Euler *""'");
	}
	arg1 = (Ape::Euler *)(argp1);
	result = (arg1)->getYaw();
	jsresult = SWIG_NewPointerObj((new Ape::Radian((const Ape::Radian&)(result))), SWIGTYPE_p_Ape__Radian, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Euler_getPitch(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Euler *arg1 = (Ape::Euler *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::Radian result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Euler_getPitch.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Euler, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Euler_getPitch" "', argument " "1"" of type '" "Ape::Euler *""'");
	}
	arg1 = (Ape::Euler *)(argp1);
	result = (arg1)->getPitch();
	jsresult = SWIG_NewPointerObj((new Ape::Radian((const Ape::Radian&)(result))), SWIGTYPE_p_Ape__Radian, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Euler_getRoll(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Euler *arg1 = (Ape::Euler *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::Radian result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Euler_getRoll.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Euler, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Euler_getRoll" "', argument " "1"" of type '" "Ape::Euler *""'");
	}
	arg1 = (Ape::Euler *)(argp1);
	result = (arg1)->getRoll();
	jsresult = SWIG_NewPointerObj((new Ape::Radian((const Ape::Radian&)(result))), SWIGTYPE_p_Ape__Radian, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Euler_setYaw(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Euler *arg1 = (Ape::Euler *) 0;
	Ape::Radian arg2;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;
	Ape::Euler *result = 0;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Euler_setYaw.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Euler, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Euler_setYaw" "', argument " "1"" of type '" "Ape::Euler *""'");
	}
	arg1 = (Ape::Euler *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Ape__Radian, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Euler_setYaw" "', argument " "2"" of type '" "Ape::Radian""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Euler_setYaw" "', argument " "2"" of type '" "Ape::Radian""'");
		}
		else {
			arg2 = *((Ape::Radian *)(argp2));
		}
	}
	result = (Ape::Euler *) &(arg1)->setYaw(arg2);
	jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Ape__Euler, 0 | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Euler_setPitch(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Euler *arg1 = (Ape::Euler *) 0;
	Ape::Radian arg2;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;
	Ape::Euler *result = 0;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Euler_setPitch.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Euler, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Euler_setPitch" "', argument " "1"" of type '" "Ape::Euler *""'");
	}
	arg1 = (Ape::Euler *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Ape__Radian, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Euler_setPitch" "', argument " "2"" of type '" "Ape::Radian""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Euler_setPitch" "', argument " "2"" of type '" "Ape::Radian""'");
		}
		else {
			arg2 = *((Ape::Radian *)(argp2));
		}
	}
	result = (Ape::Euler *) &(arg1)->setPitch(arg2);
	jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Ape__Euler, 0 | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Euler_setRoll(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Euler *arg1 = (Ape::Euler *) 0;
	Ape::Radian arg2;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;
	Ape::Euler *result = 0;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Euler_setRoll.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Euler, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Euler_setRoll" "', argument " "1"" of type '" "Ape::Euler *""'");
	}
	arg1 = (Ape::Euler *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Ape__Radian, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Euler_setRoll" "', argument " "2"" of type '" "Ape::Radian""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Euler_setRoll" "', argument " "2"" of type '" "Ape::Radian""'");
		}
		else {
			arg2 = *((Ape::Radian *)(argp2));
		}
	}
	result = (Ape::Euler *) &(arg1)->setRoll(arg2);
	jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Ape__Euler, 0 | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Euler_toQuaternion(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Euler *arg1 = (Ape::Euler *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::Quaternion result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Euler_toQuaternion.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Euler, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Euler_toQuaternion" "', argument " "1"" of type '" "Ape::Euler *""'");
	}
	arg1 = (Ape::Euler *)(argp1);
	result = (arg1)->toQuaternion();
	jsresult = SWIG_NewPointerObj((new Ape::Quaternion((const Ape::Quaternion&)(result))), SWIGTYPE_p_Ape__Quaternion, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Euler(v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
static void _wrap_delete_Euler(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
static void _wrap_delete_Euler(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
static void _wrap_delete_Euler(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
	v8::Local<v8::Object> object = data.GetValue();
	SWIGV8_Proxy *proxy = data.GetParameter();
#endif

	if (proxy->swigCMemOwn && proxy->swigCObject) {
		Ape::Euler * arg1 = (Ape::Euler *)proxy->swigCObject;
		delete arg1;
	}
	delete proxy;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
	object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
	object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
	object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
	object->Dispose();
#else
	object.Clear();
#endif
}


static SwigV8ReturnValue _wrap_Ape_Event_SCENEPROPERTY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::SCENEPROPERTY));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_NODE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::NODE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_LIGHT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::LIGHT));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_GEOMETRY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::GEOMETRY));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_MATERIAL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::MATERIAL));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_TEXTURE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::TEXTURE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_LABEL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::LABEL));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_CAMERA(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::CAMERA));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_EG_INVALID(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::EG_INVALID));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_SCENEPROPERTY_AMBIENTCOLOR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::SCENEPROPERTY_AMBIENTCOLOR));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_SCENEPROPERTY_ADDRESOURCEFOLDER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::SCENEPROPERTY_ADDRESOURCEFOLDER));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_SCENEPROPERTY_SKYBOXMATERIAL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::SCENEPROPERTY_SKYBOXMATERIAL));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_NODE_CREATE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::NODE_CREATE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_NODE_DELETE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::NODE_DELETE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_NODE_POSITION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::NODE_POSITION));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_NODE_ORIENTATION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::NODE_ORIENTATION));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_NODE_SCALE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::NODE_SCALE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_NODE_PARENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::NODE_PARENT));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_LIGHT_CREATE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::LIGHT_CREATE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_LIGHT_DELETE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::LIGHT_DELETE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_LIGHT_TYPE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::LIGHT_TYPE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_LIGHT_DIFFUSE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::LIGHT_DIFFUSE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_LIGHT_SPECULAR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::LIGHT_SPECULAR));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_LIGHT_ATTENUATION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::LIGHT_ATTENUATION));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_LIGHT_DIRECTION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::LIGHT_DIRECTION));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_LIGHT_SPOTRANGE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::LIGHT_SPOTRANGE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_GEOMETRY_FILE_CREATE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::GEOMETRY_FILE_CREATE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_GEOMETRY_FILE_DELETE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::GEOMETRY_FILE_DELETE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_GEOMETRY_FILE_FILENAME(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::GEOMETRY_FILE_FILENAME));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_GEOMETRY_MANUAL_CREATE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::GEOMETRY_MANUAL_CREATE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_GEOMETRY_MANUAL_INDICES(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::GEOMETRY_MANUAL_INDICES));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_GEOMETRY_MANUAL_VERTICES(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::GEOMETRY_MANUAL_VERTICES));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_GEOMETRY_MANUAL_TEXTURECOORDS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::GEOMETRY_MANUAL_TEXTURECOORDS));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_GEOMETRY_MANUAL_NORMALS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::GEOMETRY_MANUAL_NORMALS));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_GEOMETRY_MANUAL_TRIANGLES(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::GEOMETRY_MANUAL_TRIANGLES));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_GEOMETRY_MANUAL_DELETE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::GEOMETRY_MANUAL_DELETE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_GEOMETRY_TEXT_CREATE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::GEOMETRY_TEXT_CREATE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_GEOMETRY_TEXT_DELETE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::GEOMETRY_TEXT_DELETE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_GEOMETRY_TEXT_VISIBLE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::GEOMETRY_TEXT_VISIBLE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_GEOMETRY_TEXT_CAPTION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::GEOMETRY_TEXT_CAPTION));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_GEOMETRY_TEXT_OFFSET(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::GEOMETRY_TEXT_OFFSET));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_GEOMETRY_PRIMITVE_BOX_CREATE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::GEOMETRY_PRIMITVE_BOX_CREATE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_GEOMETRY_PRIMITVE_BOX_DIMENSIONS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::GEOMETRY_PRIMITVE_BOX_DIMENSIONS));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_GEOMETRY_PRIMITVE_BOX_DELETE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::GEOMETRY_PRIMITVE_BOX_DELETE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_MATERIAL_FILE_CREATE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::MATERIAL_FILE_CREATE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_MATERIAL_FILE_DELETE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::MATERIAL_FILE_DELETE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_MATERIAL_FILE_FILENAME(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::MATERIAL_FILE_FILENAME));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_MATERIAL_MANUAL_CREATE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::MATERIAL_MANUAL_CREATE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_MATERIAL_MANUAL_AMBIENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::MATERIAL_MANUAL_AMBIENT));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_MATERIAL_MANUAL_DIFFUSE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::MATERIAL_MANUAL_DIFFUSE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_MATERIAL_MANUAL_SPECULAR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::MATERIAL_MANUAL_SPECULAR));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_MATERIAL_MANUAL_SHININESS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::MATERIAL_MANUAL_SHININESS));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_MATERIAL_MANUAL_TEXTURES(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::MATERIAL_MANUAL_TEXTURES));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_MATERIAL_MANUAL_DELETE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::MATERIAL_MANUAL_DELETE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_TEXTURE_CREATE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::TEXTURE_CREATE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_TEXTURE_FILENAME(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::TEXTURE_FILENAME));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_TEXTURE_DELETE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::TEXTURE_DELETE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_CAMERA_CREATE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::CAMERA_CREATE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_CAMERA_DELETE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::CAMERA_DELETE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_CAMERA_FOCALLENGTH(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::CAMERA_FOCALLENGTH));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_CAMERA_ASPECTRATIO(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::CAMERA_ASPECTRATIO));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_CAMERA_FOVY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::CAMERA_FOVY));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_CAMERA_FRUSTUMOFFSET(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::CAMERA_FRUSTUMOFFSET));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_CAMERA_NEARCLIP(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::CAMERA_NEARCLIP));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_CAMERA_FARCLIP(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::CAMERA_FARCLIP));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Event_ET_INVALID(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Event::ET_INVALID));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_Event_subjectName_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::Event *arg1 = (Ape::Event *) 0;
	std::string *arg2 = 0;
	void *argp1 = 0;
	int res1 = 0;
	int res2 = SWIG_OLDOBJ;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Event, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_subjectName_set" "', argument " "1"" of type '" "Ape::Event *""'");
	}
	arg1 = (Ape::Event *)(argp1);
	{
		std::string *ptr = (std::string *)0;
		res2 = SWIG_AsPtr_std_string(value, &ptr);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Event_subjectName_set" "', argument " "2"" of type '" "std::string const &""'");
		}
		if (!ptr) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Event_subjectName_set" "', argument " "2"" of type '" "std::string const &""'");
		}
		arg2 = ptr;
	}
	if (arg1) (arg1)->subjectName = *arg2;

	if (SWIG_IsNewObj(res2)) delete arg2;

	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_Event_subjectName_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Event *arg1 = (Ape::Event *) 0;
	void *argp1 = 0;
	int res1 = 0;
	std::string *result = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Event, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_subjectName_get" "', argument " "1"" of type '" "Ape::Event *""'");
	}
	arg1 = (Ape::Event *)(argp1);
	result = (std::string *) & ((arg1)->subjectName);
	jsresult = SWIG_From_std_string((std::string)(*result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_Event_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::Event *arg1 = (Ape::Event *) 0;
	Ape::Event::Type arg2;
	void *argp1 = 0;
	int res1 = 0;
	int val2;
	int ecode2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Event, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_type_set" "', argument " "1"" of type '" "Ape::Event *""'");
	}
	arg1 = (Ape::Event *)(argp1);
	ecode2 = SWIG_AsVal_int(value, &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Event_type_set" "', argument " "2"" of type '" "Ape::Event::Type""'");
	}
	arg2 = (Ape::Event::Type)(val2);
	if (arg1) (arg1)->type = arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_Event_type_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Event *arg1 = (Ape::Event *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::Event::Type result;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Event, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_type_get" "', argument " "1"" of type '" "Ape::Event *""'");
	}
	arg1 = (Ape::Event *)(argp1);
	result = (Ape::Event::Type) ((arg1)->type);
	jsresult = SWIG_From_int((int)(result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_Event_group_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::Event *arg1 = (Ape::Event *) 0;
	Ape::Event::Group arg2;
	void *argp1 = 0;
	int res1 = 0;
	int val2;
	int ecode2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Event, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_group_set" "', argument " "1"" of type '" "Ape::Event *""'");
	}
	arg1 = (Ape::Event *)(argp1);
	ecode2 = SWIG_AsVal_int(value, &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Event_group_set" "', argument " "2"" of type '" "Ape::Event::Group""'");
	}
	arg2 = (Ape::Event::Group)(val2);
	if (arg1) (arg1)->group = arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_Event_group_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Event *arg1 = (Ape::Event *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::Event::Group result;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Event, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_group_get" "', argument " "1"" of type '" "Ape::Event *""'");
	}
	arg1 = (Ape::Event *)(argp1);
	result = (Ape::Event::Group) ((arg1)->group);
	jsresult = SWIG_From_int((int)(result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_Event__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	Ape::Event *result;
	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Event__SWIG_0.");
	result = (Ape::Event *)new Ape::Event();



	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__Event, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Event__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	std::string arg1;
	Ape::Event::Type arg2;
	int val2;
	int ecode2 = 0;
	Ape::Event *result;
	if (args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Event__SWIG_1.");
	{
		std::string *ptr = (std::string *)0;
		int res = SWIG_AsPtr_std_string(args[0], &ptr);
		if (!SWIG_IsOK(res) || !ptr) {
			SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Event" "', argument " "1"" of type '" "std::string""'");
		}
		arg1 = *ptr;
		if (SWIG_IsNewObj(res)) delete ptr;
	}
	ecode2 = SWIG_AsVal_int(args[1], &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Event" "', argument " "2"" of type '" "Ape::Event::Type""'");
	}
	arg2 = (Ape::Event::Type)(val2);
	result = (Ape::Event *)new Ape::Event(arg1, arg2);





	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__Event, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Event(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	OverloadErrorHandler errorHandler;
	v8::Handle<v8::Value> self;

	// switch all cases by means of series of if-returns.

	if (args.Length() == 0) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_Event__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_Event__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}

	if (args.Length() == 2) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_Event__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_Event__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}


	// default:
	SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Event");

fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Event(v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
static void _wrap_delete_Event(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
static void _wrap_delete_Event(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
static void _wrap_delete_Event(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
	v8::Local<v8::Object> object = data.GetValue();
	SWIGV8_Proxy *proxy = data.GetParameter();
#endif

	if (proxy->swigCMemOwn && proxy->swigCObject) {
		Ape::Event * arg1 = (Ape::Event *)proxy->swigCObject;
		delete arg1;
	}
	delete proxy;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
	object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
	object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
	object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
	object->Dispose();
#else
	object.Clear();
#endif
}


static SwigV8ReturnValue _wrap_ITextGeometry_getCaption(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::ITextGeometry *arg1 = (Ape::ITextGeometry *) 0;
	void *argp1 = 0;
	int res1 = 0;
	std::string result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ITextGeometry_getCaption.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__ITextGeometry, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ITextGeometry_getCaption" "', argument " "1"" of type '" "Ape::ITextGeometry *""'");
	}
	arg1 = (Ape::ITextGeometry *)(argp1);
	result = (arg1)->getCaption();
	jsresult = SWIG_From_std_string((std::string)(result));


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ITextGeometry_setCaption(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::ITextGeometry *arg1 = (Ape::ITextGeometry *) 0;
	std::string arg2;
	void *argp1 = 0;
	int res1 = 0;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ITextGeometry_setCaption.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__ITextGeometry, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ITextGeometry_setCaption" "', argument " "1"" of type '" "Ape::ITextGeometry *""'");
	}
	arg1 = (Ape::ITextGeometry *)(argp1);
	{
		std::string *ptr = (std::string *)0;
		int res = SWIG_AsPtr_std_string(args[0], &ptr);
		if (!SWIG_IsOK(res) || !ptr) {
			SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ITextGeometry_setCaption" "', argument " "2"" of type '" "std::string""'");
		}
		arg2 = *ptr;
		if (SWIG_IsNewObj(res)) delete ptr;
	}
	(arg1)->setCaption(arg2);
	jsresult = SWIGV8_UNDEFINED();



	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ITextGeometry_isVisible(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::ITextGeometry *arg1 = (Ape::ITextGeometry *) 0;
	void *argp1 = 0;
	int res1 = 0;
	bool result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ITextGeometry_isVisible.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__ITextGeometry, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ITextGeometry_isVisible" "', argument " "1"" of type '" "Ape::ITextGeometry *""'");
	}
	arg1 = (Ape::ITextGeometry *)(argp1);
	result = (bool)(arg1)->isVisible();
	jsresult = SWIG_From_bool((bool)(result));


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ITextGeometry_setVisible(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::ITextGeometry *arg1 = (Ape::ITextGeometry *) 0;
	bool arg2;
	void *argp1 = 0;
	int res1 = 0;
	bool val2;
	int ecode2 = 0;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ITextGeometry_setVisible.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__ITextGeometry, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ITextGeometry_setVisible" "', argument " "1"" of type '" "Ape::ITextGeometry *""'");
	}
	arg1 = (Ape::ITextGeometry *)(argp1);
	ecode2 = SWIG_AsVal_bool(args[0], &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ITextGeometry_setVisible" "', argument " "2"" of type '" "bool""'");
	}
	arg2 = (bool)(val2);
	(arg1)->setVisible(arg2);
	jsresult = SWIGV8_UNDEFINED();



	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ITextGeometry_getOffset(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::ITextGeometry *arg1 = (Ape::ITextGeometry *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Vector3 result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ITextGeometry_getOffset.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__ITextGeometry, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ITextGeometry_getOffset" "', argument " "1"" of type '" "Ape::ITextGeometry *""'");
	}
	arg1 = (Ape::ITextGeometry *)(argp1);
	result = (arg1)->getOffset();
	jsresult = SWIG_NewPointerObj((new Vector3((const Vector3&)(result))), SWIGTYPE_p_Vector3, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ITextGeometry_setOffset(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::ITextGeometry *arg1 = (Ape::ITextGeometry *) 0;
	Vector3 arg2;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ITextGeometry_setOffset.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__ITextGeometry, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ITextGeometry_setOffset" "', argument " "1"" of type '" "Ape::ITextGeometry *""'");
	}
	arg1 = (Ape::ITextGeometry *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Vector3, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ITextGeometry_setOffset" "', argument " "2"" of type '" "Vector3""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ITextGeometry_setOffset" "', argument " "2"" of type '" "Vector3""'");
		}
		else {
			arg2 = *((Vector3 *)(argp2));
		}
	}
	(arg1)->setOffset(arg2);
	jsresult = SWIGV8_UNDEFINED();


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_ITextGeometry(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	SWIG_exception(SWIG_ERROR, "Class ITextGeometry can not be instantiated");
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ape_LT_SPOT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Light::SPOT));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_LT_DIRECTIONAL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Light::DIRECTIONAL));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_LT_POINT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Light::POINT));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_LT_INVALID(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Light::INVALID));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_LightSpotRange_m_inner_angle_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::LightSpotRange *arg1 = (Ape::LightSpotRange *) 0;
	Ape::Degree *arg2 = (Ape::Degree *) 0;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2 = 0;
	int res2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__LightSpotRange, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LightSpotRange_m_inner_angle_set" "', argument " "1"" of type '" "Ape::LightSpotRange *""'");
	}
	arg1 = (Ape::LightSpotRange *)(argp1);
	res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_Ape__Degree, 0 | 0);
	if (!SWIG_IsOK(res2)) {
		SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LightSpotRange_m_inner_angle_set" "', argument " "2"" of type '" "Ape::Degree *""'");
	}
	arg2 = (Ape::Degree *)(argp2);
	if (arg1) (arg1)->innerAngle = *arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_LightSpotRange_m_inner_angle_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::LightSpotRange *arg1 = (Ape::LightSpotRange *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::Degree *result = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__LightSpotRange, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LightSpotRange_m_inner_angle_get" "', argument " "1"" of type '" "Ape::LightSpotRange *""'");
	}
	arg1 = (Ape::LightSpotRange *)(argp1);
	result = (Ape::Degree *)& ((arg1)->innerAngle);
	jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Ape__Degree, 0 | 0);


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_LightSpotRange_m_outer_angle_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::LightSpotRange *arg1 = (Ape::LightSpotRange *) 0;
	Ape::Degree *arg2 = (Ape::Degree *) 0;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2 = 0;
	int res2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__LightSpotRange, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LightSpotRange_m_outer_angle_set" "', argument " "1"" of type '" "Ape::LightSpotRange *""'");
	}
	arg1 = (Ape::LightSpotRange *)(argp1);
	res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_Ape__Degree, 0 | 0);
	if (!SWIG_IsOK(res2)) {
		SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LightSpotRange_m_outer_angle_set" "', argument " "2"" of type '" "Ape::Degree *""'");
	}
	arg2 = (Ape::Degree *)(argp2);
	if (arg1) (arg1)->outerAngle = *arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_LightSpotRange_m_outer_angle_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::LightSpotRange *arg1 = (Ape::LightSpotRange *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::Degree *result = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__LightSpotRange, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LightSpotRange_m_outer_angle_get" "', argument " "1"" of type '" "Ape::LightSpotRange *""'");
	}
	arg1 = (Ape::LightSpotRange *)(argp1);
	result = (Ape::Degree *)& ((arg1)->outerAngle);
	jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Ape__Degree, 0 | 0);


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_LightSpotRange_m_falloff_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::LightSpotRange *arg1 = (Ape::LightSpotRange *) 0;
	float arg2;
	void *argp1 = 0;
	int res1 = 0;
	float val2;
	int ecode2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__LightSpotRange, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LightSpotRange_m_falloff_set" "', argument " "1"" of type '" "Ape::LightSpotRange *""'");
	}
	arg1 = (Ape::LightSpotRange *)(argp1);
	ecode2 = SWIG_AsVal_float(value, &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LightSpotRange_m_falloff_set" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	if (arg1) (arg1)->falloff = arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_LightSpotRange_m_falloff_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::LightSpotRange *arg1 = (Ape::LightSpotRange *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__LightSpotRange, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LightSpotRange_m_falloff_get" "', argument " "1"" of type '" "Ape::LightSpotRange *""'");
	}
	arg1 = (Ape::LightSpotRange *)(argp1);
	result = (float)((arg1)->falloff);
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_LightSpotRange__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	Ape::LightSpotRange *result;
	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_LightSpotRange__SWIG_0.");
	result = (Ape::LightSpotRange *)new Ape::LightSpotRange();



	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__LightSpotRange, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_LightSpotRange__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	Ape::Degree arg1;
	Ape::Degree arg2;
	float arg3;
	void *argp1;
	int res1 = 0;
	void *argp2;
	int res2 = 0;
	float val3;
	int ecode3 = 0;
	Ape::LightSpotRange *result;
	if (args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_LightSpotRange__SWIG_1.");
	{
		res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Ape__Degree, 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LightSpotRange" "', argument " "1"" of type '" "Ape::Degree""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LightSpotRange" "', argument " "1"" of type '" "Ape::Degree""'");
		}
		else {
			arg1 = *((Ape::Degree *)(argp1));
		}
	}
	{
		res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_Ape__Degree, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LightSpotRange" "', argument " "2"" of type '" "Ape::Degree""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LightSpotRange" "', argument " "2"" of type '" "Ape::Degree""'");
		}
		else {
			arg2 = *((Ape::Degree *)(argp2));
		}
	}
	ecode3 = SWIG_AsVal_float(args[2], &val3);
	if (!SWIG_IsOK(ecode3)) {
		SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LightSpotRange" "', argument " "3"" of type '" "float""'");
	}
	arg3 = (float)(val3);
	result = (Ape::LightSpotRange *)new Ape::LightSpotRange(arg1, arg2, arg3);




	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__LightSpotRange, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_LightSpotRange__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	Radian arg1;
	Radian arg2;
	float arg3;
	void *argp1;
	int res1 = 0;
	void *argp2;
	int res2 = 0;
	float val3;
	int ecode3 = 0;
	Ape::LightSpotRange *result;
	if (args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_LightSpotRange__SWIG_2.");
	{
		res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Radian, 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LightSpotRange" "', argument " "1"" of type '" "Radian""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LightSpotRange" "', argument " "1"" of type '" "Radian""'");
		}
		else {
			arg1 = *((Radian *)(argp1));
		}
	}
	{
		res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_Radian, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LightSpotRange" "', argument " "2"" of type '" "Radian""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LightSpotRange" "', argument " "2"" of type '" "Radian""'");
		}
		else {
			arg2 = *((Radian *)(argp2));
		}
	}
	ecode3 = SWIG_AsVal_float(args[2], &val3);
	if (!SWIG_IsOK(ecode3)) {
		SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LightSpotRange" "', argument " "3"" of type '" "float""'");
	}
	arg3 = (float)(val3);
	result = (Ape::LightSpotRange *)new Ape::LightSpotRange(arg1, arg2, arg3);




	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__LightSpotRange, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_LightSpotRange(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	OverloadErrorHandler errorHandler;
	v8::Handle<v8::Value> self;

	// switch all cases by means of series of if-returns.

	if (args.Length() == 0) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_LightSpotRange__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_LightSpotRange__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}

	if (args.Length() == 3) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_LightSpotRange__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_LightSpotRange__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}

	if (args.Length() == 3) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_LightSpotRange__SWIG_2(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_LightSpotRange__SWIG_2(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}


	// default:
	SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_LightSpotRange");

fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_LightSpotRange(v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
static void _wrap_delete_LightSpotRange(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
static void _wrap_delete_LightSpotRange(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
static void _wrap_delete_LightSpotRange(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
	v8::Local<v8::Object> object = data.GetValue();
	SWIGV8_Proxy *proxy = data.GetParameter();
#endif

	if (proxy->swigCMemOwn && proxy->swigCObject) {
		Ape::LightSpotRange * arg1 = (Ape::LightSpotRange *)proxy->swigCObject;
		delete arg1;
	}
	delete proxy;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
	object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
	object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
	object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
	object->Dispose();
#else
	object.Clear();
#endif
}


static void _wrap_LightAttenuation_m_range_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::LightAttenuation *arg1 = (Ape::LightAttenuation *) 0;
	float arg2;
	void *argp1 = 0;
	int res1 = 0;
	float val2;
	int ecode2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__LightAttenuation, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LightAttenuation_m_range_set" "', argument " "1"" of type '" "Ape::LightAttenuation *""'");
	}
	arg1 = (Ape::LightAttenuation *)(argp1);
	ecode2 = SWIG_AsVal_float(value, &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LightAttenuation_m_range_set" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	if (arg1) (arg1)->range = arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_LightAttenuation_m_range_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::LightAttenuation *arg1 = (Ape::LightAttenuation *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__LightAttenuation, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LightAttenuation_m_range_get" "', argument " "1"" of type '" "Ape::LightAttenuation *""'");
	}
	arg1 = (Ape::LightAttenuation *)(argp1);
	result = (float)((arg1)->range);
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_LightAttenuation_m_constant_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::LightAttenuation *arg1 = (Ape::LightAttenuation *) 0;
	float arg2;
	void *argp1 = 0;
	int res1 = 0;
	float val2;
	int ecode2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__LightAttenuation, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LightAttenuation_m_constant_set" "', argument " "1"" of type '" "Ape::LightAttenuation *""'");
	}
	arg1 = (Ape::LightAttenuation *)(argp1);
	ecode2 = SWIG_AsVal_float(value, &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LightAttenuation_m_constant_set" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	if (arg1) (arg1)->constant = arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_LightAttenuation_m_constant_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::LightAttenuation *arg1 = (Ape::LightAttenuation *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__LightAttenuation, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LightAttenuation_m_constant_get" "', argument " "1"" of type '" "Ape::LightAttenuation *""'");
	}
	arg1 = (Ape::LightAttenuation *)(argp1);
	result = (float)((arg1)->constant);
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_LightAttenuation_m_linear_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::LightAttenuation *arg1 = (Ape::LightAttenuation *) 0;
	float arg2;
	void *argp1 = 0;
	int res1 = 0;
	float val2;
	int ecode2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__LightAttenuation, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LightAttenuation_m_linear_set" "', argument " "1"" of type '" "Ape::LightAttenuation *""'");
	}
	arg1 = (Ape::LightAttenuation *)(argp1);
	ecode2 = SWIG_AsVal_float(value, &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LightAttenuation_m_linear_set" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	if (arg1) (arg1)->linear = arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_LightAttenuation_m_linear_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::LightAttenuation *arg1 = (Ape::LightAttenuation *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__LightAttenuation, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LightAttenuation_m_linear_get" "', argument " "1"" of type '" "Ape::LightAttenuation *""'");
	}
	arg1 = (Ape::LightAttenuation *)(argp1);
	result = (float)((arg1)->linear);
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_LightAttenuation_m_quadratic_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::LightAttenuation *arg1 = (Ape::LightAttenuation *) 0;
	float arg2;
	void *argp1 = 0;
	int res1 = 0;
	float val2;
	int ecode2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__LightAttenuation, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LightAttenuation_m_quadratic_set" "', argument " "1"" of type '" "Ape::LightAttenuation *""'");
	}
	arg1 = (Ape::LightAttenuation *)(argp1);
	ecode2 = SWIG_AsVal_float(value, &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LightAttenuation_m_quadratic_set" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	if (arg1) (arg1)->quadratic = arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_LightAttenuation_m_quadratic_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::LightAttenuation *arg1 = (Ape::LightAttenuation *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__LightAttenuation, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LightAttenuation_m_quadratic_get" "', argument " "1"" of type '" "Ape::LightAttenuation *""'");
	}
	arg1 = (Ape::LightAttenuation *)(argp1);
	result = (float)((arg1)->quadratic);
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_LightAttenuation__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	Ape::LightAttenuation *result;
	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_LightAttenuation__SWIG_0.");
	result = (Ape::LightAttenuation *)new Ape::LightAttenuation();



	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__LightAttenuation, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_LightAttenuation__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	float arg1;
	float arg2;
	float arg3;
	float arg4;
	float val1;
	int ecode1 = 0;
	float val2;
	int ecode2 = 0;
	float val3;
	int ecode3 = 0;
	float val4;
	int ecode4 = 0;
	Ape::LightAttenuation *result;
	if (args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_LightAttenuation__SWIG_1.");
	ecode1 = SWIG_AsVal_float(args[0], &val1);
	if (!SWIG_IsOK(ecode1)) {
		SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LightAttenuation" "', argument " "1"" of type '" "float""'");
	}
	arg1 = (float)(val1);
	ecode2 = SWIG_AsVal_float(args[1], &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LightAttenuation" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	ecode3 = SWIG_AsVal_float(args[2], &val3);
	if (!SWIG_IsOK(ecode3)) {
		SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LightAttenuation" "', argument " "3"" of type '" "float""'");
	}
	arg3 = (float)(val3);
	ecode4 = SWIG_AsVal_float(args[3], &val4);
	if (!SWIG_IsOK(ecode4)) {
		SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_LightAttenuation" "', argument " "4"" of type '" "float""'");
	}
	arg4 = (float)(val4);
	result = (Ape::LightAttenuation *)new Ape::LightAttenuation(arg1, arg2, arg3, arg4);







	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__LightAttenuation, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_LightAttenuation(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	OverloadErrorHandler errorHandler;
	v8::Handle<v8::Value> self;

	// switch all cases by means of series of if-returns.

	if (args.Length() == 0) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_LightAttenuation__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_LightAttenuation__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}

	if (args.Length() == 4) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_LightAttenuation__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_LightAttenuation__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}


	// default:
	SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_LightAttenuation");

fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_LightAttenuation(v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
static void _wrap_delete_LightAttenuation(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
static void _wrap_delete_LightAttenuation(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
static void _wrap_delete_LightAttenuation(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
	v8::Local<v8::Object> object = data.GetValue();
	SWIGV8_Proxy *proxy = data.GetParameter();
#endif

	if (proxy->swigCMemOwn && proxy->swigCObject) {
		Ape::LightAttenuation * arg1 = (Ape::LightAttenuation *)proxy->swigCObject;
		delete arg1;
	}
	delete proxy;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
	object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
	object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
	object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
	object->Dispose();
#else
	object.Clear();
#endif
}


static SwigV8ReturnValue _wrap_ILight_getLightType(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::ILight *arg1 = (Ape::ILight *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::Light::Type result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ILight_getLightType.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__ILight, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILight_getLightType" "', argument " "1"" of type '" "Ape::ILight *""'");
	}
	arg1 = (Ape::ILight *)(argp1);
	result = (Ape::Light::Type)(arg1)->getLightType();
	jsresult = SWIG_From_int((int)(result));


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ILight_getDiffuseColor(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::ILight *arg1 = (Ape::ILight *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::Color result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ILight_getDiffuseColor.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__ILight, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILight_getDiffuseColor" "', argument " "1"" of type '" "Ape::ILight *""'");
	}
	arg1 = (Ape::ILight *)(argp1);
	result = (arg1)->getDiffuseColor();
	jsresult = SWIG_NewPointerObj((new Ape::Color((const Ape::Color&)(result))), SWIGTYPE_p_Ape__Color, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ILight_getSpecularColor(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::ILight *arg1 = (Ape::ILight *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::Color result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ILight_getSpecularColor.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__ILight, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILight_getSpecularColor" "', argument " "1"" of type '" "Ape::ILight *""'");
	}
	arg1 = (Ape::ILight *)(argp1);
	result = (arg1)->getSpecularColor();
	jsresult = SWIG_NewPointerObj((new Ape::Color((const Ape::Color&)(result))), SWIGTYPE_p_Ape__Color, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ILight_getLightSpotRange(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::ILight *arg1 = (Ape::ILight *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::LightSpotRange result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ILight_getLightSpotRange.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__ILight, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILight_getLightSpotRange" "', argument " "1"" of type '" "Ape::ILight *""'");
	}
	arg1 = (Ape::ILight *)(argp1);
	result = (arg1)->getLightSpotRange();
	jsresult = SWIG_NewPointerObj((new Ape::LightSpotRange((const Ape::LightSpotRange&)(result))), SWIGTYPE_p_Ape__LightSpotRange, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ILight_getLightAttenuation(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::ILight *arg1 = (Ape::ILight *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::LightAttenuation result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ILight_getLightAttenuation.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__ILight, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILight_getLightAttenuation" "', argument " "1"" of type '" "Ape::ILight *""'");
	}
	arg1 = (Ape::ILight *)(argp1);
	result = (arg1)->getLightAttenuation();
	jsresult = SWIG_NewPointerObj((new Ape::LightAttenuation((const Ape::LightAttenuation&)(result))), SWIGTYPE_p_Ape__LightAttenuation, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ILight_getLightDirection(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::ILight *arg1 = (Ape::ILight *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Vector3 result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ILight_getLightDirection.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__ILight, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILight_getLightDirection" "', argument " "1"" of type '" "Ape::ILight *""'");
	}
	arg1 = (Ape::ILight *)(argp1);
	result = (arg1)->getLightDirection();
	jsresult = SWIG_NewPointerObj((new Vector3((const Vector3&)(result))), SWIGTYPE_p_Vector3, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ILight_setLightType(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::ILight *arg1 = (Ape::ILight *) 0;
	Ape::Light::Type arg2;
	void *argp1 = 0;
	int res1 = 0;
	int val2;
	int ecode2 = 0;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ILight_setLightType.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__ILight, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILight_setLightType" "', argument " "1"" of type '" "Ape::ILight *""'");
	}
	arg1 = (Ape::ILight *)(argp1);
	ecode2 = SWIG_AsVal_int(args[0], &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ILight_setLightType" "', argument " "2"" of type '" "Ape::LightType""'");
	}
	arg2 = (Ape::Light::Type)(val2);
	(arg1)->setLightType(arg2);
	jsresult = SWIGV8_UNDEFINED();



	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ILight_setDiffuseColor(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::ILight *arg1 = (Ape::ILight *) 0;
	Ape::Color arg2;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ILight_setDiffuseColor.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__ILight, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILight_setDiffuseColor" "', argument " "1"" of type '" "Ape::ILight *""'");
	}
	arg1 = (Ape::ILight *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Ape__Color, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ILight_setDiffuseColor" "', argument " "2"" of type '" "Ape::Color""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ILight_setDiffuseColor" "', argument " "2"" of type '" "Ape::Color""'");
		}
		else {
			arg2 = *((Ape::Color *)(argp2));
		}
	}
	(arg1)->setDiffuseColor(arg2);
	jsresult = SWIGV8_UNDEFINED();


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ILight_setSpecularColor(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::ILight *arg1 = (Ape::ILight *) 0;
	Ape::Color arg2;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ILight_setSpecularColor.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__ILight, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILight_setSpecularColor" "', argument " "1"" of type '" "Ape::ILight *""'");
	}
	arg1 = (Ape::ILight *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Ape__Color, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ILight_setSpecularColor" "', argument " "2"" of type '" "Ape::Color""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ILight_setSpecularColor" "', argument " "2"" of type '" "Ape::Color""'");
		}
		else {
			arg2 = *((Ape::Color *)(argp2));
		}
	}
	(arg1)->setSpecularColor(arg2);
	jsresult = SWIGV8_UNDEFINED();


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ILight_setLightSpotRange(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::ILight *arg1 = (Ape::ILight *) 0;
	Ape::LightSpotRange arg2;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ILight_setLightSpotRange.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__ILight, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILight_setLightSpotRange" "', argument " "1"" of type '" "Ape::ILight *""'");
	}
	arg1 = (Ape::ILight *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Ape__LightSpotRange, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ILight_setLightSpotRange" "', argument " "2"" of type '" "Ape::LightSpotRange""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ILight_setLightSpotRange" "', argument " "2"" of type '" "Ape::LightSpotRange""'");
		}
		else {
			arg2 = *((Ape::LightSpotRange *)(argp2));
		}
	}
	(arg1)->setLightSpotRange(arg2);
	jsresult = SWIGV8_UNDEFINED();


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ILight_setLightAttenuation(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::ILight *arg1 = (Ape::ILight *) 0;
	Ape::LightAttenuation arg2;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ILight_setLightAttenuation.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__ILight, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILight_setLightAttenuation" "', argument " "1"" of type '" "Ape::ILight *""'");
	}
	arg1 = (Ape::ILight *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Ape__LightAttenuation, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ILight_setLightAttenuation" "', argument " "2"" of type '" "Ape::LightAttenuation""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ILight_setLightAttenuation" "', argument " "2"" of type '" "Ape::LightAttenuation""'");
		}
		else {
			arg2 = *((Ape::LightAttenuation *)(argp2));
		}
	}
	(arg1)->setLightAttenuation(arg2);
	jsresult = SWIGV8_UNDEFINED();


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ILight_setLightDirection(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::ILight *arg1 = (Ape::ILight *) 0;
	Vector3 arg2;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ILight_setLightDirection.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__ILight, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILight_setLightDirection" "', argument " "1"" of type '" "Ape::ILight *""'");
	}
	arg1 = (Ape::ILight *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Vector3, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ILight_setLightDirection" "', argument " "2"" of type '" "Vector3""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ILight_setLightDirection" "', argument " "2"" of type '" "Vector3""'");
		}
		else {
			arg2 = *((Vector3 *)(argp2));
		}
	}
	(arg1)->setLightDirection(arg2);
	jsresult = SWIGV8_UNDEFINED();


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_ILight(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	SWIG_exception(SWIG_ERROR, "Class ILight can not be instantiated");
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IManualGeometry_getIndex(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::IManualGeometry *arg1 = (Ape::IManualGeometry *) 0;
	void *argp1 = 0;
	int res1 = 0;
	int result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IManualGeometry_getIndex.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__IManualGeometry, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IManualGeometry_getIndex" "', argument " "1"" of type '" "Ape::IManualGeometry *""'");
	}
	arg1 = (Ape::IManualGeometry *)(argp1);
	result = (int)(arg1)->getIndex();
	jsresult = SWIG_From_int((int)(result));


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IManualGeometry_getVertexList__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::IManualGeometry *arg1 = (Ape::IManualGeometry *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Vector3Vector result;

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__IManualGeometry, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IManualGeometry_getVertexList" "', argument " "1"" of type '" "Ape::IManualGeometry *""'");
	}
	arg1 = (Ape::IManualGeometry *)(argp1);
	result = (arg1)->getVertexList();
	jsresult = SWIG_NewPointerObj((new Vector3Vector((const Vector3Vector&)(result))), SWIGTYPE_p_Vector3Vector, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IManualGeometry_getNormalList__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::IManualGeometry *arg1 = (Ape::IManualGeometry *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Vector3Vector result;

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__IManualGeometry, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IManualGeometry_getNormalList" "', argument " "1"" of type '" "Ape::IManualGeometry *""'");
	}
	arg1 = (Ape::IManualGeometry *)(argp1);
	result = (arg1)->getNormalList();
	jsresult = SWIG_NewPointerObj((new Vector3Vector((const Vector3Vector&)(result))), SWIGTYPE_p_Vector3Vector, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IManualGeometry_getColorList__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::IManualGeometry *arg1 = (Ape::IManualGeometry *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Vector3Vector result;

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__IManualGeometry, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IManualGeometry_getColorList" "', argument " "1"" of type '" "Ape::IManualGeometry *""'");
	}
	arg1 = (Ape::IManualGeometry *)(argp1);
	result = (arg1)->getColorList();
	jsresult = SWIG_NewPointerObj((new Vector3Vector((const Vector3Vector&)(result))), SWIGTYPE_p_Vector3Vector, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IManualGeometry_getIndexList__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::IManualGeometry *arg1 = (Ape::IManualGeometry *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::IntVector result;

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__IManualGeometry, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IManualGeometry_getIndexList" "', argument " "1"" of type '" "Ape::IManualGeometry *""'");
	}
	arg1 = (Ape::IManualGeometry *)(argp1);
	result = (arg1)->getIndexList();
	jsresult = SWIG_NewPointerObj((new Ape::IntVector((const Ape::IntVector&)(result))), SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IManualGeometry_getTriangleList__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::IManualGeometry *arg1 = (Ape::IManualGeometry *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Vector3Vector result;

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__IManualGeometry, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IManualGeometry_getTriangleList" "', argument " "1"" of type '" "Ape::IManualGeometry *""'");
	}
	arg1 = (Ape::IManualGeometry *)(argp1);
	result = (arg1)->getTriangleList();
	jsresult = SWIG_NewPointerObj((new Vector3Vector((const Vector3Vector&)(result))), SWIGTYPE_p_Vector3Vector, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IManualGeometry_getTextureCoordList__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::IManualGeometry *arg1 = (Ape::IManualGeometry *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Vector3Vector result;

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__IManualGeometry, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IManualGeometry_getTextureCoordList" "', argument " "1"" of type '" "Ape::IManualGeometry *""'");
	}
	arg1 = (Ape::IManualGeometry *)(argp1);
	result = (arg1)->getTextureCoordList();
	jsresult = SWIG_NewPointerObj((new Vector3Vector((const Vector3Vector&)(result))), SWIGTYPE_p_Vector3Vector, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IManualGeometry_getVertexList__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::IManualGeometry *arg1 = (Ape::IManualGeometry *) 0;
	Vector3Vector arg2;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__IManualGeometry, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IManualGeometry_getVertexList" "', argument " "1"" of type '" "Ape::IManualGeometry *""'");
	}
	arg1 = (Ape::IManualGeometry *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Vector3Vector, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IManualGeometry_getVertexList" "', argument " "2"" of type '" "Vector3Vector""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IManualGeometry_getVertexList" "', argument " "2"" of type '" "Vector3Vector""'");
		}
		else {
			arg2 = *((Vector3Vector *)(argp2));
		}
	}
	(arg1)->getVertexList(arg2);
	jsresult = SWIGV8_UNDEFINED();


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IManualGeometry__wrap_IManualGeometry_getVertexList(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	OverloadErrorHandler errorHandler;


	if (args.Length() == 0) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		jsresult = _wrap_IManualGeometry_getVertexList__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(jsresult);
		}
#else
		_wrap_IManualGeometry_getVertexList__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}


	if (args.Length() == 1) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		jsresult = _wrap_IManualGeometry_getVertexList__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(jsresult);
		}
#else
		_wrap_IManualGeometry_getVertexList__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}


	SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getVertexList.");

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IManualGeometry_getNormalList__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::IManualGeometry *arg1 = (Ape::IManualGeometry *) 0;
	Vector3Vector arg2;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__IManualGeometry, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IManualGeometry_getNormalList" "', argument " "1"" of type '" "Ape::IManualGeometry *""'");
	}
	arg1 = (Ape::IManualGeometry *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Vector3Vector, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IManualGeometry_getNormalList" "', argument " "2"" of type '" "Vector3Vector""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IManualGeometry_getNormalList" "', argument " "2"" of type '" "Vector3Vector""'");
		}
		else {
			arg2 = *((Vector3Vector *)(argp2));
		}
	}
	(arg1)->getNormalList(arg2);
	jsresult = SWIGV8_UNDEFINED();


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IManualGeometry__wrap_IManualGeometry_getNormalList(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	OverloadErrorHandler errorHandler;


	if (args.Length() == 0) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		jsresult = _wrap_IManualGeometry_getNormalList__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(jsresult);
		}
#else
		_wrap_IManualGeometry_getNormalList__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}


	if (args.Length() == 1) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		jsresult = _wrap_IManualGeometry_getNormalList__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(jsresult);
		}
#else
		_wrap_IManualGeometry_getNormalList__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}


	SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getNormalList.");

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IManualGeometry_getColorList__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::IManualGeometry *arg1 = (Ape::IManualGeometry *) 0;
	Vector3Vector arg2;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__IManualGeometry, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IManualGeometry_getColorList" "', argument " "1"" of type '" "Ape::IManualGeometry *""'");
	}
	arg1 = (Ape::IManualGeometry *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Vector3Vector, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IManualGeometry_getColorList" "', argument " "2"" of type '" "Vector3Vector""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IManualGeometry_getColorList" "', argument " "2"" of type '" "Vector3Vector""'");
		}
		else {
			arg2 = *((Vector3Vector *)(argp2));
		}
	}
	(arg1)->getColorList(arg2);
	jsresult = SWIGV8_UNDEFINED();


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IManualGeometry__wrap_IManualGeometry_getColorList(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	OverloadErrorHandler errorHandler;


	if (args.Length() == 0) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		jsresult = _wrap_IManualGeometry_getColorList__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(jsresult);
		}
#else
		_wrap_IManualGeometry_getColorList__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}


	if (args.Length() == 1) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		jsresult = _wrap_IManualGeometry_getColorList__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(jsresult);
		}
#else
		_wrap_IManualGeometry_getColorList__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}


	SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getColorList.");

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IManualGeometry_getIndexList__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::IManualGeometry *arg1 = (Ape::IManualGeometry *) 0;
	Ape::IntVector arg2;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__IManualGeometry, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IManualGeometry_getIndexList" "', argument " "1"" of type '" "Ape::IManualGeometry *""'");
	}
	arg1 = (Ape::IManualGeometry *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_int_t, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IManualGeometry_getIndexList" "', argument " "2"" of type '" "Ape::IntVector""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IManualGeometry_getIndexList" "', argument " "2"" of type '" "Ape::IntVector""'");
		}
		else {
			arg2 = *((Ape::IntVector *)(argp2));
		}
	}
	(arg1)->getIndexList(arg2);
	jsresult = SWIGV8_UNDEFINED();


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IManualGeometry__wrap_IManualGeometry_getIndexList(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	OverloadErrorHandler errorHandler;


	if (args.Length() == 0) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		jsresult = _wrap_IManualGeometry_getIndexList__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(jsresult);
		}
#else
		_wrap_IManualGeometry_getIndexList__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}


	if (args.Length() == 1) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		jsresult = _wrap_IManualGeometry_getIndexList__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(jsresult);
		}
#else
		_wrap_IManualGeometry_getIndexList__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}


	SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getIndexList.");

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IManualGeometry_getTriangleList__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::IManualGeometry *arg1 = (Ape::IManualGeometry *) 0;
	Vector3Vector arg2;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__IManualGeometry, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IManualGeometry_getTriangleList" "', argument " "1"" of type '" "Ape::IManualGeometry *""'");
	}
	arg1 = (Ape::IManualGeometry *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Vector3Vector, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IManualGeometry_getTriangleList" "', argument " "2"" of type '" "Vector3Vector""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IManualGeometry_getTriangleList" "', argument " "2"" of type '" "Vector3Vector""'");
		}
		else {
			arg2 = *((Vector3Vector *)(argp2));
		}
	}
	(arg1)->getTriangleList(arg2);
	jsresult = SWIGV8_UNDEFINED();


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IManualGeometry__wrap_IManualGeometry_getTriangleList(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	OverloadErrorHandler errorHandler;


	if (args.Length() == 0) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		jsresult = _wrap_IManualGeometry_getTriangleList__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(jsresult);
		}
#else
		_wrap_IManualGeometry_getTriangleList__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}


	if (args.Length() == 1) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		jsresult = _wrap_IManualGeometry_getTriangleList__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(jsresult);
		}
#else
		_wrap_IManualGeometry_getTriangleList__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}


	SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getTriangleList.");

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IManualGeometry_getTextureCoordList__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::IManualGeometry *arg1 = (Ape::IManualGeometry *) 0;
	Vector3Vector arg2;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__IManualGeometry, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IManualGeometry_getTextureCoordList" "', argument " "1"" of type '" "Ape::IManualGeometry *""'");
	}
	arg1 = (Ape::IManualGeometry *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Vector3Vector, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IManualGeometry_getTextureCoordList" "', argument " "2"" of type '" "Vector3Vector""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IManualGeometry_getTextureCoordList" "', argument " "2"" of type '" "Vector3Vector""'");
		}
		else {
			arg2 = *((Vector3Vector *)(argp2));
		}
	}
	(arg1)->getTextureCoordList(arg2);
	jsresult = SWIGV8_UNDEFINED();


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IManualGeometry__wrap_IManualGeometry_getTextureCoordList(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	OverloadErrorHandler errorHandler;


	if (args.Length() == 0) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		jsresult = _wrap_IManualGeometry_getTextureCoordList__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(jsresult);
		}
#else
		_wrap_IManualGeometry_getTextureCoordList__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}


	if (args.Length() == 1) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		jsresult = _wrap_IManualGeometry_getTextureCoordList__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(jsresult);
		}
#else
		_wrap_IManualGeometry_getTextureCoordList__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}


	SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getTextureCoordList.");

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_IManualGeometry(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	SWIG_exception(SWIG_ERROR, "Class IManualGeometry can not be instantiated");
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ape_Node_LOCAL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Node::LOCAL));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Node_PARENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Node::PARENT));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Node_WORLD(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Node::WORLD));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Node_INVALID(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Node::INVALID));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_INode_getName(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::INode *arg1 = (Ape::INode *) 0;
	void *argp1 = 0;
	int res1 = 0;
	std::string result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_INode_getName.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__INode, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_getName" "', argument " "1"" of type '" "Ape::INode const *""'");
	}
	arg1 = (Ape::INode *)(argp1);
	result = ((Ape::INode const *)arg1)->getName();
	jsresult = SWIG_From_std_string((std::string)(result));


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_INode_getParentName(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::INode *arg1 = (Ape::INode *) 0;
	void *argp1 = 0;
	int res1 = 0;
	std::string result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_INode_getParentName.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__INode, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_getParentName" "', argument " "1"" of type '" "Ape::INode const *""'");
	}
	arg1 = (Ape::INode *)(argp1);
	result = ((Ape::INode const *)arg1)->getParentName();
	jsresult = SWIG_From_std_string((std::string)(result));


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_INode_getPosition(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::INode *arg1 = (Ape::INode *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Vector3 result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_INode_getPosition.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__INode, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_getPosition" "', argument " "1"" of type '" "Ape::INode const *""'");
	}
	arg1 = (Ape::INode *)(argp1);
	result = ((Ape::INode const *)arg1)->getPosition();
	jsresult = SWIG_NewPointerObj((new Vector3((const Vector3&)(result))), SWIGTYPE_p_Vector3, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_INode_getDerivedPosition(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::INode *arg1 = (Ape::INode *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Vector3 result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_INode_getDerivedPosition.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__INode, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_getDerivedPosition" "', argument " "1"" of type '" "Ape::INode const *""'");
	}
	arg1 = (Ape::INode *)(argp1);
	result = ((Ape::INode const *)arg1)->getDerivedPosition();
	jsresult = SWIG_NewPointerObj((new Vector3((const Vector3&)(result))), SWIGTYPE_p_Vector3, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_INode_getOrientation(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::INode *arg1 = (Ape::INode *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Quaternion result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_INode_getOrientation.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__INode, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_getOrientation" "', argument " "1"" of type '" "Ape::INode const *""'");
	}
	arg1 = (Ape::INode *)(argp1);
	result = ((Ape::INode const *)arg1)->getOrientation();
	jsresult = SWIG_NewPointerObj((new Quaternion((const Quaternion&)(result))), SWIGTYPE_p_Quaternion, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_INode_getDerivedOrientation(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::INode *arg1 = (Ape::INode *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Quaternion result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_INode_getDerivedOrientation.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__INode, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_getDerivedOrientation" "', argument " "1"" of type '" "Ape::INode const *""'");
	}
	arg1 = (Ape::INode *)(argp1);
	result = ((Ape::INode const *)arg1)->getDerivedOrientation();
	jsresult = SWIG_NewPointerObj((new Quaternion((const Quaternion&)(result))), SWIGTYPE_p_Quaternion, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_INode_getScale(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::INode *arg1 = (Ape::INode *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Vector3 result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_INode_getScale.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__INode, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_getScale" "', argument " "1"" of type '" "Ape::INode const *""'");
	}
	arg1 = (Ape::INode *)(argp1);
	result = ((Ape::INode const *)arg1)->getScale();
	jsresult = SWIG_NewPointerObj((new Vector3((const Vector3&)(result))), SWIGTYPE_p_Vector3, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_INode_getDerivedScale(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::INode *arg1 = (Ape::INode *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Vector3 result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_INode_getDerivedScale.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__INode, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_getDerivedScale" "', argument " "1"" of type '" "Ape::INode const *""'");
	}
	arg1 = (Ape::INode *)(argp1);
	result = ((Ape::INode const *)arg1)->getDerivedScale();
	jsresult = SWIG_NewPointerObj((new Vector3((const Vector3&)(result))), SWIGTYPE_p_Vector3, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_INode_setParent(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::INode *arg1 = (Ape::INode *) 0;
	std::string arg2;
	void *argp1 = 0;
	int res1 = 0;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_INode_setParent.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__INode, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_setParent" "', argument " "1"" of type '" "Ape::INode *""'");
	}
	arg1 = (Ape::INode *)(argp1);
	{
		std::string *ptr = (std::string *)0;
		int res = SWIG_AsPtr_std_string(args[0], &ptr);
		if (!SWIG_IsOK(res) || !ptr) {
			SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "INode_setParent" "', argument " "2"" of type '" "std::string""'");
		}
		arg2 = *ptr;
		if (SWIG_IsNewObj(res)) delete ptr;
	}
	(arg1)->setParent(arg2);
	jsresult = SWIGV8_UNDEFINED();



	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_INode_setPosition(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::INode *arg1 = (Ape::INode *) 0;
	Vector3 arg2;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_INode_setPosition.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__INode, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_setPosition" "', argument " "1"" of type '" "Ape::INode *""'");
	}
	arg1 = (Ape::INode *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Vector3, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "INode_setPosition" "', argument " "2"" of type '" "Vector3""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "INode_setPosition" "', argument " "2"" of type '" "Vector3""'");
		}
		else {
			arg2 = *((Vector3 *)(argp2));
		}
	}
	(arg1)->setPosition(arg2);
	jsresult = SWIGV8_UNDEFINED();


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_INode_setOrientation(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::INode *arg1 = (Ape::INode *) 0;
	Quaternion arg2;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_INode_setOrientation.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__INode, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_setOrientation" "', argument " "1"" of type '" "Ape::INode *""'");
	}
	arg1 = (Ape::INode *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Quaternion, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "INode_setOrientation" "', argument " "2"" of type '" "Quaternion""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "INode_setOrientation" "', argument " "2"" of type '" "Quaternion""'");
		}
		else {
			arg2 = *((Quaternion *)(argp2));
		}
	}
	(arg1)->setOrientation(arg2);
	jsresult = SWIGV8_UNDEFINED();


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_INode_setScale(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::INode *arg1 = (Ape::INode *) 0;
	Vector3 arg2;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_INode_setScale.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__INode, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_setScale" "', argument " "1"" of type '" "Ape::INode *""'");
	}
	arg1 = (Ape::INode *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Vector3, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "INode_setScale" "', argument " "2"" of type '" "Vector3""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "INode_setScale" "', argument " "2"" of type '" "Vector3""'");
		}
		else {
			arg2 = *((Vector3 *)(argp2));
		}
	}
	(arg1)->setScale(arg2);
	jsresult = SWIGV8_UNDEFINED();


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_INode_translate(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::INode *arg1 = (Ape::INode *) 0;
	Vector3 arg2;
	Ape::Node::TransformationSpace arg3;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;
	int val3;
	int ecode3 = 0;

	if (args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_INode_translate.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__INode, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_translate" "', argument " "1"" of type '" "Ape::INode *""'");
	}
	arg1 = (Ape::INode *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Vector3, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "INode_translate" "', argument " "2"" of type '" "Vector3""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "INode_translate" "', argument " "2"" of type '" "Vector3""'");
		}
		else {
			arg2 = *((Vector3 *)(argp2));
		}
	}
	ecode3 = SWIG_AsVal_int(args[1], &val3);
	if (!SWIG_IsOK(ecode3)) {
		SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "INode_translate" "', argument " "3"" of type '" "Ape::Node::TransformationSpace""'");
	}
	arg3 = (Ape::Node::TransformationSpace)(val3);
	(arg1)->translate(arg2, arg3);
	jsresult = SWIGV8_UNDEFINED();



	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_INode_rotate(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::INode *arg1 = (Ape::INode *) 0;
	Radian arg2;
	Vector3 arg3;
	Ape::Node::TransformationSpace arg4;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;
	void *argp3;
	int res3 = 0;
	int val4;
	int ecode4 = 0;

	if (args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_INode_rotate.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__INode, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_rotate" "', argument " "1"" of type '" "Ape::INode *""'");
	}
	arg1 = (Ape::INode *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Radian, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "INode_rotate" "', argument " "2"" of type '" "Radian""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "INode_rotate" "', argument " "2"" of type '" "Radian""'");
		}
		else {
			arg2 = *((Radian *)(argp2));
		}
	}
	{
		res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_Vector3, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "INode_rotate" "', argument " "3"" of type '" "Vector3""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "INode_rotate" "', argument " "3"" of type '" "Vector3""'");
		}
		else {
			arg3 = *((Vector3 *)(argp3));
		}
	}
	ecode4 = SWIG_AsVal_int(args[2], &val4);
	if (!SWIG_IsOK(ecode4)) {
		SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "INode_rotate" "', argument " "4"" of type '" "Ape::Node::TransformationSpace""'");
	}
	arg4 = (Ape::Node::TransformationSpace)(val4);
	(arg1)->rotate(arg2, arg3, arg4);
	jsresult = SWIGV8_UNDEFINED();



	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_INode(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	SWIG_exception(SWIG_ERROR, "Class INode can not be instantiated");
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IFileGeometry_setFileName(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::IFileGeometry *arg1 = (Ape::IFileGeometry *) 0;
	std::string arg2;
	void *argp1 = 0;
	int res1 = 0;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IFileGeometry_setFileName.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__IFileGeometry, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IFileGeometry_setFileName" "', argument " "1"" of type '" "Ape::IFileGeometry *""'");
	}
	arg1 = (Ape::IFileGeometry *)(argp1);
	{
		std::string *ptr = (std::string *)0;
		int res = SWIG_AsPtr_std_string(args[0], &ptr);
		if (!SWIG_IsOK(res) || !ptr) {
			SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "IFileGeometry_setFileName" "', argument " "2"" of type '" "std::string""'");
		}
		arg2 = *ptr;
		if (SWIG_IsNewObj(res)) delete ptr;
	}
	(arg1)->setFileName(arg2);
	jsresult = SWIGV8_UNDEFINED();



	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IFileGeometry_getfFileName(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::IFileGeometry *arg1 = (Ape::IFileGeometry *) 0;
	void *argp1 = 0;
	int res1 = 0;
	std::string result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IFileGeometry_getfFileName.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__IFileGeometry, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IFileGeometry_getfFileName" "', argument " "1"" of type '" "Ape::IFileGeometry *""'");
	}
	arg1 = (Ape::IFileGeometry *)(argp1);
	result = (arg1)->getfFileName();
	jsresult = SWIG_From_std_string((std::string)(result));


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_IFileGeometry(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	SWIG_exception(SWIG_ERROR, "Class IFileGeometry can not be instantiated");
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Material_getDiffuseColor(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Material *arg1 = (Ape::Material *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::Color result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Material_getDiffuseColor.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Material, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_getDiffuseColor" "', argument " "1"" of type '" "Ape::Material *""'");
	}
	arg1 = (Ape::Material *)(argp1);
	result = (arg1)->getDiffuseColor();
	jsresult = SWIG_NewPointerObj((new Ape::Color((const Ape::Color&)(result))), SWIGTYPE_p_Ape__Color, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Material_getSpecularColor(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Material *arg1 = (Ape::Material *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::Color result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Material_getSpecularColor.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Material, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_getSpecularColor" "', argument " "1"" of type '" "Ape::Material *""'");
	}
	arg1 = (Ape::Material *)(argp1);
	result = (arg1)->getSpecularColor();
	jsresult = SWIG_NewPointerObj((new Ape::Color((const Ape::Color&)(result))), SWIGTYPE_p_Ape__Color, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Material_getAmbientColor(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Material *arg1 = (Ape::Material *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::Color result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Material_getAmbientColor.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Material, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_getAmbientColor" "', argument " "1"" of type '" "Ape::Material *""'");
	}
	arg1 = (Ape::Material *)(argp1);
	result = (arg1)->getAmbientColor();
	jsresult = SWIG_NewPointerObj((new Ape::Color((const Ape::Color&)(result))), SWIGTYPE_p_Ape__Color, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Material_getEmissiveColor(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Material *arg1 = (Ape::Material *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::Color result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Material_getEmissiveColor.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Material, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_getEmissiveColor" "', argument " "1"" of type '" "Ape::Material *""'");
	}
	arg1 = (Ape::Material *)(argp1);
	result = (arg1)->getEmissiveColor();
	jsresult = SWIG_NewPointerObj((new Ape::Color((const Ape::Color&)(result))), SWIGTYPE_p_Ape__Color, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Material_getShininess(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Material *arg1 = (Ape::Material *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Material_getShininess.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Material, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_getShininess" "', argument " "1"" of type '" "Ape::Material *""'");
	}
	arg1 = (Ape::Material *)(argp1);
	result = (float)(arg1)->getShininess();
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Material_getSceneBlend(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Material *arg1 = (Ape::Material *) 0;
	void *argp1 = 0;
	int res1 = 0;
	bool result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Material_getSceneBlend.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Material, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_getSceneBlend" "', argument " "1"" of type '" "Ape::Material *""'");
	}
	arg1 = (Ape::Material *)(argp1);
	result = (bool)(arg1)->getSceneBlend();
	jsresult = SWIG_From_bool((bool)(result));


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Material_getTextures(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Material *arg1 = (Ape::Material *) 0;
	void *argp1 = 0;
	int res1 = 0;
	SwigValueWrapper< std::map< Texture::Type, std::weak_ptr< Ape::Entity > > > result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Material_getTextures.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Material, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_getTextures" "', argument " "1"" of type '" "Ape::Material *""'");
	}
	arg1 = (Ape::Material *)(argp1);
	result = (arg1)->getTextures();
	jsresult = SWIG_NewPointerObj((new Ape::Textures((const Ape::Textures&)(result))), SWIGTYPE_p_std__mapT_Texture__Type_std__weak_ptrT_Ape__Entity_t_t, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_Material(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	SWIG_exception(SWIG_ERROR, "Class Material can not be instantiated");
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_Quaternion_w_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::Quaternion *arg1 = (Ape::Quaternion *) 0;
	float arg2;
	void *argp1 = 0;
	int res1 = 0;
	float val2;
	int ecode2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Quaternion, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_w_set" "', argument " "1"" of type '" "Ape::Quaternion *""'");
	}
	arg1 = (Ape::Quaternion *)(argp1);
	ecode2 = SWIG_AsVal_float(value, &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quaternion_w_set" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	if (arg1) (arg1)->w = arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_Quaternion_w_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Quaternion *arg1 = (Ape::Quaternion *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Quaternion, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_w_get" "', argument " "1"" of type '" "Ape::Quaternion *""'");
	}
	arg1 = (Ape::Quaternion *)(argp1);
	result = (float)((arg1)->w);
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_Quaternion_x_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::Quaternion *arg1 = (Ape::Quaternion *) 0;
	float arg2;
	void *argp1 = 0;
	int res1 = 0;
	float val2;
	int ecode2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Quaternion, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_x_set" "', argument " "1"" of type '" "Ape::Quaternion *""'");
	}
	arg1 = (Ape::Quaternion *)(argp1);
	ecode2 = SWIG_AsVal_float(value, &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quaternion_x_set" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	if (arg1) (arg1)->x = arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_Quaternion_x_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Quaternion *arg1 = (Ape::Quaternion *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Quaternion, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_x_get" "', argument " "1"" of type '" "Ape::Quaternion *""'");
	}
	arg1 = (Ape::Quaternion *)(argp1);
	result = (float)((arg1)->x);
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_Quaternion_y_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::Quaternion *arg1 = (Ape::Quaternion *) 0;
	float arg2;
	void *argp1 = 0;
	int res1 = 0;
	float val2;
	int ecode2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Quaternion, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_y_set" "', argument " "1"" of type '" "Ape::Quaternion *""'");
	}
	arg1 = (Ape::Quaternion *)(argp1);
	ecode2 = SWIG_AsVal_float(value, &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quaternion_y_set" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	if (arg1) (arg1)->y = arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_Quaternion_y_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Quaternion *arg1 = (Ape::Quaternion *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Quaternion, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_y_get" "', argument " "1"" of type '" "Ape::Quaternion *""'");
	}
	arg1 = (Ape::Quaternion *)(argp1);
	result = (float)((arg1)->y);
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_Quaternion_z_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::Quaternion *arg1 = (Ape::Quaternion *) 0;
	float arg2;
	void *argp1 = 0;
	int res1 = 0;
	float val2;
	int ecode2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Quaternion, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_z_set" "', argument " "1"" of type '" "Ape::Quaternion *""'");
	}
	arg1 = (Ape::Quaternion *)(argp1);
	ecode2 = SWIG_AsVal_float(value, &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quaternion_z_set" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	if (arg1) (arg1)->z = arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_Quaternion_z_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Quaternion *arg1 = (Ape::Quaternion *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Quaternion, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_z_get" "', argument " "1"" of type '" "Ape::Quaternion *""'");
	}
	arg1 = (Ape::Quaternion *)(argp1);
	result = (float)((arg1)->z);
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_Quaternion__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	Ape::Quaternion *result;
	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Quaternion__SWIG_0.");
	result = (Ape::Quaternion *)new Ape::Quaternion();



	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__Quaternion, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Quaternion__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	float arg1;
	float arg2;
	float arg3;
	float arg4;
	float val1;
	int ecode1 = 0;
	float val2;
	int ecode2 = 0;
	float val3;
	int ecode3 = 0;
	float val4;
	int ecode4 = 0;
	Ape::Quaternion *result;
	if (args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Quaternion__SWIG_1.");
	ecode1 = SWIG_AsVal_float(args[0], &val1);
	if (!SWIG_IsOK(ecode1)) {
		SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Quaternion" "', argument " "1"" of type '" "float""'");
	}
	arg1 = (float)(val1);
	ecode2 = SWIG_AsVal_float(args[1], &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Quaternion" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	ecode3 = SWIG_AsVal_float(args[2], &val3);
	if (!SWIG_IsOK(ecode3)) {
		SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Quaternion" "', argument " "3"" of type '" "float""'");
	}
	arg3 = (float)(val3);
	ecode4 = SWIG_AsVal_float(args[3], &val4);
	if (!SWIG_IsOK(ecode4)) {
		SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Quaternion" "', argument " "4"" of type '" "float""'");
	}
	arg4 = (float)(val4);
	result = (Ape::Quaternion *)new Ape::Quaternion(arg1, arg2, arg3, arg4);







	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__Quaternion, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Quaternion__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	Ape::Degree *arg1 = 0;
	Ape::Vector3 *arg2 = 0;
	void *argp1;
	int res1 = 0;
	void *argp2;
	int res2 = 0;
	Ape::Quaternion *result;
	if (args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Quaternion__SWIG_2.");
	res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Ape__Degree, 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Quaternion" "', argument " "1"" of type '" "Ape::Degree const &""'");
	}
	if (!argp1) {
		SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Quaternion" "', argument " "1"" of type '" "Ape::Degree const &""'");
	}
	arg1 = (Ape::Degree *)(argp1);
	res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_Ape__Vector3, 0);
	if (!SWIG_IsOK(res2)) {
		SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Quaternion" "', argument " "2"" of type '" "Ape::Vector3 const &""'");
	}
	if (!argp2) {
		SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Quaternion" "', argument " "2"" of type '" "Ape::Vector3 const &""'");
	}
	arg2 = (Ape::Vector3 *)(argp2);
	result = (Ape::Quaternion *)new Ape::Quaternion((Ape::Degree const &)*arg1, (Ape::Vector3 const &)*arg2);





	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__Quaternion, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Quaternion__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	Ape::Radian *arg1 = 0;
	Ape::Vector3 *arg2 = 0;
	void *argp1;
	int res1 = 0;
	void *argp2;
	int res2 = 0;
	Ape::Quaternion *result;
	if (args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Quaternion__SWIG_3.");
	res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Ape__Radian, 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Quaternion" "', argument " "1"" of type '" "Ape::Radian const &""'");
	}
	if (!argp1) {
		SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Quaternion" "', argument " "1"" of type '" "Ape::Radian const &""'");
	}
	arg1 = (Ape::Radian *)(argp1);
	res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_Ape__Vector3, 0);
	if (!SWIG_IsOK(res2)) {
		SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Quaternion" "', argument " "2"" of type '" "Ape::Vector3 const &""'");
	}
	if (!argp2) {
		SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Quaternion" "', argument " "2"" of type '" "Ape::Vector3 const &""'");
	}
	arg2 = (Ape::Vector3 *)(argp2);
	result = (Ape::Quaternion *)new Ape::Quaternion((Ape::Radian const &)*arg1, (Ape::Vector3 const &)*arg2);





	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__Quaternion, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Quaternion(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	OverloadErrorHandler errorHandler;
	v8::Handle<v8::Value> self;

	// switch all cases by means of series of if-returns.

	if (args.Length() == 0) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_Quaternion__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_Quaternion__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}

	if (args.Length() == 4) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_Quaternion__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_Quaternion__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}

	if (args.Length() == 2) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_Quaternion__SWIG_2(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_Quaternion__SWIG_2(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}

	if (args.Length() == 2) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_Quaternion__SWIG_3(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_Quaternion__SWIG_3(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}


	// default:
	SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Quaternion");

fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Quaternion_FromAngleAxis__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Quaternion *arg1 = (Ape::Quaternion *) 0;
	Ape::Radian arg2;
	Ape::Vector3 *arg3 = 0;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;
	void *argp3;
	int res3 = 0;

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Quaternion, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_FromAngleAxis" "', argument " "1"" of type '" "Ape::Quaternion *""'");
	}
	arg1 = (Ape::Quaternion *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Ape__Radian, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion_FromAngleAxis" "', argument " "2"" of type '" "Ape::Radian""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_FromAngleAxis" "', argument " "2"" of type '" "Ape::Radian""'");
		}
		else {
			arg2 = *((Ape::Radian *)(argp2));
		}
	}
	res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_Ape__Vector3, 0);
	if (!SWIG_IsOK(res3)) {
		SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Quaternion_FromAngleAxis" "', argument " "3"" of type '" "Ape::Vector3 const &""'");
	}
	if (!argp3) {
		SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_FromAngleAxis" "', argument " "3"" of type '" "Ape::Vector3 const &""'");
	}
	arg3 = (Ape::Vector3 *)(argp3);
	(arg1)->FromAngleAxis(arg2, (Ape::Vector3 const &)*arg3);
	jsresult = SWIGV8_UNDEFINED();



	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Quaternion_FromAngleAxis__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Quaternion *arg1 = (Ape::Quaternion *) 0;
	Ape::Degree arg2;
	Ape::Vector3 *arg3 = 0;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;
	void *argp3;
	int res3 = 0;

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Quaternion, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_FromAngleAxis" "', argument " "1"" of type '" "Ape::Quaternion *""'");
	}
	arg1 = (Ape::Quaternion *)(argp1);
	{
		res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Ape__Degree, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion_FromAngleAxis" "', argument " "2"" of type '" "Ape::Degree""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_FromAngleAxis" "', argument " "2"" of type '" "Ape::Degree""'");
		}
		else {
			arg2 = *((Ape::Degree *)(argp2));
		}
	}
	res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_Ape__Vector3, 0);
	if (!SWIG_IsOK(res3)) {
		SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Quaternion_FromAngleAxis" "', argument " "3"" of type '" "Ape::Vector3 const &""'");
	}
	if (!argp3) {
		SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_FromAngleAxis" "', argument " "3"" of type '" "Ape::Vector3 const &""'");
	}
	arg3 = (Ape::Vector3 *)(argp3);
	(arg1)->FromAngleAxis(arg2, (Ape::Vector3 const &)*arg3);
	jsresult = SWIGV8_UNDEFINED();



	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Quaternion__wrap_Quaternion_FromAngleAxis(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	OverloadErrorHandler errorHandler;


	if (args.Length() == 2) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		jsresult = _wrap_Quaternion_FromAngleAxis__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(jsresult);
		}
#else
		_wrap_Quaternion_FromAngleAxis__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}


	if (args.Length() == 2) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		jsresult = _wrap_Quaternion_FromAngleAxis__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(jsresult);
		}
#else
		_wrap_Quaternion_FromAngleAxis__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}


	SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function FromAngleAxis.");

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Quaternion_equals(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Quaternion *arg1 = (Ape::Quaternion *) 0;
	Ape::Quaternion *arg2 = 0;
	Ape::Radian arg3;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;
	void *argp3;
	int res3 = 0;
	bool result;

	if (args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Quaternion_equals.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Quaternion, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_equals" "', argument " "1"" of type '" "Ape::Quaternion *""'");
	}
	arg1 = (Ape::Quaternion *)(argp1);
	res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Ape__Quaternion, 0);
	if (!SWIG_IsOK(res2)) {
		SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion_equals" "', argument " "2"" of type '" "Ape::Quaternion const &""'");
	}
	if (!argp2) {
		SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_equals" "', argument " "2"" of type '" "Ape::Quaternion const &""'");
	}
	arg2 = (Ape::Quaternion *)(argp2);
	{
		res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_Ape__Radian, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Quaternion_equals" "', argument " "3"" of type '" "Ape::Radian""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_equals" "', argument " "3"" of type '" "Ape::Radian""'");
		}
		else {
			arg3 = *((Ape::Radian *)(argp3));
		}
	}
	result = (bool)(arg1)->equals((Ape::Quaternion const &)*arg2, arg3);
	jsresult = SWIG_From_bool((bool)(result));



	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Quaternion_Norm(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Quaternion *arg1 = (Ape::Quaternion *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Quaternion_Norm.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Quaternion, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_Norm" "', argument " "1"" of type '" "Ape::Quaternion const *""'");
	}
	arg1 = (Ape::Quaternion *)(argp1);
	result = (float)((Ape::Quaternion const *)arg1)->Norm();
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Quaternion_normalise(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Quaternion *arg1 = (Ape::Quaternion *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Quaternion_normalise.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Quaternion, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_normalise" "', argument " "1"" of type '" "Ape::Quaternion *""'");
	}
	arg1 = (Ape::Quaternion *)(argp1);
	result = (float)(arg1)->normalise();
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Quaternion_Inverse(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Quaternion *arg1 = (Ape::Quaternion *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::Quaternion result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Quaternion_Inverse.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Quaternion, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_Inverse" "', argument " "1"" of type '" "Ape::Quaternion const *""'");
	}
	arg1 = (Ape::Quaternion *)(argp1);
	result = ((Ape::Quaternion const *)arg1)->Inverse();
	jsresult = SWIG_NewPointerObj((new Ape::Quaternion((const Ape::Quaternion&)(result))), SWIGTYPE_p_Ape__Quaternion, SWIG_POINTER_OWN | 0);


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Quaternion_toString(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Quaternion *arg1 = (Ape::Quaternion *) 0;
	void *argp1 = 0;
	int res1 = 0;
	std::string result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Quaternion_toString.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Quaternion, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_toString" "', argument " "1"" of type '" "Ape::Quaternion const *""'");
	}
	arg1 = (Ape::Quaternion *)(argp1);
	result = ((Ape::Quaternion const *)arg1)->toString();
	jsresult = SWIG_From_std_string((std::string)(result));


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Quaternion_Dot(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Quaternion *arg1 = (Ape::Quaternion *) 0;
	Ape::Quaternion *arg2 = 0;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;
	float result;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Quaternion_Dot.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Quaternion, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_Dot" "', argument " "1"" of type '" "Ape::Quaternion const *""'");
	}
	arg1 = (Ape::Quaternion *)(argp1);
	res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Ape__Quaternion, 0);
	if (!SWIG_IsOK(res2)) {
		SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion_Dot" "', argument " "2"" of type '" "Ape::Quaternion const &""'");
	}
	if (!argp2) {
		SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_Dot" "', argument " "2"" of type '" "Ape::Quaternion const &""'");
	}
	arg2 = (Ape::Quaternion *)(argp2);
	result = (float)((Ape::Quaternion const *)arg1)->Dot((Ape::Quaternion const &)*arg2);
	jsresult = SWIG_From_float((float)(result));



	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Quaternion_Slerp(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	float arg1;
	Ape::Quaternion *arg2 = 0;
	Ape::Quaternion *arg3 = 0;
	bool arg4;
	float val1;
	int ecode1 = 0;
	void *argp2;
	int res2 = 0;
	void *argp3;
	int res3 = 0;
	bool val4;
	int ecode4 = 0;
	Ape::Quaternion result;

	if (args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Quaternion_Slerp.");

	ecode1 = SWIG_AsVal_float(args[0], &val1);
	if (!SWIG_IsOK(ecode1)) {
		SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Quaternion_Slerp" "', argument " "1"" of type '" "float""'");
	}
	arg1 = (float)(val1);
	res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_Ape__Quaternion, 0);
	if (!SWIG_IsOK(res2)) {
		SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion_Slerp" "', argument " "2"" of type '" "Ape::Quaternion const &""'");
	}
	if (!argp2) {
		SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_Slerp" "', argument " "2"" of type '" "Ape::Quaternion const &""'");
	}
	arg2 = (Ape::Quaternion *)(argp2);
	res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_Ape__Quaternion, 0);
	if (!SWIG_IsOK(res3)) {
		SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Quaternion_Slerp" "', argument " "3"" of type '" "Ape::Quaternion const &""'");
	}
	if (!argp3) {
		SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_Slerp" "', argument " "3"" of type '" "Ape::Quaternion const &""'");
	}
	arg3 = (Ape::Quaternion *)(argp3);
	ecode4 = SWIG_AsVal_bool(args[3], &val4);
	if (!SWIG_IsOK(ecode4)) {
		SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Quaternion_Slerp" "', argument " "4"" of type '" "bool""'");
	}
	arg4 = (bool)(val4);
	result = Ape::Quaternion::Slerp(arg1, (Ape::Quaternion const &)*arg2, (Ape::Quaternion const &)*arg3, arg4);
	jsresult = SWIG_NewPointerObj((new Ape::Quaternion((const Ape::Quaternion&)(result))), SWIGTYPE_p_Ape__Quaternion, SWIG_POINTER_OWN | 0);





	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Quaternion(v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
static void _wrap_delete_Quaternion(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
static void _wrap_delete_Quaternion(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
static void _wrap_delete_Quaternion(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
	v8::Local<v8::Object> object = data.GetValue();
	SWIGV8_Proxy *proxy = data.GetParameter();
#endif

	if (proxy->swigCMemOwn && proxy->swigCObject) {
		Ape::Quaternion * arg1 = (Ape::Quaternion *)proxy->swigCObject;
		delete arg1;
	}
	delete proxy;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
	object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
	object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
	object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
	object->Dispose();
#else
	object.Clear();
#endif
}


static void _wrap_Radian_m_rad_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::Radian *arg1 = (Ape::Radian *) 0;
	float arg2;
	void *argp1 = 0;
	int res1 = 0;
	float val2;
	int ecode2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Radian, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Radian_m_rad_set" "', argument " "1"" of type '" "Ape::Radian *""'");
	}
	arg1 = (Ape::Radian *)(argp1);
	ecode2 = SWIG_AsVal_float(value, &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Radian_m_rad_set" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	if (arg1) (arg1)->radian = arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_Radian_m_rad_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Radian *arg1 = (Ape::Radian *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Radian, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Radian_m_rad_get" "', argument " "1"" of type '" "Ape::Radian *""'");
	}
	arg1 = (Ape::Radian *)(argp1);
	result = (float)((arg1)->radian);
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_Radian__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	Ape::Radian *result;
	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Radian__SWIG_0.");
	result = (Ape::Radian *)new Ape::Radian();



	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__Radian, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Radian__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	float arg1;
	float val1;
	int ecode1 = 0;
	Ape::Radian *result;
	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Radian__SWIG_1.");
	ecode1 = SWIG_AsVal_float(args[0], &val1);
	if (!SWIG_IsOK(ecode1)) {
		SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Radian" "', argument " "1"" of type '" "float""'");
	}
	arg1 = (float)(val1);
	result = (Ape::Radian *)new Ape::Radian(arg1);




	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__Radian, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Radian(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	OverloadErrorHandler errorHandler;
	v8::Handle<v8::Value> self;

	// switch all cases by means of series of if-returns.

	if (args.Length() == 0) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_Radian__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_Radian__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}

	if (args.Length() == 1) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_Radian__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_Radian__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}


	// default:
	SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Radian");

fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Radian_toDegree(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Radian *arg1 = (Ape::Radian *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Radian_toDegree.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Radian, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Radian_toDegree" "', argument " "1"" of type '" "Ape::Radian const *""'");
	}
	arg1 = (Ape::Radian *)(argp1);
	result = (float)((Ape::Radian const *)arg1)->toDegree();
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Radian(v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
static void _wrap_delete_Radian(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
static void _wrap_delete_Radian(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
static void _wrap_delete_Radian(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
	v8::Local<v8::Object> object = data.GetValue();
	SWIGV8_Proxy *proxy = data.GetParameter();
#endif

	if (proxy->swigCMemOwn && proxy->swigCObject) {
		Ape::Radian * arg1 = (Ape::Radian *)proxy->swigCObject;
		delete arg1;
	}
	delete proxy;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
	object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
	object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
	object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
	object->Dispose();
#else
	object.Clear();
#endif
}


static SwigV8ReturnValue _wrap_Ape_Texture_NORMAL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Texture::NORMAL));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Texture_DIFFUSE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Texture::DIFFUSE));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Texture_SPECULAR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Texture::SPECULAR));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Ape_Texture_INVALID(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;

	jsresult = SWIG_From_int((int)(Ape::Texture::INVALID));

	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_ITexture_setFileName(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::ITexture *arg1 = (Ape::ITexture *) 0;
	std::string arg2;
	void *argp1 = 0;
	int res1 = 0;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ITexture_setFileName.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__ITexture, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ITexture_setFileName" "', argument " "1"" of type '" "Ape::ITexture *""'");
	}
	arg1 = (Ape::ITexture *)(argp1);
	{
		std::string *ptr = (std::string *)0;
		int res = SWIG_AsPtr_std_string(args[0], &ptr);
		if (!SWIG_IsOK(res) || !ptr) {
			SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ITexture_setFileName" "', argument " "2"" of type '" "std::string""'");
		}
		arg2 = *ptr;
		if (SWIG_IsNewObj(res)) delete ptr;
	}
	(arg1)->setFileName(arg2);
	jsresult = SWIGV8_UNDEFINED();



	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ITexture_getFileName(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::ITexture *arg1 = (Ape::ITexture *) 0;
	void *argp1 = 0;
	int res1 = 0;
	std::string result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ITexture_getFileName.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__ITexture, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ITexture_getFileName" "', argument " "1"" of type '" "Ape::ITexture *""'");
	}
	arg1 = (Ape::ITexture *)(argp1);
	result = (arg1)->getFileName();
	jsresult = SWIG_From_std_string((std::string)(result));


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ITexture_setTextureType(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::ITexture *arg1 = (Ape::ITexture *) 0;
	Ape::Texture::Type arg2;
	void *argp1 = 0;
	int res1 = 0;
	int val2;
	int ecode2 = 0;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ITexture_setTextureType.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__ITexture, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ITexture_setTextureType" "', argument " "1"" of type '" "Ape::ITexture *""'");
	}
	arg1 = (Ape::ITexture *)(argp1);
	ecode2 = SWIG_AsVal_int(args[0], &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ITexture_setTextureType" "', argument " "2"" of type '" "Ape::Texture::Type""'");
	}
	arg2 = (Ape::Texture::Type)(val2);
	(arg1)->setTextureType(arg2);
	jsresult = SWIGV8_UNDEFINED();



	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ITexture_getTextureType(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::ITexture *arg1 = (Ape::ITexture *) 0;
	void *argp1 = 0;
	int res1 = 0;
	Ape::Texture::Type result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ITexture_getTextureType.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__ITexture, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ITexture_getTextureType" "', argument " "1"" of type '" "Ape::ITexture *""'");
	}
	arg1 = (Ape::ITexture *)(argp1);
	result = (Ape::Texture::Type)(arg1)->getTextureType();
	jsresult = SWIG_From_int((int)(result));


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_ITexture(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	SWIG_exception(SWIG_ERROR, "Class ITexture can not be instantiated");
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_Vector2_x_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::Vector2 *arg1 = (Ape::Vector2 *) 0;
	float arg2;
	void *argp1 = 0;
	int res1 = 0;
	float val2;
	int ecode2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Vector2, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector2_x_set" "', argument " "1"" of type '" "Ape::Vector2 *""'");
	}
	arg1 = (Ape::Vector2 *)(argp1);
	ecode2 = SWIG_AsVal_float(value, &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector2_x_set" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	if (arg1) (arg1)->x = arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_Vector2_x_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Vector2 *arg1 = (Ape::Vector2 *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Vector2, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector2_x_get" "', argument " "1"" of type '" "Ape::Vector2 *""'");
	}
	arg1 = (Ape::Vector2 *)(argp1);
	result = (float)((arg1)->x);
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_Vector2_y_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::Vector2 *arg1 = (Ape::Vector2 *) 0;
	float arg2;
	void *argp1 = 0;
	int res1 = 0;
	float val2;
	int ecode2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Vector2, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector2_y_set" "', argument " "1"" of type '" "Ape::Vector2 *""'");
	}
	arg1 = (Ape::Vector2 *)(argp1);
	ecode2 = SWIG_AsVal_float(value, &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector2_y_set" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	if (arg1) (arg1)->y = arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_Vector2_y_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Vector2 *arg1 = (Ape::Vector2 *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Vector2, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector2_y_get" "', argument " "1"" of type '" "Ape::Vector2 *""'");
	}
	arg1 = (Ape::Vector2 *)(argp1);
	result = (float)((arg1)->y);
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_Vector2__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	Ape::Vector2 *result;
	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Vector2__SWIG_0.");
	result = (Ape::Vector2 *)new Ape::Vector2();



	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__Vector2, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Vector2__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	float arg1;
	float arg2;
	float val1;
	int ecode1 = 0;
	float val2;
	int ecode2 = 0;
	Ape::Vector2 *result;
	if (args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Vector2__SWIG_1.");
	ecode1 = SWIG_AsVal_float(args[0], &val1);
	if (!SWIG_IsOK(ecode1)) {
		SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vector2" "', argument " "1"" of type '" "float""'");
	}
	arg1 = (float)(val1);
	ecode2 = SWIG_AsVal_float(args[1], &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vector2" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	result = (Ape::Vector2 *)new Ape::Vector2(arg1, arg2);





	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__Vector2, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Vector2(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	OverloadErrorHandler errorHandler;
	v8::Handle<v8::Value> self;

	// switch all cases by means of series of if-returns.

	if (args.Length() == 0) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_Vector2__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_Vector2__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}

	if (args.Length() == 2) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_Vector2__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_Vector2__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}


	// default:
	SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Vector2");

fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Vector2(v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
static void _wrap_delete_Vector2(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
static void _wrap_delete_Vector2(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
static void _wrap_delete_Vector2(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
	v8::Local<v8::Object> object = data.GetValue();
	SWIGV8_Proxy *proxy = data.GetParameter();
#endif

	if (proxy->swigCMemOwn && proxy->swigCObject) {
		Ape::Vector2 * arg1 = (Ape::Vector2 *)proxy->swigCObject;
		delete arg1;
	}
	delete proxy;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
	object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
	object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
	object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
	object->Dispose();
#else
	object.Clear();
#endif
}


static void _wrap_Vector3_x_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::Vector3 *arg1 = (Ape::Vector3 *) 0;
	float arg2;
	void *argp1 = 0;
	int res1 = 0;
	float val2;
	int ecode2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Vector3, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_x_set" "', argument " "1"" of type '" "Ape::Vector3 *""'");
	}
	arg1 = (Ape::Vector3 *)(argp1);
	ecode2 = SWIG_AsVal_float(value, &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector3_x_set" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	if (arg1) (arg1)->x = arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_Vector3_x_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Vector3 *arg1 = (Ape::Vector3 *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Vector3, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_x_get" "', argument " "1"" of type '" "Ape::Vector3 *""'");
	}
	arg1 = (Ape::Vector3 *)(argp1);
	result = (float)((arg1)->x);
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_Vector3_y_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::Vector3 *arg1 = (Ape::Vector3 *) 0;
	float arg2;
	void *argp1 = 0;
	int res1 = 0;
	float val2;
	int ecode2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Vector3, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_y_set" "', argument " "1"" of type '" "Ape::Vector3 *""'");
	}
	arg1 = (Ape::Vector3 *)(argp1);
	ecode2 = SWIG_AsVal_float(value, &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector3_y_set" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	if (arg1) (arg1)->y = arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_Vector3_y_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Vector3 *arg1 = (Ape::Vector3 *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Vector3, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_y_get" "', argument " "1"" of type '" "Ape::Vector3 *""'");
	}
	arg1 = (Ape::Vector3 *)(argp1);
	result = (float)((arg1)->y);
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_Vector3_z_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::Vector3 *arg1 = (Ape::Vector3 *) 0;
	float arg2;
	void *argp1 = 0;
	int res1 = 0;
	float val2;
	int ecode2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Vector3, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_z_set" "', argument " "1"" of type '" "Ape::Vector3 *""'");
	}
	arg1 = (Ape::Vector3 *)(argp1);
	ecode2 = SWIG_AsVal_float(value, &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector3_z_set" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	if (arg1) (arg1)->z = arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_Vector3_z_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Vector3 *arg1 = (Ape::Vector3 *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Vector3, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_z_get" "', argument " "1"" of type '" "Ape::Vector3 *""'");
	}
	arg1 = (Ape::Vector3 *)(argp1);
	result = (float)((arg1)->z);
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_Vector3__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	Ape::Vector3 *result;
	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Vector3__SWIG_0.");
	result = (Ape::Vector3 *)new Ape::Vector3();



	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__Vector3, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Vector3__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	float arg1;
	float arg2;
	float arg3;
	float val1;
	int ecode1 = 0;
	float val2;
	int ecode2 = 0;
	float val3;
	int ecode3 = 0;
	Ape::Vector3 *result;
	if (args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Vector3__SWIG_1.");
	ecode1 = SWIG_AsVal_float(args[0], &val1);
	if (!SWIG_IsOK(ecode1)) {
		SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vector3" "', argument " "1"" of type '" "float""'");
	}
	arg1 = (float)(val1);
	ecode2 = SWIG_AsVal_float(args[1], &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vector3" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	ecode3 = SWIG_AsVal_float(args[2], &val3);
	if (!SWIG_IsOK(ecode3)) {
		SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Vector3" "', argument " "3"" of type '" "float""'");
	}
	arg3 = (float)(val3);
	result = (Ape::Vector3 *)new Ape::Vector3(arg1, arg2, arg3);






	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__Vector3, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Vector3__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	float arg1;
	float val1;
	int ecode1 = 0;
	Ape::Vector3 *result;
	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Vector3__SWIG_2.");
	ecode1 = SWIG_AsVal_float(args[0], &val1);
	if (!SWIG_IsOK(ecode1)) {
		SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vector3" "', argument " "1"" of type '" "float""'");
	}
	arg1 = (float)(val1);
	result = (Ape::Vector3 *)new Ape::Vector3(arg1);




	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__Vector3, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Vector3(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	OverloadErrorHandler errorHandler;
	v8::Handle<v8::Value> self;

	// switch all cases by means of series of if-returns.

	if (args.Length() == 0) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_Vector3__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_Vector3__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}

	if (args.Length() == 3) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_Vector3__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_Vector3__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}

	if (args.Length() == 1) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_Vector3__SWIG_2(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_Vector3__SWIG_2(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}


	// default:
	SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Vector3");

fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Vector3_squaredLength(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Vector3 *arg1 = (Ape::Vector3 *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Vector3_squaredLength.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Vector3, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_squaredLength" "', argument " "1"" of type '" "Ape::Vector3 const *""'");
	}
	arg1 = (Ape::Vector3 *)(argp1);
	result = (float)((Ape::Vector3 const *)arg1)->squaredLength();
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Vector3_crossProduct(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Vector3 *arg1 = (Ape::Vector3 *) 0;
	Ape::Vector3 *arg2 = 0;
	void *argp1 = 0;
	int res1 = 0;
	void *argp2;
	int res2 = 0;
	Ape::Vector3 result;

	if (args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Vector3_crossProduct.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Vector3, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_crossProduct" "', argument " "1"" of type '" "Ape::Vector3 const *""'");
	}
	arg1 = (Ape::Vector3 *)(argp1);
	res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_Ape__Vector3, 0);
	if (!SWIG_IsOK(res2)) {
		SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector3_crossProduct" "', argument " "2"" of type '" "Ape::Vector3 const &""'");
	}
	if (!argp2) {
		SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector3_crossProduct" "', argument " "2"" of type '" "Ape::Vector3 const &""'");
	}
	arg2 = (Ape::Vector3 *)(argp2);
	result = ((Ape::Vector3 const *)arg1)->crossProduct((Ape::Vector3 const &)*arg2);
	jsresult = SWIG_NewPointerObj((new Ape::Vector3((const Ape::Vector3&)(result))), SWIGTYPE_p_Ape__Vector3, SWIG_POINTER_OWN | 0);



	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Vector3_isNaN(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Vector3 *arg1 = (Ape::Vector3 *) 0;
	void *argp1 = 0;
	int res1 = 0;
	bool result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Vector3_isNaN.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Vector3, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_isNaN" "', argument " "1"" of type '" "Ape::Vector3 const *""'");
	}
	arg1 = (Ape::Vector3 *)(argp1);
	result = (bool)((Ape::Vector3 const *)arg1)->isNaN();
	jsresult = SWIG_From_bool((bool)(result));


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Vector3_toString(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Vector3 *arg1 = (Ape::Vector3 *) 0;
	void *argp1 = 0;
	int res1 = 0;
	std::string result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Vector3_toString.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Vector3, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_toString" "', argument " "1"" of type '" "Ape::Vector3 const *""'");
	}
	arg1 = (Ape::Vector3 *)(argp1);
	result = ((Ape::Vector3 const *)arg1)->toString();
	jsresult = SWIG_From_std_string((std::string)(result));


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Vector3_normalise(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Vector3 *arg1 = (Ape::Vector3 *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Vector3_normalise.");

	res1 = SWIG_ConvertPtr(args.Holder(), &argp1, SWIGTYPE_p_Ape__Vector3, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_normalise" "', argument " "1"" of type '" "Ape::Vector3 *""'");
	}
	arg1 = (Ape::Vector3 *)(argp1);
	result = (float)(arg1)->normalise();
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN(jsresult);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Vector3(v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
static void _wrap_delete_Vector3(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
static void _wrap_delete_Vector3(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
static void _wrap_delete_Vector3(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
	v8::Local<v8::Object> object = data.GetValue();
	SWIGV8_Proxy *proxy = data.GetParameter();
#endif

	if (proxy->swigCMemOwn && proxy->swigCObject) {
		Ape::Vector3 * arg1 = (Ape::Vector3 *)proxy->swigCObject;
		delete arg1;
	}
	delete proxy;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
	object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
	object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
	object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
	object->Dispose();
#else
	object.Clear();
#endif
}


static void _wrap_Vector4_x_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::Vector4 *arg1 = (Ape::Vector4 *) 0;
	float arg2;
	void *argp1 = 0;
	int res1 = 0;
	float val2;
	int ecode2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Vector4, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector4_x_set" "', argument " "1"" of type '" "Ape::Vector4 *""'");
	}
	arg1 = (Ape::Vector4 *)(argp1);
	ecode2 = SWIG_AsVal_float(value, &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector4_x_set" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	if (arg1) (arg1)->x = arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_Vector4_x_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Vector4 *arg1 = (Ape::Vector4 *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Vector4, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector4_x_get" "', argument " "1"" of type '" "Ape::Vector4 *""'");
	}
	arg1 = (Ape::Vector4 *)(argp1);
	result = (float)((arg1)->x);
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_Vector4_y_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::Vector4 *arg1 = (Ape::Vector4 *) 0;
	float arg2;
	void *argp1 = 0;
	int res1 = 0;
	float val2;
	int ecode2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Vector4, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector4_y_set" "', argument " "1"" of type '" "Ape::Vector4 *""'");
	}
	arg1 = (Ape::Vector4 *)(argp1);
	ecode2 = SWIG_AsVal_float(value, &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector4_y_set" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	if (arg1) (arg1)->y = arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_Vector4_y_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Vector4 *arg1 = (Ape::Vector4 *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Vector4, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector4_y_get" "', argument " "1"" of type '" "Ape::Vector4 *""'");
	}
	arg1 = (Ape::Vector4 *)(argp1);
	result = (float)((arg1)->y);
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_Vector4_z_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::Vector4 *arg1 = (Ape::Vector4 *) 0;
	float arg2;
	void *argp1 = 0;
	int res1 = 0;
	float val2;
	int ecode2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Vector4, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector4_z_set" "', argument " "1"" of type '" "Ape::Vector4 *""'");
	}
	arg1 = (Ape::Vector4 *)(argp1);
	ecode2 = SWIG_AsVal_float(value, &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector4_z_set" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	if (arg1) (arg1)->z = arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_Vector4_z_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Vector4 *arg1 = (Ape::Vector4 *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Vector4, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector4_z_get" "', argument " "1"" of type '" "Ape::Vector4 *""'");
	}
	arg1 = (Ape::Vector4 *)(argp1);
	result = (float)((arg1)->z);
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_Vector4_w_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
	const SwigV8PropertyCallbackInfoVoid &info) {
	SWIGV8_HANDLESCOPE();

	Ape::Vector4 *arg1 = (Ape::Vector4 *) 0;
	float arg2;
	void *argp1 = 0;
	int res1 = 0;
	float val2;
	int ecode2 = 0;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Vector4, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector4_w_set" "', argument " "1"" of type '" "Ape::Vector4 *""'");
	}
	arg1 = (Ape::Vector4 *)(argp1);
	ecode2 = SWIG_AsVal_float(value, &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector4_w_set" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	if (arg1) (arg1)->w = arg2;



	goto fail;
fail:
	return;
}


static SwigV8ReturnValue _wrap_Vector4_w_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Value> jsresult;
	Ape::Vector4 *arg1 = (Ape::Vector4 *) 0;
	void *argp1 = 0;
	int res1 = 0;
	float result;

	res1 = SWIG_ConvertPtr(info.Holder(), &argp1, SWIGTYPE_p_Ape__Vector4, 0 | 0);
	if (!SWIG_IsOK(res1)) {
		SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector4_w_get" "', argument " "1"" of type '" "Ape::Vector4 *""'");
	}
	arg1 = (Ape::Vector4 *)(argp1);
	result = (float)((arg1)->w);
	jsresult = SWIG_From_float((float)(result));


	SWIGV8_RETURN_INFO(jsresult, info);

	goto fail;
fail:
	SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_Vector4__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	Ape::Vector4 *result;
	if (args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Vector4__SWIG_0.");
	result = (Ape::Vector4 *)new Ape::Vector4();



	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__Vector4, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Vector4__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> self = args.Holder();
	float arg1;
	float arg2;
	float arg3;
	float arg4;
	float val1;
	int ecode1 = 0;
	float val2;
	int ecode2 = 0;
	float val3;
	int ecode3 = 0;
	float val4;
	int ecode4 = 0;
	Ape::Vector4 *result;
	if (args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Vector4__SWIG_1.");
	ecode1 = SWIG_AsVal_float(args[0], &val1);
	if (!SWIG_IsOK(ecode1)) {
		SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vector4" "', argument " "1"" of type '" "float""'");
	}
	arg1 = (float)(val1);
	ecode2 = SWIG_AsVal_float(args[1], &val2);
	if (!SWIG_IsOK(ecode2)) {
		SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vector4" "', argument " "2"" of type '" "float""'");
	}
	arg2 = (float)(val2);
	ecode3 = SWIG_AsVal_float(args[2], &val3);
	if (!SWIG_IsOK(ecode3)) {
		SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Vector4" "', argument " "3"" of type '" "float""'");
	}
	arg3 = (float)(val3);
	ecode4 = SWIG_AsVal_float(args[3], &val4);
	if (!SWIG_IsOK(ecode4)) {
		SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Vector4" "', argument " "4"" of type '" "float""'");
	}
	arg4 = (float)(val4);
	result = (Ape::Vector4 *)new Ape::Vector4(arg1, arg2, arg3, arg4);







	SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Ape__Vector4, SWIG_POINTER_OWN);
	SWIGV8_RETURN(self);

	goto fail;
fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Vector4(const SwigV8Arguments &args) {
	SWIGV8_HANDLESCOPE();

	OverloadErrorHandler errorHandler;
	v8::Handle<v8::Value> self;

	// switch all cases by means of series of if-returns.

	if (args.Length() == 0) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_Vector4__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_Vector4__SWIG_0(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}

	if (args.Length() == 4) {
		errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		self = _wrap_new_Vector4__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			SWIGV8_ESCAPE(self);
		}
#else
		_wrap_new_Vector4__SWIG_1(args, errorHandler);
		if (errorHandler.err.IsEmpty()) {
			return;
		}
#endif
	}


	// default:
	SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Vector4");

fail:
	SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Vector4(v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
static void _wrap_delete_Vector4(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
static void _wrap_delete_Vector4(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
static void _wrap_delete_Vector4(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
	v8::Local<v8::Object> object = data.GetValue();
	SWIGV8_Proxy *proxy = data.GetParameter();
#endif

	if (proxy->swigCMemOwn && proxy->swigCObject) {
		Ape::Vector4 * arg1 = (Ape::Vector4 *)proxy->swigCObject;
		delete arg1;
	}
	delete proxy;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
	object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
	object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
	object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
	object->Dispose();
#else
	object.Clear();
#endif
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_INode(v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
static void _wrap_delete_INode(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
	SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
static void _wrap_delete_INode(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
static void _wrap_delete_INode(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
	v8::Local<v8::Object> object = data.GetValue();
	SWIGV8_Proxy *proxy = data.GetParameter();
#endif

	if (proxy->swigCMemOwn && proxy->swigCObject) {
		Ape::INode * arg1 = (Ape::INode *)proxy->swigCObject;
		Ape::IScene::getSingleton().deleteNode(arg1->getName());
		//delete arg1;
	}
	delete proxy;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
	object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
	object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
	object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
	object->Dispose();
#else
	object.Clear();
#endif
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Ape__ILightTo_p_Ape__Entity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
	return (void *)((Ape::Entity *)  ((Ape::ILight *) x));
}
static void *_p_Ape__GeometryTo_p_Ape__Entity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
	return (void *)((Ape::Entity *)  ((Ape::Geometry *) x));
}
static void *_p_Ape__ITextGeometryTo_p_Ape__Entity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
	return (void *)((Ape::Entity *) (Ape::Geometry *) ((Ape::ITextGeometry *) x));
}
static void *_p_Ape__IManualGeometryTo_p_Ape__Entity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
	return (void *)((Ape::Entity *) (Ape::Geometry *) ((Ape::IManualGeometry *) x));
}
static void *_p_Ape__IFileGeometryTo_p_Ape__Entity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
	return (void *)((Ape::Entity *) (Ape::Geometry *) ((Ape::IFileGeometry *) x));
}
static void *_p_Ape__MaterialTo_p_Ape__Entity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
	return (void *)((Ape::Entity *)  ((Ape::Material *) x));
}
static void *_p_Ape__ITextureTo_p_Ape__Entity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
	return (void *)((Ape::Entity *)  ((Ape::ITexture *) x));
}
static void *_p_Ape__ITextGeometryTo_p_Ape__Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
	return (void *)((Ape::Geometry *)  ((Ape::ITextGeometry *) x));
}
static void *_p_Ape__IManualGeometryTo_p_Ape__Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
	return (void *)((Ape::Geometry *)  ((Ape::IManualGeometry *) x));
}
static void *_p_Ape__IFileGeometryTo_p_Ape__Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
	return (void *)((Ape::Geometry *)  ((Ape::IFileGeometry *) x));
}
static swig_type_info _swigt__p_Ape__Color = { "_p_Ape__Color", "p_Ape__Color|Ape::Color *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_Ape__Degree = { "_p_Ape__Degree", "p_Ape__Degree|Ape::Degree *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_Ape__Entity = { "_p_Ape__Entity", "Ape::Entity *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_Ape__Euler = { "_p_Ape__Euler", "Ape::Euler *|p_Ape__Euler", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_Ape__Event = { "_p_Ape__Event", "Ape::Event *|p_Ape__Event", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_Ape__Geometry = { "_p_Ape__Geometry", "Ape::Geometry *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_Ape__IFileGeometry = { "_p_Ape__IFileGeometry", "p_Ape__IFileGeometry|Ape::IFileGeometry *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_Ape__ILight = { "_p_Ape__ILight", "p_Ape__ILight|Ape::ILight *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_Ape__IManualGeometry = { "_p_Ape__IManualGeometry", "p_Ape__IManualGeometry|Ape::IManualGeometry *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_Ape__INode = { "_p_Ape__INode", "Ape::INode *|p_Ape__INode", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_Ape__ITextGeometry = { "_p_Ape__ITextGeometry", "p_Ape__ITextGeometry|Ape::ITextGeometry *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_Ape__ITexture = { "_p_Ape__ITexture", "Ape::ITexture *|p_Ape__ITexture", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_Ape__LightAttenuation = { "_p_Ape__LightAttenuation", "Ape::LightAttenuation *|p_Ape__LightAttenuation", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_Ape__LightSpotRange = { "_p_Ape__LightSpotRange", "Ape::LightSpotRange *|p_Ape__LightSpotRange", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_Ape__Material = { "_p_Ape__Material", "Ape::Material *|p_Ape__Material", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_Ape__Quaternion = { "_p_Ape__Quaternion", "p_Ape__Quaternion|Ape::Quaternion *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_Ape__Radian = { "_p_Ape__Radian", "p_Ape__Radian|Ape::Radian *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_Ape__SingletonT_IEventManager_t = { "_p_Ape__SingletonT_IEventManager_t", "p_Ape__SingletonT_IEventManager_t", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_Ape__SingletonT_IPluginManager_t = { "_p_Ape__SingletonT_IPluginManager_t", "p_Ape__SingletonT_IPluginManager_t", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_Ape__SingletonT_IScene_t = { "_p_Ape__SingletonT_IScene_t", "p_Ape__SingletonT_IScene_t", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_Ape__Vector2 = { "_p_Ape__Vector2", "Ape::Vector2 *|p_Ape__Vector2", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_Ape__Vector3 = { "_p_Ape__Vector3", "Ape::Vector3 *|p_Ape__Vector3", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_Ape__Vector4 = { "_p_Ape__Vector4", "p_Ape__Vector4|Ape::Vector4 *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_IEventManager = { "_p_IEventManager", "IEventManager *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_IPluginManager = { "_p_IPluginManager", "IPluginManager *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_IScene = { "_p_IScene", "IScene *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_Quaternion = { "_p_Quaternion", "Quaternion *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_Radian = { "_p_Radian", "Radian *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_Vector3 = { "_p_Vector3", "Vector3 *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_Vector3Vector = { "_p_Vector3Vector", "Vector3Vector *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_char = { "_p_char", "char *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_std__mapT_Texture__Type_std__weak_ptrT_Ape__Entity_t_t = { "_p_std__mapT_Texture__Type_std__weak_ptrT_Ape__Entity_t_t", "std::map< Texture::Type,std::weak_ptr< Ape::Entity > > *|Ape::Textures *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_std__mapT_int_std__vectorT_std__weak_ptrT_Ape__Entity_t_t_t = { "_p_std__mapT_int_std__vectorT_std__weak_ptrT_Ape__Entity_t_t_t", "std::map< int,std::vector< std::weak_ptr< Ape::Entity > > > *|Ape::GeometryLodLevelVectorMap *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_std__mapT_std__string_std__shared_ptrT_Ape__Entity_t_t = { "_p_std__mapT_std__string_std__shared_ptrT_Ape__Entity_t_t", "std::map< std::string,std::shared_ptr< Ape::Entity > > *|Ape::EntitySharedPtrNameMap *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_std__mapT_std__string_std__shared_ptrT_Ape__INode_t_t = { "_p_std__mapT_std__string_std__shared_ptrT_Ape__INode_t_t", "NodeSharedPtrNameMap *|Ape::NodeSharedPtrNameMap *|std::map< std::string,std::shared_ptr< Ape::INode > > *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_std__mapT_std__string_std__weak_ptrT_Ape__Entity_t_t = { "_p_std__mapT_std__string_std__weak_ptrT_Ape__Entity_t_t", "std::map< std::string,std::weak_ptr< Ape::Entity > > *|Ape::EntityWeakPtrNameMap *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_std__mapT_std__string_std__weak_ptrT_Ape__INode_t_t = { "_p_std__mapT_std__string_std__weak_ptrT_Ape__INode_t_t", "std::map< std::string,std::weak_ptr< Ape::INode > > *|Ape::NodeWeakPtrNameMap *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_std__shared_ptrT_Ape__Entity_t = { "_p_std__shared_ptrT_Ape__Entity_t", "Ape::EntitySharedPtr *|std::shared_ptr< Ape::Entity > *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_std__shared_ptrT_Ape__INode_t = { "_p_std__shared_ptrT_Ape__INode_t", "NodeSharedPtr *|Ape::NodeSharedPtr *|std::shared_ptr< Ape::INode > *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_std__vectorT_Ape__Color_t = { "_p_std__vectorT_Ape__Color_t", "std::vector< Ape::Color > *|Ape::ColorVector *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_std__vectorT_Ape__Quaternion_t = { "_p_std__vectorT_Ape__Quaternion_t", "std::vector< Ape::Quaternion > *|Ape::QuaternionVector *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_std__vectorT_Ape__Vector2_t = { "_p_std__vectorT_Ape__Vector2_t", "std::vector< Ape::Vector2 > *|Ape::Vector2Vector *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_std__vectorT_Ape__Vector3_t = { "_p_std__vectorT_Ape__Vector3_t", "std::vector< Ape::Vector3 > *|Ape::Vector3Vector *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_std__vectorT_Ape__Vector4_t = { "_p_std__vectorT_Ape__Vector4_t", "std::vector< Ape::Vector4 > *|Ape::Vector4Vector *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_std__vectorT_int_t = { "_p_std__vectorT_int_t", "std::vector< int > *|Ape::IntVector *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_std__vectorT_std__shared_ptrT_Ape__Entity_t_t = { "_p_std__vectorT_std__shared_ptrT_Ape__Entity_t_t", "std::vector< std::shared_ptr< Ape::Entity > > *|Ape::EntitySharedPtrVector *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_std__vectorT_std__shared_ptrT_Ape__INode_t_t = { "_p_std__vectorT_std__shared_ptrT_Ape__INode_t_t", "std::vector< std::shared_ptr< Ape::INode > > *|NodeSharedPtrVector *|Ape::NodeSharedPtrVector *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_std__vectorT_std__weak_ptrT_Ape__Entity_t_t = { "_p_std__vectorT_std__weak_ptrT_Ape__Entity_t_t", "std::vector< std::weak_ptr< Ape::Entity > > *|Ape::EntityWeakPtrVector *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_std__vectorT_std__weak_ptrT_Ape__INode_t_t = { "_p_std__vectorT_std__weak_ptrT_Ape__INode_t_t", "std::vector< std::weak_ptr< Ape::INode > > *|Ape::NodeWeakPtrVector *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_std__weak_ptrT_Ape__Entity_t = { "_p_std__weak_ptrT_Ape__Entity_t", "Ape::EntityWeakPtr *|std::weak_ptr< Ape::Entity > *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_std__weak_ptrT_Ape__Geometry_t = { "_p_std__weak_ptrT_Ape__Geometry_t", "std::weak_ptr< Ape::Geometry > *|Ape::GeometryWeakPtr *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_std__weak_ptrT_Ape__INode_t = { "_p_std__weak_ptrT_Ape__INode_t", "NodeWeakPtr *|Ape::NodeWeakPtr *|std::weak_ptr< Ape::INode > *", 0, 0, (void*)0, 0 };
static swig_type_info _swigt__p_std__weak_ptrT_Ape__Material_t = { "_p_std__weak_ptrT_Ape__Material_t", "Ape::MaterialWeakPtr *|std::weak_ptr< Ape::Material > *", 0, 0, (void*)0, 0 };

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Ape__Color,
  &_swigt__p_Ape__Degree,
  &_swigt__p_Ape__Entity,
  &_swigt__p_Ape__Euler,
  &_swigt__p_Ape__Event,
  &_swigt__p_Ape__Geometry,
  &_swigt__p_Ape__IFileGeometry,
  &_swigt__p_Ape__ILight,
  &_swigt__p_Ape__IManualGeometry,
  &_swigt__p_Ape__INode,
  &_swigt__p_Ape__ITextGeometry,
  &_swigt__p_Ape__ITexture,
  &_swigt__p_Ape__LightAttenuation,
  &_swigt__p_Ape__LightSpotRange,
  &_swigt__p_Ape__Material,
  &_swigt__p_Ape__Quaternion,
  &_swigt__p_Ape__Radian,
  &_swigt__p_Ape__SingletonT_IEventManager_t,
  &_swigt__p_Ape__SingletonT_IPluginManager_t,
  &_swigt__p_Ape__SingletonT_IScene_t,
  &_swigt__p_Ape__Vector2,
  &_swigt__p_Ape__Vector3,
  &_swigt__p_Ape__Vector4,
  &_swigt__p_IEventManager,
  &_swigt__p_IPluginManager,
  &_swigt__p_IScene,
  &_swigt__p_Quaternion,
  &_swigt__p_Radian,
  &_swigt__p_Vector3,
  &_swigt__p_Vector3Vector,
  &_swigt__p_char,
  &_swigt__p_std__mapT_Texture__Type_std__weak_ptrT_Ape__Entity_t_t,
  &_swigt__p_std__mapT_int_std__vectorT_std__weak_ptrT_Ape__Entity_t_t_t,
  &_swigt__p_std__mapT_std__string_std__shared_ptrT_Ape__Entity_t_t,
  &_swigt__p_std__mapT_std__string_std__shared_ptrT_Ape__INode_t_t,
  &_swigt__p_std__mapT_std__string_std__weak_ptrT_Ape__Entity_t_t,
  &_swigt__p_std__mapT_std__string_std__weak_ptrT_Ape__INode_t_t,
  &_swigt__p_std__shared_ptrT_Ape__Entity_t,
  &_swigt__p_std__shared_ptrT_Ape__INode_t,
  &_swigt__p_std__vectorT_Ape__Color_t,
  &_swigt__p_std__vectorT_Ape__Quaternion_t,
  &_swigt__p_std__vectorT_Ape__Vector2_t,
  &_swigt__p_std__vectorT_Ape__Vector3_t,
  &_swigt__p_std__vectorT_Ape__Vector4_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_std__shared_ptrT_Ape__Entity_t_t,
  &_swigt__p_std__vectorT_std__shared_ptrT_Ape__INode_t_t,
  &_swigt__p_std__vectorT_std__weak_ptrT_Ape__Entity_t_t,
  &_swigt__p_std__vectorT_std__weak_ptrT_Ape__INode_t_t,
  &_swigt__p_std__weak_ptrT_Ape__Entity_t,
  &_swigt__p_std__weak_ptrT_Ape__Geometry_t,
  &_swigt__p_std__weak_ptrT_Ape__INode_t,
  &_swigt__p_std__weak_ptrT_Ape__Material_t,
};

static swig_cast_info _swigc__p_Ape__Color[] = { {&_swigt__p_Ape__Color, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_Ape__Degree[] = { {&_swigt__p_Ape__Degree, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_Ape__Entity[] = { {&_swigt__p_Ape__Entity, 0, 0, 0},  {&_swigt__p_Ape__ILight, _p_Ape__ILightTo_p_Ape__Entity, 0, 0},  {&_swigt__p_Ape__Geometry, _p_Ape__GeometryTo_p_Ape__Entity, 0, 0},  {&_swigt__p_Ape__ITextGeometry, _p_Ape__ITextGeometryTo_p_Ape__Entity, 0, 0},  {&_swigt__p_Ape__IManualGeometry, _p_Ape__IManualGeometryTo_p_Ape__Entity, 0, 0},  {&_swigt__p_Ape__IFileGeometry, _p_Ape__IFileGeometryTo_p_Ape__Entity, 0, 0},  {&_swigt__p_Ape__Material, _p_Ape__MaterialTo_p_Ape__Entity, 0, 0},  {&_swigt__p_Ape__ITexture, _p_Ape__ITextureTo_p_Ape__Entity, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_Ape__Euler[] = { {&_swigt__p_Ape__Euler, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_Ape__Event[] = { {&_swigt__p_Ape__Event, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_Ape__Geometry[] = { {&_swigt__p_Ape__Geometry, 0, 0, 0},  {&_swigt__p_Ape__ITextGeometry, _p_Ape__ITextGeometryTo_p_Ape__Geometry, 0, 0},  {&_swigt__p_Ape__IManualGeometry, _p_Ape__IManualGeometryTo_p_Ape__Geometry, 0, 0},  {&_swigt__p_Ape__IFileGeometry, _p_Ape__IFileGeometryTo_p_Ape__Geometry, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_Ape__IFileGeometry[] = { {&_swigt__p_Ape__IFileGeometry, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_Ape__ILight[] = { {&_swigt__p_Ape__ILight, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_Ape__IManualGeometry[] = { {&_swigt__p_Ape__IManualGeometry, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_Ape__INode[] = { {&_swigt__p_Ape__INode, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_Ape__ITextGeometry[] = { {&_swigt__p_Ape__ITextGeometry, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_Ape__ITexture[] = { {&_swigt__p_Ape__ITexture, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_Ape__LightAttenuation[] = { {&_swigt__p_Ape__LightAttenuation, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_Ape__LightSpotRange[] = { {&_swigt__p_Ape__LightSpotRange, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_Ape__Material[] = { {&_swigt__p_Ape__Material, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_Ape__Quaternion[] = { {&_swigt__p_Ape__Quaternion, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_Ape__Radian[] = { {&_swigt__p_Ape__Radian, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_Ape__SingletonT_IEventManager_t[] = { {&_swigt__p_Ape__SingletonT_IEventManager_t, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_Ape__SingletonT_IPluginManager_t[] = { {&_swigt__p_Ape__SingletonT_IPluginManager_t, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_Ape__SingletonT_IScene_t[] = { {&_swigt__p_Ape__SingletonT_IScene_t, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_Ape__Vector2[] = { {&_swigt__p_Ape__Vector2, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_Ape__Vector3[] = { {&_swigt__p_Ape__Vector3, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_Ape__Vector4[] = { {&_swigt__p_Ape__Vector4, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_IEventManager[] = { {&_swigt__p_IEventManager, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_IPluginManager[] = { {&_swigt__p_IPluginManager, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_IScene[] = { {&_swigt__p_IScene, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_Quaternion[] = { {&_swigt__p_Quaternion, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_Radian[] = { {&_swigt__p_Radian, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_Vector3[] = { {&_swigt__p_Vector3, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_Vector3Vector[] = { {&_swigt__p_Vector3Vector, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_char[] = { {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_std__mapT_Texture__Type_std__weak_ptrT_Ape__Entity_t_t[] = { {&_swigt__p_std__mapT_Texture__Type_std__weak_ptrT_Ape__Entity_t_t, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_std__mapT_int_std__vectorT_std__weak_ptrT_Ape__Entity_t_t_t[] = { {&_swigt__p_std__mapT_int_std__vectorT_std__weak_ptrT_Ape__Entity_t_t_t, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_std__mapT_std__string_std__shared_ptrT_Ape__Entity_t_t[] = { {&_swigt__p_std__mapT_std__string_std__shared_ptrT_Ape__Entity_t_t, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_std__mapT_std__string_std__shared_ptrT_Ape__INode_t_t[] = { {&_swigt__p_std__mapT_std__string_std__shared_ptrT_Ape__INode_t_t, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_std__mapT_std__string_std__weak_ptrT_Ape__Entity_t_t[] = { {&_swigt__p_std__mapT_std__string_std__weak_ptrT_Ape__Entity_t_t, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_std__mapT_std__string_std__weak_ptrT_Ape__INode_t_t[] = { {&_swigt__p_std__mapT_std__string_std__weak_ptrT_Ape__INode_t_t, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_std__shared_ptrT_Ape__Entity_t[] = { {&_swigt__p_std__shared_ptrT_Ape__Entity_t, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_std__shared_ptrT_Ape__INode_t[] = { {&_swigt__p_std__shared_ptrT_Ape__INode_t, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_std__vectorT_Ape__Color_t[] = { {&_swigt__p_std__vectorT_Ape__Color_t, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_std__vectorT_Ape__Quaternion_t[] = { {&_swigt__p_std__vectorT_Ape__Quaternion_t, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_std__vectorT_Ape__Vector2_t[] = { {&_swigt__p_std__vectorT_Ape__Vector2_t, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_std__vectorT_Ape__Vector3_t[] = { {&_swigt__p_std__vectorT_Ape__Vector3_t, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_std__vectorT_Ape__Vector4_t[] = { {&_swigt__p_std__vectorT_Ape__Vector4_t, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_std__vectorT_int_t[] = { {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_std__vectorT_std__shared_ptrT_Ape__Entity_t_t[] = { {&_swigt__p_std__vectorT_std__shared_ptrT_Ape__Entity_t_t, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_std__vectorT_std__shared_ptrT_Ape__INode_t_t[] = { {&_swigt__p_std__vectorT_std__shared_ptrT_Ape__INode_t_t, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_std__vectorT_std__weak_ptrT_Ape__Entity_t_t[] = { {&_swigt__p_std__vectorT_std__weak_ptrT_Ape__Entity_t_t, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_std__vectorT_std__weak_ptrT_Ape__INode_t_t[] = { {&_swigt__p_std__vectorT_std__weak_ptrT_Ape__INode_t_t, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_std__weak_ptrT_Ape__Entity_t[] = { {&_swigt__p_std__weak_ptrT_Ape__Entity_t, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_std__weak_ptrT_Ape__Geometry_t[] = { {&_swigt__p_std__weak_ptrT_Ape__Geometry_t, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_std__weak_ptrT_Ape__INode_t[] = { {&_swigt__p_std__weak_ptrT_Ape__INode_t, 0, 0, 0},{0, 0, 0, 0} };
static swig_cast_info _swigc__p_std__weak_ptrT_Ape__Material_t[] = { {&_swigt__p_std__weak_ptrT_Ape__Material_t, 0, 0, 0},{0, 0, 0, 0} };

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Ape__Color,
  _swigc__p_Ape__Degree,
  _swigc__p_Ape__Entity,
  _swigc__p_Ape__Euler,
  _swigc__p_Ape__Event,
  _swigc__p_Ape__Geometry,
  _swigc__p_Ape__IFileGeometry,
  _swigc__p_Ape__ILight,
  _swigc__p_Ape__IManualGeometry,
  _swigc__p_Ape__INode,
  _swigc__p_Ape__ITextGeometry,
  _swigc__p_Ape__ITexture,
  _swigc__p_Ape__LightAttenuation,
  _swigc__p_Ape__LightSpotRange,
  _swigc__p_Ape__Material,
  _swigc__p_Ape__Quaternion,
  _swigc__p_Ape__Radian,
  _swigc__p_Ape__SingletonT_IEventManager_t,
  _swigc__p_Ape__SingletonT_IPluginManager_t,
  _swigc__p_Ape__SingletonT_IScene_t,
  _swigc__p_Ape__Vector2,
  _swigc__p_Ape__Vector3,
  _swigc__p_Ape__Vector4,
  _swigc__p_IEventManager,
  _swigc__p_IPluginManager,
  _swigc__p_IScene,
  _swigc__p_Quaternion,
  _swigc__p_Radian,
  _swigc__p_Vector3,
  _swigc__p_Vector3Vector,
  _swigc__p_char,
  _swigc__p_std__mapT_Texture__Type_std__weak_ptrT_Ape__Entity_t_t,
  _swigc__p_std__mapT_int_std__vectorT_std__weak_ptrT_Ape__Entity_t_t_t,
  _swigc__p_std__mapT_std__string_std__shared_ptrT_Ape__Entity_t_t,
  _swigc__p_std__mapT_std__string_std__shared_ptrT_Ape__INode_t_t,
  _swigc__p_std__mapT_std__string_std__weak_ptrT_Ape__Entity_t_t,
  _swigc__p_std__mapT_std__string_std__weak_ptrT_Ape__INode_t_t,
  _swigc__p_std__shared_ptrT_Ape__Entity_t,
  _swigc__p_std__shared_ptrT_Ape__INode_t,
  _swigc__p_std__vectorT_Ape__Color_t,
  _swigc__p_std__vectorT_Ape__Quaternion_t,
  _swigc__p_std__vectorT_Ape__Vector2_t,
  _swigc__p_std__vectorT_Ape__Vector3_t,
  _swigc__p_std__vectorT_Ape__Vector4_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_std__shared_ptrT_Ape__Entity_t_t,
  _swigc__p_std__vectorT_std__shared_ptrT_Ape__INode_t_t,
  _swigc__p_std__vectorT_std__weak_ptrT_Ape__Entity_t_t,
  _swigc__p_std__vectorT_std__weak_ptrT_Ape__INode_t_t,
  _swigc__p_std__weak_ptrT_Ape__Entity_t,
  _swigc__p_std__weak_ptrT_Ape__Geometry_t,
  _swigc__p_std__weak_ptrT_Ape__INode_t,
  _swigc__p_std__weak_ptrT_Ape__Material_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */




#include <assert.h>

SWIGRUNTIME void
SWIG_V8_SetModule(void *, swig_module_info *swig_module) {
	v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
	v8::Local<v8::External> mod = SWIGV8_EXTERNAL_NEW(swig_module);
	assert(!mod.IsEmpty());
	global_obj->SetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"), mod);
}

SWIGRUNTIME swig_module_info *
SWIG_V8_GetModule(void *) {
	v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
	v8::Local<v8::Value> moduleinfo = global_obj->GetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"));

	if (moduleinfo.IsEmpty())
	{
		// It's not yet loaded
		return 0;
	}

	v8::Local<v8::External> moduleinfo_extern = v8::Local<v8::External>::Cast(moduleinfo);

	if (moduleinfo_extern.IsEmpty())
	{
		// Something's not right
		return 0;
	}

	void *ptr = moduleinfo_extern->Value();
	assert(ptr);
	swig_module_info *retptr = static_cast<swig_module_info *>(ptr);
	assert(retptr);
	return retptr;
}

#define SWIG_GetModule(clientdata)                SWIG_V8_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)       SWIG_V8_SetModule(clientdata, pointer)


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
	size_t i;
	swig_module_info *module_head, *iter;
	int init;

	/* check to see if the circular list has been setup, if not, set it up */
	if (swig_module.next == 0) {
		/* Initialize the swig_module */
		swig_module.type_initial = swig_type_initial;
		swig_module.cast_initial = swig_cast_initial;
		swig_module.next = &swig_module;
		init = 1;
	}
	else {
		init = 0;
	}

	/* Try and load any already created modules */
	module_head = SWIG_GetModule(clientdata);
	if (!module_head) {
		/* This is the first module loaded for this interpreter */
		/* so set the swig module into the interpreter */
		SWIG_SetModule(clientdata, &swig_module);
	}
	else {
		/* the interpreter has loaded a SWIG module, but has it loaded this one? */
		iter = module_head;
		do {
			if (iter == &swig_module) {
				/* Our module is already in the list, so there's nothing more to do. */
				return;
			}
			iter = iter->next;
		} while (iter != module_head);

		/* otherwise we must add our module into the list */
		swig_module.next = module_head->next;
		module_head->next = &swig_module;
	}

	/* When multiple interpreters are used, a module could have already been initialized in
	   a different interpreter, but not yet have a pointer in this interpreter.
	   In this case, we do not want to continue adding types... everything should be
	   set up already */
	if (init == 0) return;

	/* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
	for (i = 0; i < swig_module.size; ++i) {
		swig_type_info *type = 0;
		swig_type_info *ret;
		swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
		printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

		/* if there is another module already loaded */
		if (swig_module.next != &swig_module) {
			type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
		}
		if (type) {
			/* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
			printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
			if (swig_module.type_initial[i]->clientdata) {
				type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
				printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
			}
		}
		else {
			type = swig_module.type_initial[i];
		}

		/* Insert casting types */
		cast = swig_module.cast_initial[i];
		while (cast->type) {

			/* Don't need to add information already in the list */
			ret = 0;
#ifdef SWIGRUNTIME_DEBUG
			printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
			if (swig_module.next != &swig_module) {
				ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
				if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
			}
			if (ret) {
				if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
					printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
					cast->type = ret;
					ret = 0;
				}
				else {
					/* Check for casting already in the list */
					swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
					if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
					if (!ocast) ret = 0;
				}
			}

			if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
				printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
				if (type->cast) {
					type->cast->prev = cast;
					cast->next = type->cast;
				}
				type->cast = cast;
			}
			cast++;
		}
		/* Set entry in modules->types array equal to the type */
		swig_module.types[i] = type;
	}
	swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
	printf("**** SWIG_InitializeModule: Cast List ******\n");
	for (i = 0; i < swig_module.size; ++i) {
		int j = 0;
		swig_cast_info *cast = swig_module.cast_initial[i];
		printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
		while (cast->type) {
			printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
			cast++;
			++j;
		}
		printf("---- Total casts: %d\n", j);
	}
	printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
	size_t i;
	swig_cast_info *equiv;
	static int init_run = 0;

	if (init_run) return;
	init_run = 1;

	for (i = 0; i < swig_module.size; i++) {
		if (swig_module.types[i]->clientdata) {
			equiv = swig_module.types[i]->cast;
			while (equiv) {
				if (!equiv->converter) {
					if (equiv->type && !equiv->type->clientdata)
						SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
				}
				equiv = equiv->next;
			}
		}
	}
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


// Note: 'extern "C"'' disables name mangling which makes it easier to load the symbol manually
// TODO: is it ok to do that?
extern "C"
#if (NODE_MODULE_VERSION < 0x000C)
	void SWIGV8_INIT(v8::Handle<v8::Object> exports)
#else
	void SWIGV8_INIT(v8::Handle<v8::Object> exports, v8::Handle<v8::Object> /*module*/)
#endif
{
	SWIG_InitializeModule(static_cast<void *>(&exports));

	SWIGV8_HANDLESCOPE();

	v8::Handle<v8::Object> exports_obj = exports;


	// a class template for creating proxies of undefined types
	SWIGV8_SET_CLASS_TEMPL(SWIGV8_SWIGTYPE_Proxy_class_templ, SWIGV8_CreateClassTemplate("SwigProxy"));

	/* create objects for namespaces */


	/* create class templates */
	/* Name: _exports_IEventManager, Type: p_Ape__SingletonT_IEventManager_t, Dtor: _wrap_delete_IEventManager */
	v8::Handle<v8::FunctionTemplate> _exports_IEventManager_class = SWIGV8_CreateClassTemplate("_exports_IEventManager");
	SWIGV8_SET_CLASS_TEMPL(_exports_IEventManager_clientData.class_templ, _exports_IEventManager_class);
	_exports_IEventManager_clientData.dtor = _wrap_delete_IEventManager;
	if (SWIGTYPE_p_Ape__SingletonT_IEventManager_t->clientdata == 0) {
		SWIGTYPE_p_Ape__SingletonT_IEventManager_t->clientdata = &_exports_IEventManager_clientData;
	}
	/* Name: _exports_IPluginManager, Type: p_Ape__SingletonT_IPluginManager_t, Dtor: _wrap_delete_IPluginManager */
	v8::Handle<v8::FunctionTemplate> _exports_IPluginManager_class = SWIGV8_CreateClassTemplate("_exports_IPluginManager");
	SWIGV8_SET_CLASS_TEMPL(_exports_IPluginManager_clientData.class_templ, _exports_IPluginManager_class);
	_exports_IPluginManager_clientData.dtor = _wrap_delete_IPluginManager;
	if (SWIGTYPE_p_Ape__SingletonT_IPluginManager_t->clientdata == 0) {
		SWIGTYPE_p_Ape__SingletonT_IPluginManager_t->clientdata = &_exports_IPluginManager_clientData;
	}
	/* Name: _exports_IScene, Type: p_Ape__SingletonT_IScene_t, Dtor: _wrap_delete_IScene */
	v8::Handle<v8::FunctionTemplate> _exports_IScene_class = SWIGV8_CreateClassTemplate("_exports_IScene");
	SWIGV8_SET_CLASS_TEMPL(_exports_IScene_clientData.class_templ, _exports_IScene_class);
	_exports_IScene_clientData.dtor = _wrap_delete_IScene;
	if (SWIGTYPE_p_Ape__SingletonT_IScene_t->clientdata == 0) {
		SWIGTYPE_p_Ape__SingletonT_IScene_t->clientdata = &_exports_IScene_clientData;
	}
	/* Name: _exports_Color, Type: p_Ape__Color, Dtor: _wrap_delete_Color */
	v8::Handle<v8::FunctionTemplate> _exports_Color_class = SWIGV8_CreateClassTemplate("_exports_Color");
	SWIGV8_SET_CLASS_TEMPL(_exports_Color_clientData.class_templ, _exports_Color_class);
	_exports_Color_clientData.dtor = _wrap_delete_Color;
	if (SWIGTYPE_p_Ape__Color->clientdata == 0) {
		SWIGTYPE_p_Ape__Color->clientdata = &_exports_Color_clientData;
	}
	/* Name: _exports_Degree, Type: p_Ape__Degree, Dtor: _wrap_delete_Degree */
	v8::Handle<v8::FunctionTemplate> _exports_Degree_class = SWIGV8_CreateClassTemplate("_exports_Degree");
	SWIGV8_SET_CLASS_TEMPL(_exports_Degree_clientData.class_templ, _exports_Degree_class);
	_exports_Degree_clientData.dtor = _wrap_delete_Degree;
	if (SWIGTYPE_p_Ape__Degree->clientdata == 0) {
		SWIGTYPE_p_Ape__Degree->clientdata = &_exports_Degree_clientData;
	}
	/* Name: _exports_Entity, Type: p_Ape__Entity, Dtor: 0 */
	v8::Handle<v8::FunctionTemplate> _exports_Entity_class = SWIGV8_CreateClassTemplate("_exports_Entity");
	SWIGV8_SET_CLASS_TEMPL(_exports_Entity_clientData.class_templ, _exports_Entity_class);
	_exports_Entity_clientData.dtor = 0;
	if (SWIGTYPE_p_Ape__Entity->clientdata == 0) {
		SWIGTYPE_p_Ape__Entity->clientdata = &_exports_Entity_clientData;
	}
	/* Name: _exports_Euler, Type: p_Ape__Euler, Dtor: _wrap_delete_Euler */
	v8::Handle<v8::FunctionTemplate> _exports_Euler_class = SWIGV8_CreateClassTemplate("_exports_Euler");
	SWIGV8_SET_CLASS_TEMPL(_exports_Euler_clientData.class_templ, _exports_Euler_class);
	_exports_Euler_clientData.dtor = _wrap_delete_Euler;
	if (SWIGTYPE_p_Ape__Euler->clientdata == 0) {
		SWIGTYPE_p_Ape__Euler->clientdata = &_exports_Euler_clientData;
	}
	/* Name: _exports_Event, Type: p_Ape__Event, Dtor: _wrap_delete_Event */
	v8::Handle<v8::FunctionTemplate> _exports_Event_class = SWIGV8_CreateClassTemplate("_exports_Event");
	SWIGV8_SET_CLASS_TEMPL(_exports_Event_clientData.class_templ, _exports_Event_class);
	_exports_Event_clientData.dtor = _wrap_delete_Event;
	if (SWIGTYPE_p_Ape__Event->clientdata == 0) {
		SWIGTYPE_p_Ape__Event->clientdata = &_exports_Event_clientData;
	}
	/* Name: _exports_ITextGeometry, Type: p_Ape__ITextGeometry, Dtor: 0 */
	v8::Handle<v8::FunctionTemplate> _exports_ITextGeometry_class = SWIGV8_CreateClassTemplate("_exports_ITextGeometry");
	SWIGV8_SET_CLASS_TEMPL(_exports_ITextGeometry_clientData.class_templ, _exports_ITextGeometry_class);
	_exports_ITextGeometry_clientData.dtor = 0;
	if (SWIGTYPE_p_Ape__ITextGeometry->clientdata == 0) {
		SWIGTYPE_p_Ape__ITextGeometry->clientdata = &_exports_ITextGeometry_clientData;
	}
	/* Name: _exports_LightSpotRange, Type: p_Ape__LightSpotRange, Dtor: _wrap_delete_LightSpotRange */
	v8::Handle<v8::FunctionTemplate> _exports_LightSpotRange_class = SWIGV8_CreateClassTemplate("_exports_LightSpotRange");
	SWIGV8_SET_CLASS_TEMPL(_exports_LightSpotRange_clientData.class_templ, _exports_LightSpotRange_class);
	_exports_LightSpotRange_clientData.dtor = _wrap_delete_LightSpotRange;
	if (SWIGTYPE_p_Ape__LightSpotRange->clientdata == 0) {
		SWIGTYPE_p_Ape__LightSpotRange->clientdata = &_exports_LightSpotRange_clientData;
	}
	/* Name: _exports_LightAttenuation, Type: p_Ape__LightAttenuation, Dtor: _wrap_delete_LightAttenuation */
	v8::Handle<v8::FunctionTemplate> _exports_LightAttenuation_class = SWIGV8_CreateClassTemplate("_exports_LightAttenuation");
	SWIGV8_SET_CLASS_TEMPL(_exports_LightAttenuation_clientData.class_templ, _exports_LightAttenuation_class);
	_exports_LightAttenuation_clientData.dtor = _wrap_delete_LightAttenuation;
	if (SWIGTYPE_p_Ape__LightAttenuation->clientdata == 0) {
		SWIGTYPE_p_Ape__LightAttenuation->clientdata = &_exports_LightAttenuation_clientData;
	}
	/* Name: _exports_ILight, Type: p_Ape__ILight, Dtor: 0 */
	v8::Handle<v8::FunctionTemplate> _exports_ILight_class = SWIGV8_CreateClassTemplate("_exports_ILight");
	SWIGV8_SET_CLASS_TEMPL(_exports_ILight_clientData.class_templ, _exports_ILight_class);
	_exports_ILight_clientData.dtor = 0;
	if (SWIGTYPE_p_Ape__ILight->clientdata == 0) {
		SWIGTYPE_p_Ape__ILight->clientdata = &_exports_ILight_clientData;
	}
	/* Name: _exports_IManualGeometry, Type: p_Ape__IManualGeometry, Dtor: 0 */
	v8::Handle<v8::FunctionTemplate> _exports_IManualGeometry_class = SWIGV8_CreateClassTemplate("_exports_IManualGeometry");
	SWIGV8_SET_CLASS_TEMPL(_exports_IManualGeometry_clientData.class_templ, _exports_IManualGeometry_class);
	_exports_IManualGeometry_clientData.dtor = 0;
	if (SWIGTYPE_p_Ape__IManualGeometry->clientdata == 0) {
		SWIGTYPE_p_Ape__IManualGeometry->clientdata = &_exports_IManualGeometry_clientData;
	}
	/* Name: _exports_INode, Type: p_Ape__INode, Dtor: 0 */
	v8::Handle<v8::FunctionTemplate> _exports_INode_class = SWIGV8_CreateClassTemplate("_exports_INode");
	SWIGV8_SET_CLASS_TEMPL(_exports_INode_clientData.class_templ, _exports_INode_class);
	_exports_INode_clientData.dtor = 0;
	if (SWIGTYPE_p_Ape__INode->clientdata == 0) {
		SWIGTYPE_p_Ape__INode->clientdata = &_exports_INode_clientData;
	}
	/* Name: _exports_NodeWeakPtr, Type: SWIGTYPE_p_std__weak_ptrT_Ape__INode_t, Dtor: _wrap_delete_NodeWeakPtr */
	v8::Handle<v8::FunctionTemplate> _exports_NodeWeakPtr_class = SWIGV8_CreateClassTemplate("_exports_NodeWeakPtr");
	SWIGV8_SET_CLASS_TEMPL(_exports_NodeWeakPtr_clientData.class_templ, _exports_NodeWeakPtr_class);
	_exports_NodeWeakPtr_clientData.dtor = _wrap_delete_INode;
	if (SWIGTYPE_p_std__weak_ptrT_Ape__INode_t->clientdata == 0) {
		SWIGTYPE_p_std__weak_ptrT_Ape__INode_t->clientdata = &_exports_NodeWeakPtr_clientData;
	}
	/* Name: _exports_IFileGeometry, Type: p_Ape__IFileGeometry, Dtor: 0 */
	v8::Handle<v8::FunctionTemplate> _exports_IFileGeometry_class = SWIGV8_CreateClassTemplate("_exports_IFileGeometry");
	SWIGV8_SET_CLASS_TEMPL(_exports_IFileGeometry_clientData.class_templ, _exports_IFileGeometry_class);
	_exports_IFileGeometry_clientData.dtor = 0;
	if (SWIGTYPE_p_Ape__IFileGeometry->clientdata == 0) {
		SWIGTYPE_p_Ape__IFileGeometry->clientdata = &_exports_IFileGeometry_clientData;
	}
	/* Name: _exports_Material, Type: p_Ape__Material, Dtor: 0 */
	v8::Handle<v8::FunctionTemplate> _exports_Material_class = SWIGV8_CreateClassTemplate("_exports_Material");
	SWIGV8_SET_CLASS_TEMPL(_exports_Material_clientData.class_templ, _exports_Material_class);
	_exports_Material_clientData.dtor = 0;
	if (SWIGTYPE_p_Ape__Material->clientdata == 0) {
		SWIGTYPE_p_Ape__Material->clientdata = &_exports_Material_clientData;
	}
	/* Name: _exports_Quaternion, Type: p_Ape__Quaternion, Dtor: _wrap_delete_Quaternion */
	v8::Handle<v8::FunctionTemplate> _exports_Quaternion_class = SWIGV8_CreateClassTemplate("_exports_Quaternion");
	SWIGV8_SET_CLASS_TEMPL(_exports_Quaternion_clientData.class_templ, _exports_Quaternion_class);
	_exports_Quaternion_clientData.dtor = _wrap_delete_Quaternion;
	if (SWIGTYPE_p_Ape__Quaternion->clientdata == 0) {
		SWIGTYPE_p_Ape__Quaternion->clientdata = &_exports_Quaternion_clientData;
	}
	/* Name: _exports_Radian, Type: p_Ape__Radian, Dtor: _wrap_delete_Radian */
	v8::Handle<v8::FunctionTemplate> _exports_Radian_class = SWIGV8_CreateClassTemplate("_exports_Radian");
	SWIGV8_SET_CLASS_TEMPL(_exports_Radian_clientData.class_templ, _exports_Radian_class);
	_exports_Radian_clientData.dtor = _wrap_delete_Radian;
	if (SWIGTYPE_p_Ape__Radian->clientdata == 0) {
		SWIGTYPE_p_Ape__Radian->clientdata = &_exports_Radian_clientData;
	}
	/* Name: _exports_ITexture, Type: p_Ape__ITexture, Dtor: 0 */
	v8::Handle<v8::FunctionTemplate> _exports_ITexture_class = SWIGV8_CreateClassTemplate("_exports_ITexture");
	SWIGV8_SET_CLASS_TEMPL(_exports_ITexture_clientData.class_templ, _exports_ITexture_class);
	_exports_ITexture_clientData.dtor = 0;
	if (SWIGTYPE_p_Ape__ITexture->clientdata == 0) {
		SWIGTYPE_p_Ape__ITexture->clientdata = &_exports_ITexture_clientData;
	}
	/* Name: _exports_Vector2, Type: p_Ape__Vector2, Dtor: _wrap_delete_Vector2 */
	v8::Handle<v8::FunctionTemplate> _exports_Vector2_class = SWIGV8_CreateClassTemplate("_exports_Vector2");
	SWIGV8_SET_CLASS_TEMPL(_exports_Vector2_clientData.class_templ, _exports_Vector2_class);
	_exports_Vector2_clientData.dtor = _wrap_delete_Vector2;
	if (SWIGTYPE_p_Ape__Vector2->clientdata == 0) {
		SWIGTYPE_p_Ape__Vector2->clientdata = &_exports_Vector2_clientData;
	}
	/* Name: _exports_Vector3, Type: p_Ape__Vector3, Dtor: _wrap_delete_Vector3 */
	v8::Handle<v8::FunctionTemplate> _exports_Vector3_class = SWIGV8_CreateClassTemplate("_exports_Vector3");
	SWIGV8_SET_CLASS_TEMPL(_exports_Vector3_clientData.class_templ, _exports_Vector3_class);
	_exports_Vector3_clientData.dtor = _wrap_delete_Vector3;
	if (SWIGTYPE_p_Ape__Vector3->clientdata == 0) {
		SWIGTYPE_p_Ape__Vector3->clientdata = &_exports_Vector3_clientData;
	}
	/* Name: _exports_Vector4, Type: p_Ape__Vector4, Dtor: _wrap_delete_Vector4 */
	v8::Handle<v8::FunctionTemplate> _exports_Vector4_class = SWIGV8_CreateClassTemplate("_exports_Vector4");
	SWIGV8_SET_CLASS_TEMPL(_exports_Vector4_clientData.class_templ, _exports_Vector4_class);
	_exports_Vector4_clientData.dtor = _wrap_delete_Vector4;
	if (SWIGTYPE_p_Ape__Vector4->clientdata == 0) {
		SWIGTYPE_p_Ape__Vector4->clientdata = &_exports_Vector4_clientData;
	}


	/* register wrapper functions */
	SWIGV8_AddMemberVariable(_exports_Color_class, "r", _wrap_Color_r_get, _wrap_Color_r_set);
	SWIGV8_AddMemberVariable(_exports_Color_class, "g", _wrap_Color_g_get, _wrap_Color_g_set);
	SWIGV8_AddMemberVariable(_exports_Color_class, "b", _wrap_Color_b_get, _wrap_Color_b_set);
	SWIGV8_AddMemberVariable(_exports_Color_class, "a", _wrap_Color_a_get, _wrap_Color_a_set);
	SWIGV8_AddStaticVariable(exports_obj, "ape_PI", _wrap_ape_PI, JS_veto_set_variable);
	SWIGV8_AddMemberVariable(_exports_Degree_class, "m_deg", _wrap_Degree_m_deg_get, _wrap_Degree_m_deg_set);
	SWIGV8_AddMemberFunction(_exports_Degree_class, "toRadian", _wrap_Degree_toRadian);
	SWIGV8_AddMemberFunction(_exports_Entity_class, "getName", _wrap_Entity_getName);
	SWIGV8_AddMemberFunction(_exports_Entity_class, "getType", _wrap_Entity_getType);
	SWIGV8_AddMemberFunction(_exports_Entity_class, "getParentNodeName", _wrap_Entity_getParentNodeName);
	SWIGV8_AddMemberFunction(_exports_Euler_class, "getYaw", _wrap_Euler_getYaw);
	SWIGV8_AddMemberFunction(_exports_Euler_class, "getPitch", _wrap_Euler_getPitch);
	SWIGV8_AddMemberFunction(_exports_Euler_class, "getRoll", _wrap_Euler_getRoll);
	SWIGV8_AddMemberFunction(_exports_Euler_class, "setYaw", _wrap_Euler_setYaw);
	SWIGV8_AddMemberFunction(_exports_Euler_class, "setPitch", _wrap_Euler_setPitch);
	SWIGV8_AddMemberFunction(_exports_Euler_class, "setRoll", _wrap_Euler_setRoll);
	SWIGV8_AddMemberFunction(_exports_Euler_class, "toQuaternion", _wrap_Euler_toQuaternion);
	SWIGV8_AddMemberVariable(_exports_Event_class, "subjectName", _wrap_Event_subjectName_get, _wrap_Event_subjectName_set);
	SWIGV8_AddMemberVariable(_exports_Event_class, "type", _wrap_Event_type_get, _wrap_Event_type_set);
	SWIGV8_AddMemberVariable(_exports_Event_class, "group", _wrap_Event_group_get, _wrap_Event_group_set);
	SWIGV8_AddMemberFunction(_exports_ITextGeometry_class, "getCaption", _wrap_ITextGeometry_getCaption);
	SWIGV8_AddMemberFunction(_exports_ITextGeometry_class, "setCaption", _wrap_ITextGeometry_setCaption);
	SWIGV8_AddMemberFunction(_exports_ITextGeometry_class, "isVisible", _wrap_ITextGeometry_isVisible);
	SWIGV8_AddMemberFunction(_exports_ITextGeometry_class, "setVisible", _wrap_ITextGeometry_setVisible);
	SWIGV8_AddMemberFunction(_exports_ITextGeometry_class, "getOffset", _wrap_ITextGeometry_getOffset);
	SWIGV8_AddMemberFunction(_exports_ITextGeometry_class, "setOffset", _wrap_ITextGeometry_setOffset);
	SWIGV8_AddStaticVariable(exports_obj, "LT_SPOT", _wrap_Ape_LT_SPOT, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(exports_obj, "LT_DIRECTIONAL", _wrap_Ape_LT_DIRECTIONAL, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(exports_obj, "LT_POINT", _wrap_Ape_LT_POINT, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(exports_obj, "LT_INVALID", _wrap_Ape_LT_INVALID, JS_veto_set_variable);
	SWIGV8_AddMemberVariable(_exports_LightSpotRange_class, "m_inner_angle", _wrap_LightSpotRange_m_inner_angle_get, _wrap_LightSpotRange_m_inner_angle_set);
	SWIGV8_AddMemberVariable(_exports_LightSpotRange_class, "m_outer_angle", _wrap_LightSpotRange_m_outer_angle_get, _wrap_LightSpotRange_m_outer_angle_set);
	SWIGV8_AddMemberVariable(_exports_LightSpotRange_class, "m_falloff", _wrap_LightSpotRange_m_falloff_get, _wrap_LightSpotRange_m_falloff_set);
	SWIGV8_AddMemberVariable(_exports_LightAttenuation_class, "m_range", _wrap_LightAttenuation_m_range_get, _wrap_LightAttenuation_m_range_set);
	SWIGV8_AddMemberVariable(_exports_LightAttenuation_class, "m_constant", _wrap_LightAttenuation_m_constant_get, _wrap_LightAttenuation_m_constant_set);
	SWIGV8_AddMemberVariable(_exports_LightAttenuation_class, "m_linear", _wrap_LightAttenuation_m_linear_get, _wrap_LightAttenuation_m_linear_set);
	SWIGV8_AddMemberVariable(_exports_LightAttenuation_class, "m_quadratic", _wrap_LightAttenuation_m_quadratic_get, _wrap_LightAttenuation_m_quadratic_set);
	SWIGV8_AddMemberFunction(_exports_ILight_class, "getLightType", _wrap_ILight_getLightType);
	SWIGV8_AddMemberFunction(_exports_ILight_class, "getDiffuseColor", _wrap_ILight_getDiffuseColor);
	SWIGV8_AddMemberFunction(_exports_ILight_class, "getSpecularColor", _wrap_ILight_getSpecularColor);
	SWIGV8_AddMemberFunction(_exports_ILight_class, "getLightSpotRange", _wrap_ILight_getLightSpotRange);
	SWIGV8_AddMemberFunction(_exports_ILight_class, "getLightAttenuation", _wrap_ILight_getLightAttenuation);
	SWIGV8_AddMemberFunction(_exports_ILight_class, "getLightDirection", _wrap_ILight_getLightDirection);
	SWIGV8_AddMemberFunction(_exports_ILight_class, "setLightType", _wrap_ILight_setLightType);
	SWIGV8_AddMemberFunction(_exports_ILight_class, "setDiffuseColor", _wrap_ILight_setDiffuseColor);
	SWIGV8_AddMemberFunction(_exports_ILight_class, "setSpecularColor", _wrap_ILight_setSpecularColor);
	SWIGV8_AddMemberFunction(_exports_ILight_class, "setLightSpotRange", _wrap_ILight_setLightSpotRange);
	SWIGV8_AddMemberFunction(_exports_ILight_class, "setLightAttenuation", _wrap_ILight_setLightAttenuation);
	SWIGV8_AddMemberFunction(_exports_ILight_class, "setLightDirection", _wrap_ILight_setLightDirection);
	SWIGV8_AddMemberFunction(_exports_IManualGeometry_class, "getIndex", _wrap_IManualGeometry_getIndex);
	SWIGV8_AddMemberFunction(_exports_IManualGeometry_class, "getVertexList", _wrap_IManualGeometry__wrap_IManualGeometry_getVertexList);
	SWIGV8_AddMemberFunction(_exports_IManualGeometry_class, "getNormalList", _wrap_IManualGeometry__wrap_IManualGeometry_getNormalList);
	SWIGV8_AddMemberFunction(_exports_IManualGeometry_class, "getColorList", _wrap_IManualGeometry__wrap_IManualGeometry_getColorList);
	SWIGV8_AddMemberFunction(_exports_IManualGeometry_class, "getIndexList", _wrap_IManualGeometry__wrap_IManualGeometry_getIndexList);
	SWIGV8_AddMemberFunction(_exports_IManualGeometry_class, "getTriangleList", _wrap_IManualGeometry__wrap_IManualGeometry_getTriangleList);
	SWIGV8_AddMemberFunction(_exports_IManualGeometry_class, "getTextureCoordList", _wrap_IManualGeometry__wrap_IManualGeometry_getTextureCoordList);
	SWIGV8_AddStaticVariable(exports_obj, "LOCAL", _wrap_Ape_Node_LOCAL, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(exports_obj, "PARENT", _wrap_Ape_Node_PARENT, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(exports_obj, "WORLD", _wrap_Ape_Node_WORLD, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(exports_obj, "INVALID", _wrap_Ape_Node_INVALID, JS_veto_set_variable);
	SWIGV8_AddMemberFunction(_exports_INode_class, "getName", _wrap_INode_getName);
	SWIGV8_AddMemberFunction(_exports_INode_class, "getParentName", _wrap_INode_getParentName);
	SWIGV8_AddMemberFunction(_exports_INode_class, "getPosition", _wrap_INode_getPosition);
	SWIGV8_AddMemberFunction(_exports_INode_class, "getDerivedPosition", _wrap_INode_getDerivedPosition);
	SWIGV8_AddMemberFunction(_exports_INode_class, "getOrientation", _wrap_INode_getOrientation);
	SWIGV8_AddMemberFunction(_exports_INode_class, "getDerivedOrientation", _wrap_INode_getDerivedOrientation);
	SWIGV8_AddMemberFunction(_exports_INode_class, "getScale", _wrap_INode_getScale);
	SWIGV8_AddMemberFunction(_exports_INode_class, "getDerivedScale", _wrap_INode_getDerivedScale);
	SWIGV8_AddMemberFunction(_exports_INode_class, "setParent", _wrap_INode_setParent);
	SWIGV8_AddMemberFunction(_exports_INode_class, "setPosition", _wrap_INode_setPosition);
	SWIGV8_AddMemberFunction(_exports_INode_class, "setOrientation", _wrap_INode_setOrientation);
	SWIGV8_AddMemberFunction(_exports_INode_class, "setScale", _wrap_INode_setScale);
	SWIGV8_AddMemberFunction(_exports_INode_class, "translate", _wrap_INode_translate);
	SWIGV8_AddMemberFunction(_exports_INode_class, "rotate", _wrap_INode_rotate);

	SWIGV8_AddMemberFunction(_exports_IScene_class, "getNodes", _wrap_IScene_getNodes);
	SWIGV8_AddMemberFunction(_exports_IScene_class, "getNode", _wrap_IScene_getNode);
	SWIGV8_AddMemberFunction(_exports_IScene_class, "createNode", _wrap_IScene_createNode);
	SWIGV8_AddMemberFunction(_exports_IScene_class, "getEntities", _wrap_IScene_getEntities);
	SWIGV8_AddMemberFunction(_exports_IScene_class, "getEntity", _wrap_IScene_getEntity);
	SWIGV8_AddMemberFunction(_exports_IScene_class, "createEntity", _wrap_IScene_createEntity);
	SWIGV8_AddMemberFunction(_exports_IScene_class, "deleteNode", _wrap_IScene_deleteNode);
	SWIGV8_AddMemberFunction(_exports_IScene_class, "deleteEntity", _wrap_IScene_deleteEntity);
	//SWIGV8_AddMemberFunction(_exports_IScene_class, "getProperty", _wrap_IScene_getProperty);
	SWIGV8_AddMemberFunction(_exports_IEventManager_class, "connectEvent", _wrap_IEventManager_connectEvent);

	SWIGV8_AddMemberFunction(_exports_IFileGeometry_class, "setFileName", _wrap_IFileGeometry_setFileName);
	SWIGV8_AddMemberFunction(_exports_IFileGeometry_class, "getfFileName", _wrap_IFileGeometry_getfFileName);
	SWIGV8_AddMemberFunction(_exports_Material_class, "getDiffuseColor", _wrap_Material_getDiffuseColor);
	SWIGV8_AddMemberFunction(_exports_Material_class, "getSpecularColor", _wrap_Material_getSpecularColor);
	SWIGV8_AddMemberFunction(_exports_Material_class, "getAmbientColor", _wrap_Material_getAmbientColor);
	SWIGV8_AddMemberFunction(_exports_Material_class, "getEmissiveColor", _wrap_Material_getEmissiveColor);
	SWIGV8_AddMemberFunction(_exports_Material_class, "getShininess", _wrap_Material_getShininess);
	SWIGV8_AddMemberFunction(_exports_Material_class, "getSceneBlend", _wrap_Material_getSceneBlend);
	SWIGV8_AddMemberFunction(_exports_Material_class, "getTextures", _wrap_Material_getTextures);
	SWIGV8_AddMemberVariable(_exports_Quaternion_class, "w", _wrap_Quaternion_w_get, _wrap_Quaternion_w_set);
	SWIGV8_AddMemberVariable(_exports_Quaternion_class, "x", _wrap_Quaternion_x_get, _wrap_Quaternion_x_set);
	SWIGV8_AddMemberVariable(_exports_Quaternion_class, "y", _wrap_Quaternion_y_get, _wrap_Quaternion_y_set);
	SWIGV8_AddMemberVariable(_exports_Quaternion_class, "z", _wrap_Quaternion_z_get, _wrap_Quaternion_z_set);
	SWIGV8_AddMemberFunction(_exports_Quaternion_class, "FromAngleAxis", _wrap_Quaternion__wrap_Quaternion_FromAngleAxis);
	SWIGV8_AddMemberFunction(_exports_Quaternion_class, "equals", _wrap_Quaternion_equals);
	SWIGV8_AddMemberFunction(_exports_Quaternion_class, "Norm", _wrap_Quaternion_Norm);
	SWIGV8_AddMemberFunction(_exports_Quaternion_class, "normalise", _wrap_Quaternion_normalise);
	SWIGV8_AddMemberFunction(_exports_Quaternion_class, "Inverse", _wrap_Quaternion_Inverse);
	SWIGV8_AddMemberFunction(_exports_Quaternion_class, "toString", _wrap_Quaternion_toString);
	SWIGV8_AddMemberFunction(_exports_Quaternion_class, "Dot", _wrap_Quaternion_Dot);
	SWIGV8_AddMemberVariable(_exports_Radian_class, "m_rad", _wrap_Radian_m_rad_get, _wrap_Radian_m_rad_set);
	SWIGV8_AddMemberFunction(_exports_Radian_class, "toDegree", _wrap_Radian_toDegree);
	SWIGV8_AddStaticVariable(exports_obj, "NORMAL", _wrap_Ape_Texture_NORMAL, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(exports_obj, "DIFFUSE", _wrap_Ape_Texture_DIFFUSE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(exports_obj, "SPECULAR", _wrap_Ape_Texture_SPECULAR, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(exports_obj, "INVALID", _wrap_Ape_Texture_INVALID, JS_veto_set_variable);
	SWIGV8_AddMemberFunction(_exports_ITexture_class, "setFileName", _wrap_ITexture_setFileName);
	SWIGV8_AddMemberFunction(_exports_ITexture_class, "getFileName", _wrap_ITexture_getFileName);
	SWIGV8_AddMemberFunction(_exports_ITexture_class, "setTextureType", _wrap_ITexture_setTextureType);
	SWIGV8_AddMemberFunction(_exports_ITexture_class, "getTextureType", _wrap_ITexture_getTextureType);
	SWIGV8_AddMemberVariable(_exports_Vector2_class, "x", _wrap_Vector2_x_get, _wrap_Vector2_x_set);
	SWIGV8_AddMemberVariable(_exports_Vector2_class, "y", _wrap_Vector2_y_get, _wrap_Vector2_y_set);
	SWIGV8_AddMemberVariable(_exports_Vector3_class, "x", _wrap_Vector3_x_get, _wrap_Vector3_x_set);
	SWIGV8_AddMemberVariable(_exports_Vector3_class, "y", _wrap_Vector3_y_get, _wrap_Vector3_y_set);
	SWIGV8_AddMemberVariable(_exports_Vector3_class, "z", _wrap_Vector3_z_get, _wrap_Vector3_z_set);
	SWIGV8_AddMemberFunction(_exports_Vector3_class, "squaredLength", _wrap_Vector3_squaredLength);
	SWIGV8_AddMemberFunction(_exports_Vector3_class, "crossProduct", _wrap_Vector3_crossProduct);
	SWIGV8_AddMemberFunction(_exports_Vector3_class, "isNaN", _wrap_Vector3_isNaN);
	SWIGV8_AddMemberFunction(_exports_Vector3_class, "toString", _wrap_Vector3_toString);
	SWIGV8_AddMemberFunction(_exports_Vector3_class, "normalise", _wrap_Vector3_normalise);
	SWIGV8_AddMemberVariable(_exports_Vector4_class, "x", _wrap_Vector4_x_get, _wrap_Vector4_x_set);
	SWIGV8_AddMemberVariable(_exports_Vector4_class, "y", _wrap_Vector4_y_get, _wrap_Vector4_y_set);
	SWIGV8_AddMemberVariable(_exports_Vector4_class, "z", _wrap_Vector4_z_get, _wrap_Vector4_z_set);
	SWIGV8_AddMemberVariable(_exports_Vector4_class, "w", _wrap_Vector4_w_get, _wrap_Vector4_w_set);
	SWIGV8_AddMemberFunction(_exports_NodeWeakPtr_class, "getName", _wrap_NodeWeakPtr_getName);
	SWIGV8_AddMemberFunction(_exports_NodeWeakPtr_class, "getParentName", _wrap_NodeWeakPtr_getParentName);
	SWIGV8_AddMemberFunction(_exports_NodeWeakPtr_class, "getPosition", _wrap_NodeWeakPtr_getPosition);
	SWIGV8_AddMemberFunction(_exports_NodeWeakPtr_class, "getDerivedPosition", _wrap_NodeWeakPtr_getDerivedPosition);
	SWIGV8_AddMemberFunction(_exports_NodeWeakPtr_class, "getOrientation", _wrap_NodeWeakPtr_getOrientation);
	SWIGV8_AddMemberFunction(_exports_NodeWeakPtr_class, "getDerivedOrientation", _wrap_NodeWeakPtr_getDerivedOrientation);
	SWIGV8_AddMemberFunction(_exports_NodeWeakPtr_class, "getScale", _wrap_NodeWeakPtr_getScale);
	SWIGV8_AddMemberFunction(_exports_NodeWeakPtr_class, "getDerivedScale", _wrap_NodeWeakPtr_getDerivedScale);
	SWIGV8_AddMemberFunction(_exports_NodeWeakPtr_class, "setParent", _wrap_NodeWeakPtr_setParent);
	SWIGV8_AddMemberFunction(_exports_NodeWeakPtr_class, "setPosition", _wrap_NodeWeakPtr_setPosition);
	SWIGV8_AddMemberFunction(_exports_NodeWeakPtr_class, "setOrientation", _wrap_NodeWeakPtr_setOrientation);
	SWIGV8_AddMemberFunction(_exports_NodeWeakPtr_class, "setScale", _wrap_NodeWeakPtr_setScale);
	SWIGV8_AddMemberFunction(_exports_NodeWeakPtr_class, "translate", _wrap_NodeWeakPtr_translate);
	SWIGV8_AddMemberFunction(_exports_NodeWeakPtr_class, "rotate", _wrap_NodeWeakPtr_rotate);


	/* setup inheritances */
	if (SWIGTYPE_p_Ape__Geometry->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Ape__Geometry->clientdata)->class_templ.IsEmpty()))
	{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		_exports_ITextGeometry_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Ape__Geometry->clientdata)->class_templ);
#else
		_exports_ITextGeometry_class->Inherit(
			v8::Local<v8::FunctionTemplate>::New(
				v8::Isolate::GetCurrent(),
				static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Ape__Geometry->clientdata)->class_templ)
		);
#endif

#ifdef SWIGRUNTIME_DEBUG
		printf("Inheritance successful _exports_ITextGeometry _Ape__Geometry\n");
#endif
	}
	else {
#ifdef SWIGRUNTIME_DEBUG
		printf("Unable to inherit baseclass, it didn't exist _exports_ITextGeometry _Ape__Geometry\n");
#endif
	}
	if (SWIGTYPE_p_Ape__Entity->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Ape__Entity->clientdata)->class_templ.IsEmpty()))
	{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		_exports_ILight_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Ape__Entity->clientdata)->class_templ);
#else
		_exports_ILight_class->Inherit(
			v8::Local<v8::FunctionTemplate>::New(
				v8::Isolate::GetCurrent(),
				static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Ape__Entity->clientdata)->class_templ)
		);
#endif

#ifdef SWIGRUNTIME_DEBUG
		printf("Inheritance successful _exports_ILight _Ape__Entity\n");
#endif
	}
	else {
#ifdef SWIGRUNTIME_DEBUG
		printf("Unable to inherit baseclass, it didn't exist _exports_ILight _Ape__Entity\n");
#endif
	}
	if (SWIGTYPE_p_Ape__Geometry->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Ape__Geometry->clientdata)->class_templ.IsEmpty()))
	{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		_exports_IManualGeometry_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Ape__Geometry->clientdata)->class_templ);
#else
		_exports_IManualGeometry_class->Inherit(
			v8::Local<v8::FunctionTemplate>::New(
				v8::Isolate::GetCurrent(),
				static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Ape__Geometry->clientdata)->class_templ)
		);
#endif

#ifdef SWIGRUNTIME_DEBUG
		printf("Inheritance successful _exports_IManualGeometry _Ape__Geometry\n");
#endif
	}
	else {
#ifdef SWIGRUNTIME_DEBUG
		printf("Unable to inherit baseclass, it didn't exist _exports_IManualGeometry _Ape__Geometry\n");
#endif
	}
	if (SWIGTYPE_p_Ape__Geometry->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Ape__Geometry->clientdata)->class_templ.IsEmpty()))
	{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		_exports_IFileGeometry_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Ape__Geometry->clientdata)->class_templ);
#else
		_exports_IFileGeometry_class->Inherit(
			v8::Local<v8::FunctionTemplate>::New(
				v8::Isolate::GetCurrent(),
				static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Ape__Geometry->clientdata)->class_templ)
		);
#endif

#ifdef SWIGRUNTIME_DEBUG
		printf("Inheritance successful _exports_IFileGeometry _Ape__Geometry\n");
#endif
	}
	else {
#ifdef SWIGRUNTIME_DEBUG
		printf("Unable to inherit baseclass, it didn't exist _exports_IFileGeometry _Ape__Geometry\n");
#endif
	}
	if (SWIGTYPE_p_Ape__Entity->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Ape__Entity->clientdata)->class_templ.IsEmpty()))
	{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		_exports_Material_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Ape__Entity->clientdata)->class_templ);
#else
		_exports_Material_class->Inherit(
			v8::Local<v8::FunctionTemplate>::New(
				v8::Isolate::GetCurrent(),
				static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Ape__Entity->clientdata)->class_templ)
		);
#endif

#ifdef SWIGRUNTIME_DEBUG
		printf("Inheritance successful _exports_Material _Ape__Entity\n");
#endif
	}
	else {
#ifdef SWIGRUNTIME_DEBUG
		printf("Unable to inherit baseclass, it didn't exist _exports_Material _Ape__Entity\n");
#endif
	}
	if (SWIGTYPE_p_Ape__Entity->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Ape__Entity->clientdata)->class_templ.IsEmpty()))
	{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
		_exports_ITexture_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Ape__Entity->clientdata)->class_templ);
#else
		_exports_ITexture_class->Inherit(
			v8::Local<v8::FunctionTemplate>::New(
				v8::Isolate::GetCurrent(),
				static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Ape__Entity->clientdata)->class_templ)
		);
#endif

#ifdef SWIGRUNTIME_DEBUG
		printf("Inheritance successful _exports_ITexture _Ape__Entity\n");
#endif
	}
	else {
#ifdef SWIGRUNTIME_DEBUG
		printf("Unable to inherit baseclass, it didn't exist _exports_ITexture _Ape__Entity\n");
#endif
	}


	/* class instances */
	/* Class: IEventManager (_exports_IEventManager) */
	v8::Handle<v8::FunctionTemplate> _exports_IEventManager_class_0 = SWIGV8_CreateClassTemplate("IEventManager");
	_exports_IEventManager_class_0->SetCallHandler(_wrap_new_IEventManager);
	_exports_IEventManager_class_0->Inherit(_exports_IEventManager_class);
	_exports_IEventManager_class_0->SetHiddenPrototype(true);
	v8::Handle<v8::Object> _exports_IEventManager_obj = _exports_IEventManager_class_0->GetFunction();
	/* Class: IPluginManager (_exports_IPluginManager) */
	v8::Handle<v8::FunctionTemplate> _exports_IPluginManager_class_0 = SWIGV8_CreateClassTemplate("IPluginManager");
	_exports_IPluginManager_class_0->SetCallHandler(_wrap_new_IPluginManager);
	_exports_IPluginManager_class_0->Inherit(_exports_IPluginManager_class);
	_exports_IPluginManager_class_0->SetHiddenPrototype(true);
	v8::Handle<v8::Object> _exports_IPluginManager_obj = _exports_IPluginManager_class_0->GetFunction();
	/* Class: IScene (_exports_IScene) */
	v8::Handle<v8::FunctionTemplate> _exports_IScene_class_0 = SWIGV8_CreateClassTemplate("IScene");
	_exports_IScene_class_0->SetCallHandler(_wrap_new_IScene);
	_exports_IScene_class_0->Inherit(_exports_IScene_class);
	_exports_IScene_class_0->SetHiddenPrototype(true);
	v8::Handle<v8::Object> _exports_IScene_obj = _exports_IScene_class_0->GetFunction();
	/* Class: Color (_exports_Color) */
	v8::Handle<v8::FunctionTemplate> _exports_Color_class_0 = SWIGV8_CreateClassTemplate("Color");
	_exports_Color_class_0->SetCallHandler(_wrap_new_Color);
	_exports_Color_class_0->Inherit(_exports_Color_class);
	_exports_Color_class_0->SetHiddenPrototype(true);
	v8::Handle<v8::Object> _exports_Color_obj = _exports_Color_class_0->GetFunction();
	/* Class: Degree (_exports_Degree) */
	v8::Handle<v8::FunctionTemplate> _exports_Degree_class_0 = SWIGV8_CreateClassTemplate("Degree");
	_exports_Degree_class_0->SetCallHandler(_wrap_new_Degree);
	_exports_Degree_class_0->Inherit(_exports_Degree_class);
	_exports_Degree_class_0->SetHiddenPrototype(true);
	v8::Handle<v8::Object> _exports_Degree_obj = _exports_Degree_class_0->GetFunction();
	/* Class: Entity (_exports_Entity) */
	v8::Handle<v8::FunctionTemplate> _exports_Entity_class_0 = SWIGV8_CreateClassTemplate("Entity");
	_exports_Entity_class_0->SetCallHandler(_wrap_new_veto_Entity);
	_exports_Entity_class_0->Inherit(_exports_Entity_class);
	_exports_Entity_class_0->SetHiddenPrototype(true);
	v8::Handle<v8::Object> _exports_Entity_obj = _exports_Entity_class_0->GetFunction();
	/* Class: Euler (_exports_Euler) */
	v8::Handle<v8::FunctionTemplate> _exports_Euler_class_0 = SWIGV8_CreateClassTemplate("Euler");
	_exports_Euler_class_0->SetCallHandler(_wrap_new_Euler);
	_exports_Euler_class_0->Inherit(_exports_Euler_class);
	_exports_Euler_class_0->SetHiddenPrototype(true);
	v8::Handle<v8::Object> _exports_Euler_obj = _exports_Euler_class_0->GetFunction();
	/* Class: Event (_exports_Event) */
	v8::Handle<v8::FunctionTemplate> _exports_Event_class_0 = SWIGV8_CreateClassTemplate("Event");
	_exports_Event_class_0->SetCallHandler(_wrap_new_Event);
	_exports_Event_class_0->Inherit(_exports_Event_class);
	_exports_Event_class_0->SetHiddenPrototype(true);
	v8::Handle<v8::Object> _exports_Event_obj = _exports_Event_class_0->GetFunction();
	/* Class: ITextGeometry (_exports_ITextGeometry) */
	v8::Handle<v8::FunctionTemplate> _exports_ITextGeometry_class_0 = SWIGV8_CreateClassTemplate("ITextGeometry");
	_exports_ITextGeometry_class_0->SetCallHandler(_wrap_new_veto_ITextGeometry);
	_exports_ITextGeometry_class_0->Inherit(_exports_ITextGeometry_class);
	_exports_ITextGeometry_class_0->SetHiddenPrototype(true);
	v8::Handle<v8::Object> _exports_ITextGeometry_obj = _exports_ITextGeometry_class_0->GetFunction();
	/* Class: LightSpotRange (_exports_LightSpotRange) */
	v8::Handle<v8::FunctionTemplate> _exports_LightSpotRange_class_0 = SWIGV8_CreateClassTemplate("LightSpotRange");
	_exports_LightSpotRange_class_0->SetCallHandler(_wrap_new_LightSpotRange);
	_exports_LightSpotRange_class_0->Inherit(_exports_LightSpotRange_class);
	_exports_LightSpotRange_class_0->SetHiddenPrototype(true);
	v8::Handle<v8::Object> _exports_LightSpotRange_obj = _exports_LightSpotRange_class_0->GetFunction();
	/* Class: LightAttenuation (_exports_LightAttenuation) */
	v8::Handle<v8::FunctionTemplate> _exports_LightAttenuation_class_0 = SWIGV8_CreateClassTemplate("LightAttenuation");
	_exports_LightAttenuation_class_0->SetCallHandler(_wrap_new_LightAttenuation);
	_exports_LightAttenuation_class_0->Inherit(_exports_LightAttenuation_class);
	_exports_LightAttenuation_class_0->SetHiddenPrototype(true);
	v8::Handle<v8::Object> _exports_LightAttenuation_obj = _exports_LightAttenuation_class_0->GetFunction();
	/* Class: ILight (_exports_ILight) */
	v8::Handle<v8::FunctionTemplate> _exports_ILight_class_0 = SWIGV8_CreateClassTemplate("ILight");
	_exports_ILight_class_0->SetCallHandler(_wrap_new_veto_ILight);
	_exports_ILight_class_0->Inherit(_exports_ILight_class);
	_exports_ILight_class_0->SetHiddenPrototype(true);
	v8::Handle<v8::Object> _exports_ILight_obj = _exports_ILight_class_0->GetFunction();
	/* Class: IManualGeometry (_exports_IManualGeometry) */
	v8::Handle<v8::FunctionTemplate> _exports_IManualGeometry_class_0 = SWIGV8_CreateClassTemplate("IManualGeometry");
	_exports_IManualGeometry_class_0->SetCallHandler(_wrap_new_veto_IManualGeometry);
	_exports_IManualGeometry_class_0->Inherit(_exports_IManualGeometry_class);
	_exports_IManualGeometry_class_0->SetHiddenPrototype(true);
	v8::Handle<v8::Object> _exports_IManualGeometry_obj = _exports_IManualGeometry_class_0->GetFunction();
	/* Class: INode (_exports_INode) */
	v8::Handle<v8::FunctionTemplate> _exports_INode_class_0 = SWIGV8_CreateClassTemplate("INode");
	_exports_INode_class_0->SetCallHandler(_wrap_new_veto_INode);
	_exports_INode_class_0->Inherit(_exports_INode_class);
	_exports_INode_class_0->SetHiddenPrototype(true);
	v8::Handle<v8::Object> _exports_INode_obj = _exports_INode_class_0->GetFunction();
	/* Class: NodeWeakPtr (_exports_NodeWeakPtr) */
	v8::Handle<v8::FunctionTemplate> _exports_NodeWeakPtr_class_0 = SWIGV8_CreateClassTemplate("NodeWeakPtr");
	_exports_NodeWeakPtr_class_0->SetCallHandler(_wrap_new_veto_NodeWeakPtr);
	_exports_NodeWeakPtr_class_0->Inherit(_exports_NodeWeakPtr_class);
	_exports_NodeWeakPtr_class_0->SetHiddenPrototype(true);
	v8::Handle<v8::Object> _exports_NodeWeakPtr_obj = _exports_NodeWeakPtr_class_0->GetFunction();
	/* Class: IFileGeometry (_exports_IFileGeometry) */
	v8::Handle<v8::FunctionTemplate> _exports_IFileGeometry_class_0 = SWIGV8_CreateClassTemplate("IFileGeometry");
	_exports_IFileGeometry_class_0->SetCallHandler(_wrap_new_veto_IFileGeometry);
	_exports_IFileGeometry_class_0->Inherit(_exports_IFileGeometry_class);
	_exports_IFileGeometry_class_0->SetHiddenPrototype(true);
	v8::Handle<v8::Object> _exports_IFileGeometry_obj = _exports_IFileGeometry_class_0->GetFunction();
	/* Class: Material (_exports_Material) */
	v8::Handle<v8::FunctionTemplate> _exports_Material_class_0 = SWIGV8_CreateClassTemplate("Material");
	_exports_Material_class_0->SetCallHandler(_wrap_new_veto_Material);
	_exports_Material_class_0->Inherit(_exports_Material_class);
	_exports_Material_class_0->SetHiddenPrototype(true);
	v8::Handle<v8::Object> _exports_Material_obj = _exports_Material_class_0->GetFunction();
	/* Class: Quaternion (_exports_Quaternion) */
	v8::Handle<v8::FunctionTemplate> _exports_Quaternion_class_0 = SWIGV8_CreateClassTemplate("Quaternion");
	_exports_Quaternion_class_0->SetCallHandler(_wrap_new_Quaternion);
	_exports_Quaternion_class_0->Inherit(_exports_Quaternion_class);
	_exports_Quaternion_class_0->SetHiddenPrototype(true);
	v8::Handle<v8::Object> _exports_Quaternion_obj = _exports_Quaternion_class_0->GetFunction();
	/* Class: Radian (_exports_Radian) */
	v8::Handle<v8::FunctionTemplate> _exports_Radian_class_0 = SWIGV8_CreateClassTemplate("Radian");
	_exports_Radian_class_0->SetCallHandler(_wrap_new_Radian);
	_exports_Radian_class_0->Inherit(_exports_Radian_class);
	_exports_Radian_class_0->SetHiddenPrototype(true);
	v8::Handle<v8::Object> _exports_Radian_obj = _exports_Radian_class_0->GetFunction();
	/* Class: ITexture (_exports_ITexture) */
	v8::Handle<v8::FunctionTemplate> _exports_ITexture_class_0 = SWIGV8_CreateClassTemplate("ITexture");
	_exports_ITexture_class_0->SetCallHandler(_wrap_new_veto_ITexture);
	_exports_ITexture_class_0->Inherit(_exports_ITexture_class);
	_exports_ITexture_class_0->SetHiddenPrototype(true);
	v8::Handle<v8::Object> _exports_ITexture_obj = _exports_ITexture_class_0->GetFunction();
	/* Class: Vector2 (_exports_Vector2) */
	v8::Handle<v8::FunctionTemplate> _exports_Vector2_class_0 = SWIGV8_CreateClassTemplate("Vector2");
	_exports_Vector2_class_0->SetCallHandler(_wrap_new_Vector2);
	_exports_Vector2_class_0->Inherit(_exports_Vector2_class);
	_exports_Vector2_class_0->SetHiddenPrototype(true);
	v8::Handle<v8::Object> _exports_Vector2_obj = _exports_Vector2_class_0->GetFunction();
	/* Class: Vector3 (_exports_Vector3) */
	v8::Handle<v8::FunctionTemplate> _exports_Vector3_class_0 = SWIGV8_CreateClassTemplate("Vector3");
	_exports_Vector3_class_0->SetCallHandler(_wrap_new_Vector3);
	_exports_Vector3_class_0->Inherit(_exports_Vector3_class);
	_exports_Vector3_class_0->SetHiddenPrototype(true);
	v8::Handle<v8::Object> _exports_Vector3_obj = _exports_Vector3_class_0->GetFunction();
	/* Class: Vector4 (_exports_Vector4) */
	v8::Handle<v8::FunctionTemplate> _exports_Vector4_class_0 = SWIGV8_CreateClassTemplate("Vector4");
	_exports_Vector4_class_0->SetCallHandler(_wrap_new_Vector4);
	_exports_Vector4_class_0->Inherit(_exports_Vector4_class);
	_exports_Vector4_class_0->SetHiddenPrototype(true);
	v8::Handle<v8::Object> _exports_Vector4_obj = _exports_Vector4_class_0->GetFunction();


	/* add static class functions and variables */
	SWIGV8_AddStaticFunction(_exports_IEventManager_obj, "getSingleton", _wrap_IEventManager_getSingleton);
	SWIGV8_AddStaticFunction(_exports_IEventManager_obj, "getSingletonPtr", _wrap_IEventManager_getSingletonPtr);

	SWIGV8_AddStaticFunction(_exports_IPluginManager_obj, "getSingleton", _wrap_IPluginManager_getSingleton);
	SWIGV8_AddStaticFunction(_exports_IPluginManager_obj, "getSingletonPtr", _wrap_IPluginManager_getSingletonPtr);

	SWIGV8_AddStaticFunction(_exports_IScene_obj, "getSingleton", _wrap_IScene_getSingleton);
	SWIGV8_AddStaticFunction(_exports_IScene_obj, "getSingletonPtr", _wrap_IScene_getSingletonPtr);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "SCENEPROPERTY", _wrap_Ape_Event_SCENEPROPERTY, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "NODE", _wrap_Ape_Event_NODE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "LIGHT", _wrap_Ape_Event_LIGHT, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "GEOMETRY", _wrap_Ape_Event_GEOMETRY, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "MATERIAL", _wrap_Ape_Event_MATERIAL, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "TEXTURE", _wrap_Ape_Event_TEXTURE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "LABEL", _wrap_Ape_Event_LABEL, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "CAMERA", _wrap_Ape_Event_CAMERA, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "EG_INVALID", _wrap_Ape_Event_EG_INVALID, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "SCENEPROPERTY_AMBIENTCOLOR", _wrap_Ape_Event_SCENEPROPERTY_AMBIENTCOLOR, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "SCENEPROPERTY_ADDRESOURCEFOLDER", _wrap_Ape_Event_SCENEPROPERTY_ADDRESOURCEFOLDER, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "SCENEPROPERTY_SKYBOXMATERIAL", _wrap_Ape_Event_SCENEPROPERTY_SKYBOXMATERIAL, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "NODE_CREATE", _wrap_Ape_Event_NODE_CREATE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "NODE_DELETE", _wrap_Ape_Event_NODE_DELETE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "NODE_POSITION", _wrap_Ape_Event_NODE_POSITION, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "NODE_ORIENTATION", _wrap_Ape_Event_NODE_ORIENTATION, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "NODE_SCALE", _wrap_Ape_Event_NODE_SCALE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "NODE_PARENT", _wrap_Ape_Event_NODE_PARENT, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "LIGHT_CREATE", _wrap_Ape_Event_LIGHT_CREATE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "LIGHT_DELETE", _wrap_Ape_Event_LIGHT_DELETE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "LIGHT_TYPE", _wrap_Ape_Event_LIGHT_TYPE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "LIGHT_DIFFUSE", _wrap_Ape_Event_LIGHT_DIFFUSE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "LIGHT_SPECULAR", _wrap_Ape_Event_LIGHT_SPECULAR, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "LIGHT_ATTENUATION", _wrap_Ape_Event_LIGHT_ATTENUATION, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "LIGHT_DIRECTION", _wrap_Ape_Event_LIGHT_DIRECTION, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "LIGHT_SPOTRANGE", _wrap_Ape_Event_LIGHT_SPOTRANGE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "GEOMETRY_FILE_CREATE", _wrap_Ape_Event_GEOMETRY_FILE_CREATE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "GEOMETRY_FILE_DELETE", _wrap_Ape_Event_GEOMETRY_FILE_DELETE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "GEOMETRY_FILE_FILENAME", _wrap_Ape_Event_GEOMETRY_FILE_FILENAME, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "GEOMETRY_MANUAL_CREATE", _wrap_Ape_Event_GEOMETRY_MANUAL_CREATE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "GEOMETRY_MANUAL_INDICES", _wrap_Ape_Event_GEOMETRY_MANUAL_INDICES, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "GEOMETRY_MANUAL_VERTICES", _wrap_Ape_Event_GEOMETRY_MANUAL_VERTICES, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "GEOMETRY_MANUAL_TEXTURECOORDS", _wrap_Ape_Event_GEOMETRY_MANUAL_TEXTURECOORDS, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "GEOMETRY_MANUAL_NORMALS", _wrap_Ape_Event_GEOMETRY_MANUAL_NORMALS, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "GEOMETRY_MANUAL_TRIANGLES", _wrap_Ape_Event_GEOMETRY_MANUAL_TRIANGLES, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "GEOMETRY_MANUAL_DELETE", _wrap_Ape_Event_GEOMETRY_MANUAL_DELETE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "GEOMETRY_TEXT_CREATE", _wrap_Ape_Event_GEOMETRY_TEXT_CREATE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "GEOMETRY_TEXT_DELETE", _wrap_Ape_Event_GEOMETRY_TEXT_DELETE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "GEOMETRY_TEXT_VISIBLE", _wrap_Ape_Event_GEOMETRY_TEXT_VISIBLE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "GEOMETRY_TEXT_CAPTION", _wrap_Ape_Event_GEOMETRY_TEXT_CAPTION, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "GEOMETRY_TEXT_OFFSET", _wrap_Ape_Event_GEOMETRY_TEXT_OFFSET, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "GEOMETRY_PRIMITVE_BOX_CREATE", _wrap_Ape_Event_GEOMETRY_PRIMITVE_BOX_CREATE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "GEOMETRY_PRIMITVE_BOX_DIMENSIONS", _wrap_Ape_Event_GEOMETRY_PRIMITVE_BOX_DIMENSIONS, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "GEOMETRY_PRIMITVE_BOX_DELETE", _wrap_Ape_Event_GEOMETRY_PRIMITVE_BOX_DELETE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "MATERIAL_FILE_CREATE", _wrap_Ape_Event_MATERIAL_FILE_CREATE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "MATERIAL_FILE_DELETE", _wrap_Ape_Event_MATERIAL_FILE_DELETE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "MATERIAL_FILE_FILENAME", _wrap_Ape_Event_MATERIAL_FILE_FILENAME, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "MATERIAL_MANUAL_CREATE", _wrap_Ape_Event_MATERIAL_MANUAL_CREATE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "MATERIAL_MANUAL_AMBIENT", _wrap_Ape_Event_MATERIAL_MANUAL_AMBIENT, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "MATERIAL_MANUAL_DIFFUSE", _wrap_Ape_Event_MATERIAL_MANUAL_DIFFUSE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "MATERIAL_MANUAL_SPECULAR", _wrap_Ape_Event_MATERIAL_MANUAL_SPECULAR, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "MATERIAL_MANUAL_SHININESS", _wrap_Ape_Event_MATERIAL_MANUAL_SHININESS, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "MATERIAL_MANUAL_TEXTURES", _wrap_Ape_Event_MATERIAL_MANUAL_TEXTURES, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "MATERIAL_MANUAL_DELETE", _wrap_Ape_Event_MATERIAL_MANUAL_DELETE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "TEXTURE_CREATE", _wrap_Ape_Event_TEXTURE_CREATE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "TEXTURE_FILENAME", _wrap_Ape_Event_TEXTURE_FILENAME, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "TEXTURE_DELETE", _wrap_Ape_Event_TEXTURE_DELETE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "CAMERA_CREATE", _wrap_Ape_Event_CAMERA_CREATE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "CAMERA_DELETE", _wrap_Ape_Event_CAMERA_DELETE, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "CAMERA_FOCALLENGTH", _wrap_Ape_Event_CAMERA_FOCALLENGTH, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "CAMERA_ASPECTRATIO", _wrap_Ape_Event_CAMERA_ASPECTRATIO, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "CAMERA_FOVY", _wrap_Ape_Event_CAMERA_FOVY, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "CAMERA_FRUSTUMOFFSET", _wrap_Ape_Event_CAMERA_FRUSTUMOFFSET, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "CAMERA_NEARCLIP", _wrap_Ape_Event_CAMERA_NEARCLIP, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "CAMERA_FARCLIP", _wrap_Ape_Event_CAMERA_FARCLIP, JS_veto_set_variable);
	SWIGV8_AddStaticVariable(_exports_Event_obj, "ET_INVALID", _wrap_Ape_Event_ET_INVALID, JS_veto_set_variable);
	SWIGV8_AddStaticFunction(_exports_Quaternion_obj, "Slerp", _wrap_Quaternion_Slerp);


	/* register classes */
	exports_obj->Set(SWIGV8_SYMBOL_NEW("IEventManager"), _exports_IEventManager_obj);
	exports_obj->Set(SWIGV8_SYMBOL_NEW("IPluginManager"), _exports_IPluginManager_obj);
	exports_obj->Set(SWIGV8_SYMBOL_NEW("IScene"), _exports_IScene_obj);
	exports_obj->Set(SWIGV8_SYMBOL_NEW("Color"), _exports_Color_obj);
	exports_obj->Set(SWIGV8_SYMBOL_NEW("Degree"), _exports_Degree_obj);
	exports_obj->Set(SWIGV8_SYMBOL_NEW("Entity"), _exports_Entity_obj);
	exports_obj->Set(SWIGV8_SYMBOL_NEW("Euler"), _exports_Euler_obj);
	exports_obj->Set(SWIGV8_SYMBOL_NEW("Event"), _exports_Event_obj);
	exports_obj->Set(SWIGV8_SYMBOL_NEW("ITextGeometry"), _exports_ITextGeometry_obj);
	exports_obj->Set(SWIGV8_SYMBOL_NEW("LightSpotRange"), _exports_LightSpotRange_obj);
	exports_obj->Set(SWIGV8_SYMBOL_NEW("LightAttenuation"), _exports_LightAttenuation_obj);
	exports_obj->Set(SWIGV8_SYMBOL_NEW("ILight"), _exports_ILight_obj);
	exports_obj->Set(SWIGV8_SYMBOL_NEW("IManualGeometry"), _exports_IManualGeometry_obj);
	exports_obj->Set(SWIGV8_SYMBOL_NEW("INode"), _exports_INode_obj);
	exports_obj->Set(SWIGV8_SYMBOL_NEW("IFileGeometry"), _exports_IFileGeometry_obj);
	exports_obj->Set(SWIGV8_SYMBOL_NEW("Material"), _exports_Material_obj);
	exports_obj->Set(SWIGV8_SYMBOL_NEW("Quaternion"), _exports_Quaternion_obj);
	exports_obj->Set(SWIGV8_SYMBOL_NEW("Radian"), _exports_Radian_obj);
	exports_obj->Set(SWIGV8_SYMBOL_NEW("ITexture"), _exports_ITexture_obj);
	exports_obj->Set(SWIGV8_SYMBOL_NEW("Vector2"), _exports_Vector2_obj);
	exports_obj->Set(SWIGV8_SYMBOL_NEW("Vector3"), _exports_Vector3_obj);
	exports_obj->Set(SWIGV8_SYMBOL_NEW("Vector4"), _exports_Vector4_obj);


	/* create and register namespace objects */

}

#if defined(BUILDING_NODE_EXTENSION)
NODE_MODULE(apertusvr, apertusvr_initialize)
#endif
